Map.setCenter(81.8463, 25.4358, 6);
Map.style().set('cursor', 'crosshair');
var spectral = require("users/dmlmont/spectral:spectral");

/////////////////////////////////////////////////////////////////////////////////////////LAI/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var X_train_GREEN = ee.Array([[-0.67078954422071,-0.699048375127873,-0.631079059673113,-0.646274067514869,-0.0531783314920617,0.133696550685858,0.143092673443032,0.142819565700855,0.520867251571472,0.162701160786496],
[-1.64547422692258,-1.75825379575015,-1.54209097418527,-1.73406380060289,0.339552711709507,1.46616194499594,1.51246434038479,1.50258825352549,-1.25271213494181,-1.48914478031288],
[-0.852892580009134,-0.515684157116088,-0.89775453271856,-0.417610095984747,0.398573187075346,0.480887452391787,0.481522839198735,0.478407319398938,0.721986537755067,0.203965027784027],
[0.475608862773839,0.130800446858317,0.547284902279159,0.109353813292921,-0.48818783662516,-0.639215900707941,-0.643242471059104,-0.646224720256273,0.21698193071906,0.389637715024767],
[-0.34072863527041,-0.712700218721936,-0.189022245964009,-0.798283438470718,-1.25639183422219,-1.06244964504626,-1.05998839801362,-1.07373879534382,-0.842521308076316,-0.514083894600902],
[-0.576353631251533,0.0917127670665972,-0.812268834657542,0.208111615752952,1.92164096040635,2.01603647315741,2.02670541951244,2.03991419587048,1.49102638284868,0.647751660694609],
[-0.58116548720858,-0.382128827221802,-0.616222302780245,-0.266108879364463,0.788959768350895,0.896281980865561,0.895733588045508,0.900161676469507,-0.718031392835132,-0.863669777715072],
[-0.27713024761328,0.311568781215626,-0.430391668677519,0.348754424492434,0.554753900302227,0.341836738100468,0.321457121179262,0.321434996976447,-0.837004668565409,-0.857261751831269],
[-1.12001135102735,-1.07008952235435,-1.0781099452637,-1.07835836877378,0.0548785934490304,0.661821723022953,0.682703166966573,0.673190782194021,-0.790724054079702,-0.865016642790604],
[-1.26781454498432,-1.2271191929132,-1.20680133057258,-1.25134682034066,0.18927278191838,1.04882565927645,1.09265974204768,1.0910893925797,-0.116494180367222,-0.357829754163443],
[0.428474390337686,0.759957352061856,0.296799971839688,0.880028435027746,0.732665279537174,0.287937978839238,0.272871049374123,0.28335099465015,0.879267998480447,0.567603105264815],
[-0.346792054368504,0.324518726844324,-0.529046517340091,0.395178917351772,0.581424005043247,0.297946097799271,0.265113872384071,0.257356188720283,-1.51299752968603,-1.44585848332093],
[-1.14508228442848,-1.19836836733019,-1.02766830095687,-1.21550429286843,-0.612229159394123,-0.120665164845326,-0.10229147556433,-0.1102687557979,-0.419449626980933,-0.533597373452861],
[-0.572733016926164,-0.478869181574296,-0.531854107845549,-0.466447876620794,-0.146307761385047,-0.00537596164517283,-0.00777877242263234,-0.0141556526539717,-1.04791972325846,-0.860036564897026],
[-0.349279367729468,-0.45670013221516,-0.206404649934948,-0.476321248755079,-0.750986363801306,-0.664881384083538,-0.663098713125404,-0.660266943472405,-0.996257454959535,-0.655149018740476],
[-0.284101443487697,-0.310162819474239,-0.216646654674909,-0.319124929117599,-1.11793480438947,-1.23718345297083,-1.26194879382329,-1.28276858029048,-1.99832013476376,-1.44106583065642],
[0.878387366996606,0.257276497001714,1.08258658515218,0.145408362637967,-1.35482429180604,-1.53167256100644,-1.53613461208691,-1.53984231688559,-0.505533345911877,0.170573278407871],
[-1.10274331597977,-0.723103423429785,-1.17664529973257,-0.633438727612375,1.3771033451495,1.96452192949617,1.99604287901526,2.00364750276839,0.335625187610291,-0.216404851335709],
[1.71312299534564,1.7937423377273,1.57264493983807,1.74683658270187,0.212647935549794,-0.467600735698125,-0.487176381014757,-0.472698819865942,0.961088132201737,1.03394926369435],
[-1.59202035750162,-1.80032283497877,-1.46719765689204,-1.80104924319394,-0.0159245349638294,1.04969587920698,1.08884979804879,1.07522681846703,-1.60494569530489,-1.68325376319652],
[3.22939800616634,2.48764848776352,3.13884336128375,2.1838168676449,-0.945604248649336,-1.68807458899813,-1.70788899858639,-1.71442518564173,1.65212819863064,2.33402253546085],
[1.00929869267428,1.94974461939111,0.488490185437572,1.98612185647868,2.17014095779588,1.42923343540104,1.38470889965991,1.38753450854905,-0.177354643991727,-0.507597273029157],
[1.34578868167414,-0.0186292350118719,1.87377538218764,-0.166736805547241,-1.7576884969007,-1.72540896386321,-1.69429686189712,-1.66992321511026,1.67425451334659,2.42501217437926],
[1.3298431835334,1.79330828850636,0.972063187318704,1.65066314206213,0.272497554880073,-0.416594939807708,-0.466750414402976,-0.481832832509847,-1.47262364592142,-1.03848097222915],
[-0.0668207755088275,0.917441000726467,-0.417996107221604,1.08368573761964,1.79696436540632,1.29410680482592,1.24033732543138,1.22906367954315,-2.05802379818818,-2.00709963820852],
[2.54090018525501,1.94657092477318,2.50059019568601,1.67776986017806,-1.45845745081561,-2.10763230708374,-2.136157929801,-2.15344859403428,-0.427110803646547,0.405336279434734],
[0.823651833224362,1.91775325454197,0.25869399691577,2.03621148371775,2.94548366055971,2.22481802627709,2.18884364127197,2.19847260904967,1.15272056489932,0.348681551864005],
[1.66921175180727,1.09089823729956,1.79387517542174,1.05353813138104,-0.3283365370081,-0.765320268003186,-0.76245820699575,-0.745552733634262,2.54110113758975,2.8457890054588],
[-0.0961746109133638,0.776015678627341,-0.467748285956164,0.915299603425038,2.44426109945228,2.18534746766118,2.15711429554453,2.15211392629019,-0.386275622886017,-0.824099714016925],
[0.180136876090056,-0.520078764444991,0.394805808370113,-0.556615951045322,-0.682761926545868,-0.505270011299988,-0.479055952208633,-0.466782772535831,2.02509654135853,1.92829330481278],
[-0.375613827990297,0.219816584909208,-0.533337304734967,0.300702999545447,0.980651999183227,0.837396774428801,0.833758886829772,0.843678519468457,1.03504302039201,0.538357989879737],
[0.942409371701859,0.136870064605345,1.19908323599254,0.08416226315282,-1.03744140833864,-1.17508152100421,-1.16773267545445,-1.15926875507874,0.685470162922057,1.05893937285873],
[0.4691751321645,1.38862417283709,0.030971334115867,1.49108199268669,2.33283273295088,1.79440921040222,1.76766572493154,1.77715963683114,0.902009798453887,0.260703037565214],
[2.0636868453623,2.17789808915907,1.78869974456672,2.06866079031376,0.317979819186626,-0.460878805852711,-0.484866692253959,-0.477907377977175,2.07899139605593,2.02373970047802],
[-0.986205108684636,-0.697954668065198,-1.05983859814704,-0.628815618431844,0.995858919402301,1.44208384401863,1.46338766726952,1.46240431628907,0.694884155849408,0.121470704671178],
[0.347988860243173,0.64722431733316,0.197216958011093,0.699769042018002,0.726825006001959,0.394502021097912,0.388496537228637,0.398517543711164,2.001402305154,1.60919120002209],
[-0.565453803075508,0.0645812976968899,-0.76124815886129,0.218212734330494,1.38505724157881,1.26126958415546,1.24525037467436,1.24141205635941,0.00932512557918426,-0.499165034277516],
[-0.809836392367991,-1.2128217802362,-0.547597144222776,-1.28508106877706,-1.14338977302076,-0.606008044464158,-0.572270665574038,-0.563882645891807,-0.129857200503569,-0.031571478038388],
[2.47366867580986,1.77678714714596,2.55693611581133,1.57354439408938,-1.44320114448549,-2.0525505019632,-2.06847999537761,-2.07314896611439,0.708369477687404,1.41780422195434],
[0.0179428512238744,0.85178917164717,-0.330875143756061,0.987527000715012,1.95265383885278,1.55523755435896,1.51765968611583,1.51214757513378,-0.971978844207928,-1.20566176899262],
[0.765601059180428,0.337767072481631,0.812438985137367,0.325318742942124,-0.416965002485352,-0.660040380862127,-0.66158440994055,-0.664508536477751,1.82914626240875,1.87148591229052],
[0.213548591541513,-0.42536745175437,0.466506775370931,-0.511552350026676,-1.43489463808535,-1.36494414307781,-1.35418606921825,-1.3541430522185,0.237933950744644,0.584733074121042],
[2.17678232678493,1.97346483099908,2.00822127585647,1.83303215528994,-0.489714450634478,-1.2142051249883,-1.24163195107291,-1.25023350506222,1.05020017848448,1.30159839952197],
[-0.837073210841828,-1.44129871464388,-0.59819720538166,-1.53082614954652,-1.3966808405163,-0.822124798418546,-0.799664152038633,-0.810001758863817,-1.04385667654711,-0.85324980414556],
[0.162922184637466,1.00250644517999,-0.223227512663457,1.10003754675742,1.86726511917277,1.41817079995136,1.38526176584638,1.38154045467841,0.071634976623516,-0.424966410225516], 
[-0.196486509510935,0.328530599131031,-0.359519825911283,0.459208180386294,0.479130688834534,0.104226462001589,0.0771813924634944,0.0683842990154104,0.0680991473700715,-0.29286367806346],
[-1.5123091677318,-1.66552398301595,-1.34007328090414,-1.74896742405855,-0.875672602120288,0.0614743978443708,0.112893025776576,0.113529920864153,0.265552938866402,-0.0692410265833262],
[0.794874244098596,1.89523404029931,0.235945758466607,2.00042356579852,2.62210754422062,1.87452758953837,1.83107981845596,1.83780605515925,0.185515277054556,-0.454153101587224],
[-0.184978738352191,0.265110207645911,-0.350106726543654,0.328951442473318,0.778227651062244,0.587927199538675,0.572329628168234,0.569433738549915,6.3337803375366e-05,-0.248911989891304],
[1.41005303841644,-0.0794511126336274,1.82118124596546,-0.290659483779479,-2.15920417948867,-2.1357940882128,-2.11825146007978,-2.12243704806475,0.92579292181109,1.73397838035041],
[0.66610634755969,0.40552439274787,0.800996357351077,0.478154380301584,-0.312116862148378,-0.620228564226307,-0.62861832643141,-0.616700547039754,-0.525998440080833,-0.166099108308657],
[-1.52260308377648,-1.64955286942661,-1.40858457142353,-1.64207794025359,-0.0336330454723129,0.903644893251092,0.945253390227642,0.941212467520824,-0.771472361841097,-1.07349687582593],
[-1.58426667854208,-1.73179557392195,-1.48663988374894,-1.70438022454163,0.269678789005799,1.31102691395998,1.36603294221061,1.36729284285906,0.277277923709873,-0.417741378322761],
[-1.28976241297375,-1.31692947991411,-1.15620802235322,-1.38562489155631,-0.431498353819795,0.403779125546122,0.432954239248759,0.423110690327939,-1.79283950210095,-1.440800813121],
[1.05802487656165,1.23307574869683,0.872826842871224,1.15788333658021,-0.0476452586417466,-0.584745706009794,-0.61881274805677,-0.629348004869456,-0.855238241877638,-0.505249655354989],
[-1.30937283038023,-1.38570380235094,-1.19987160356825,-1.32597287240507,0.101077450069264,0.745865644038493,0.765029185649087,0.759871825814275,-1.56120030459404,-1.55333265271994],
[1.02718305820271,0.905637819370689,1.01305612489423,0.897857822314697,-0.112932576897573,-0.541556867219939,-0.549966208016071,-0.543073827822987,1.44080880358926,1.51751506281233],
[-0.21358497332726,0.627301541033369,-0.525838503877845,0.760343061634776,2.19205192217292,1.99030308944432,1.96241455975571,1.96017829534181,-1.08188081957779,-1.26136265563562],
[0.738712058637518,1.72055403687923,0.218367365852862,1.80874694937832,2.54060740379572,1.87953842161431,1.8489365039177,1.85719962892996,1.66997084133201,0.854543975992411],
[1.02546935875959,0.505916568127193,1.13998618997265,0.389337522643943,-1.21461519596893,-1.49094907907984,-1.4947138917363,-1.49948471135766,1.12862954389494,1.51076344037256],
[-1.55162072194492,-1.57963263238577,-1.47947647570309,-1.54489090825852,0.469960693770615,1.50588045096543,1.56005225069565,1.56536021499535,-0.293033680316298,-0.816589313727301],
[-1.0600853676654,-1.14320486550427,-0.929406540754747,-1.1149254043559,-0.439174454875059,-0.0263475986066818,-0.000196534204126434,0.00902861219104804,0.7290725784304,0.291221517804646],
[-0.12937354468224,-0.152627705150405,-0.0594752163627216,-0.150933294563811,-0.836323822378892,-0.9726752556186,-0.992951621696139,-1.00723645854769,-1.68540181835186,-1.16623168333371],
[-0.0467791996523551,-0.854106543059692,0.198045261700843,-0.983933480182054,-1.63061567846147,-1.34308176962935,-1.32155749402704,-1.32895262272083,1.15945879196385,1.28457466254197],
[0.0640126799449917,0.497416010414176,-0.110038923403652,0.609203224990432,0.36056080304448,-0.0739173876167241,-0.110234985702085,-0.123733985378631,-1.04841408897319,-1.07966203995634],
[1.02285785551404,1.27598928538994,0.863471256410214,1.3184556097337,0.526255497045249,-0.0501437024237665,-0.0759166703911775,-0.0708987266483165,-0.0967416053474872,-0.0309838536279582],
[1.00812128943841,1.26331710371806,0.894855377068197,1.33024912845227,0.302540531775223,-0.296783318929793,-0.313666594350869,-0.299151337886199,1.19582686498069,1.02661481481198],
[0.234138560320443,0.761257957457529,0.046616829428184,0.774913843114759,-0.110703172717435,-0.602687707404162,-0.6441149945733,-0.660958477836936,-1.40339328985054,-1.19203371064634],
[1.37902388259237,0.261794362180574,1.64720611151328,0.0789737598880887,-1.98184338493526,-2.15107870627798,-2.15269898407515,-2.16653402538136,0.0168503309494667,0.803394190315353],
[1.70868125242387,0.501958610469393,2.12000025199771,0.316319263131314,-1.44370567229316,-1.5606373587588,-1.53883745724059,-1.5193570798406,1.76071888461757,2.54584731679734],
[-1.18972017938262,-1.02802470656306,-1.21763396543007,-0.976865131623816,0.950287013921286,1.6974619294935,1.73318707490259,1.73144104020537,0.0739311541414584,-0.399079813588901],
[-0.122768268018301,0.400803368498691,-0.259471733825418,0.457744995363573,0.656863097859535,0.412012344147232,0.40312372551116,0.41409547553992,0.558361560657797,0.259049590784946],
[-0.408256084751363,-0.716665183455427,-0.24499820427598,-0.72505891322625,-0.215180613708745,0.144948709116073,0.167718524832189,0.177048985190151,-0.359940489172661,-0.229294986961871],
[-0.415451870241862,0.213092848037162,-0.582955380995533,0.261646092779507,0.388864368589419,0.145116891749723,0.115542790241055,0.102098752593216,-1.00018821855089,-1.05011005395254],
[0.29232590809316,-0.70339131550948,0.56698097897566,-0.814322658346999,-1.75564343680903,-1.59994214363482,-1.5877119235036,-1.59842819052926,0.344072078407772,0.636481372774975],
[1.0592271674639,1.00509525232526,0.969647436952763,0.978411663296004,0.0784927184071078,-0.371311189742445,-0.3803539072018,-0.376057761779811,2.22896001192419,2.20880409465002],
[0.135402717035679,0.312536304895989,0.105565455585293,0.353500945265054,0.206628811323816,-0.0125537947910066,-0.0250889433397277,-0.0216237627301841,-0.543931663342719,-0.393842567883412],
[0.217298395603738,0.875827684811817,-0.0232949393928562,0.926446981613606,0.545258409317451,0.0465758592062144,0.00136218781108,-0.010440901827163,-1.82663549697333,-1.56214307708733],
[-1.14482917053057,-1.06927328131764,-1.08769532836418,-1.08627706699078,0.258105002551921,1.00940137921555,1.04378064981064,1.04215017322621,-0.666394406105925,-0.713695846054903],
[1.61052190704922,0.928724709774271,1.84285915139202,0.86404148783625,-0.847730462634833,-1.22672688548207,-1.22633378602324,-1.21130187860891,0.70009584411783,1.27936912609131],
[-0.465394336356264,0.209762837993595,-0.659996511091357,0.322508545921043,1.36931243777361,1.25455174652382,1.22734411876281,1.21990906969923,-1.62514158668156,-1.55482639307307],
[0.297768985379145,0.911125463493425,0.00412545548164887,0.971609539490108,1.21955968552994,0.784193609529814,0.755718785513824,0.751745977259151,0.0899589578466207,-0.191617222372732],
[-0.39924685813341,-0.854809516294208,-0.190509000313288,-0.948064108495224,-1.03934955018579,-0.648632438296697,-0.624136441723388,-0.624088422895526,0.0643924889960409,0.248410262109362],
[0.37983618827835,1.44220952923912,-0.0846458212158113,1.60301429790649,2.44359169763875,1.80159461958454,1.75756669948422,1.75483754307925,-0.0774978079172122,-0.631041443950392],
[1.35794638849673,1.21187458220143,1.32179344562394,1.2317563915006,-0.28257127819663,-0.860482340971122,-0.879307203422468,-0.877446550431195,0.829505511713523,0.918415916620824],
[0.808657790131507,0.784362746748225,0.78108418258339,0.693430050930486,-0.481377725801457,-0.838226083803572,-0.859148593270818,-0.863875460426089,-0.879550177897573,-0.351930243765451],
[0.206943405051719,0.724970817072143,-0.0186515346345868,0.769986722177324,0.809448236457392,0.427826149498393,0.4104241326694,0.410991627251999,1.25587307337254,0.851859752773434],
[0.280887816857185,-0.2237907139999,0.481008944108825,-0.256187481833003,-0.472307799117381,-0.385150625747247,-0.36265690296684,-0.342789566730617,1.34712443424484,1.36586547480462],
[2.35858430640553,2.10962630883691,2.24268188006439,1.99936660929133,-0.576099516979196,-1.33607445186335,-1.36726641833359,-1.37574494697408,-0.0265337683367625,0.419032393836756],
[1.25438192974713,1.37178428800064,1.13281183929921,1.35941353513194,-0.0137642086851999,-0.617614472895313,-0.640823718202037,-0.63593174526898,0.364323919033738,0.442220973742102],
[2.36804878763708,1.99029189927571,2.34122935554809,1.83386283095913,-0.640659790209188,-1.32130150597114,-1.33751203559315,-1.33083635705171,1.32371470889011,1.75022971918356],
[-1.0368319591202,-0.671470127070682,-1.05283369918407,-0.605754762986396,-0.00533553898928123,0.123575399012818,0.118864176163282,0.112163989993421,-0.504952203034646,-0.776669265306439],
[1.77378635019539,1.83537104444246,1.69753684040623,1.83685510196997,-0.085648439139284,-0.807372937191156,-0.835051561030609,-0.826651892468745,-0.400278835072128,-0.0237703377771417],
[-0.988894753186158,-0.599083945529805,-1.05179005097768,-0.576163811041667,0.661353729599185,1.070873679112,1.07298027627633,1.06512020074773,-1.61696310958697,-1.49524315353481],
[-0.650960183705129,-0.463856737308289,-0.675704859159513,-0.336871617361673,0.31649935586402,0.311058904159705,0.304037546933036,0.298113459181617,-0.0290157036090632,-0.372465789322255],
[0.938290542548717,0.517590679562725,1.07425917451917,0.560387138384161,-0.212181212632037,-0.514465838180174,-0.515275245329381,-0.501528690614618,0.657413144101266,0.850707965703701],
[-0.494873163703461,-0.396806693725317,-0.507198561891161,-0.306722137345075,0.535997135948723,0.639544067392184,0.648925721744877,0.65465528307835,0.917226688886681,0.501858143387342],
[0.654213445298018,0.592641529072116,0.612568351338258,0.566718912760536,-0.344968058516519,-0.692362256153235,-0.706866607499984,-0.714713906553895,0.704793080420764,0.810635037614935],
[-0.160977193261031,-0.784053737948239,0.136145032726736,-0.868564859305438,-1.10185019541026,-0.74889485091987,-0.713453369204875,-0.696169574282618,1.17318985434928,1.28030115323112],
[-1.37677139527083,-1.31994534804673,-1.27248848330297,-1.33429364797208,-0.199738013341197,0.533419256285451,0.573577800272913,0.575269836512835,0.462356708900002,0.0794129627350059],
[-0.485098781189946,-0.580922723014441,-0.41118045541579,-0.557848322431678,-0.207374900033135,-0.0420245071158854,-0.0272622522462212,-0.0198207778015494,0.941808621985838,0.642892117479847],
[1.07413727998181,1.14719297983303,0.9200699110362,1.14930809767501,0.330492958289065,-0.190611324122126,-0.216097814531186,-0.220613649309253,0.0367875337247209,0.139617581969369],
[-0.794555820552565,-0.511434791317988,-0.821599206892497,-0.521472320406557,0.377968466979466,0.726670562527366,0.736806790873039,0.734836800095729,-0.733795255491415,-0.711664069199381],
[0.478050761256261,-0.537444430342111,0.868974927828483,-0.678797506623587,-1.7348604684997,-1.53153467886689,-1.51263696714439,-1.508304514418,-0.611490260966352,0.135529708544916],
[-0.719574380729789,-0.77564769761109,-0.5999509346339,-0.743676725924203,-0.542342732907616,-0.359768126224765,-0.358630993699735,-0.358582091139627,-1.33052048527987,-1.12637572985388],
[-0.895484420182438,-0.78046480297599,-0.917632268890633,-0.745591670738858,0.557379659985822,1.00732823011899,1.03752050741817,1.04175542118541,1.86073848008454,1.21739364955973],
[1.11649641591141,-0.0281094912106537,1.48272171172864,-0.137239430619576,-1.69792242061326,-1.76736131003873,-1.7545907150053,-1.74971212694867,0.788327667102627,1.36520106801698],
[-0.756441540798911,-0.163344944618277,-0.92708052998971,-0.0152219491381796,1.59642394464629,1.67782870486733,1.65881363327595,1.64515122209602,-1.32823960122736,-1.45571099016225],
[-1.20390277383375,-1.19384302596087,-1.15981430988159,-1.10394362998045,0.341672770262358,0.83010192608233,0.855682597566228,0.859067735289816,0.816571837757755,0.106315404661809],
[-0.89683079762389,-1.11783249574779,-0.763032750079837,-1.1237435714745,-0.161892375049826,0.428079180199478,0.469352219958074,0.479927255612978,1.26998131618153,0.881590630891743],
[0.197407853622381,0.472984804195573,0.07435379351625,0.447841956479784,0.243452786208175,0.00625722748221158,-0.0102673615559838,-0.0174957922537471,-0.094169505674755,-0.0181756175848914],
[0.0769817714124857,0.286782534779323,0.0148557750361361,0.259753495379805,-0.075007753347321,-0.264631283704903,-0.274974198823573,-0.276306606661074,0.0987980114210429,0.134890205553763],
[-0.772945255211447,-1.28517462730669,-0.531934491487841,-1.29171718469596,-0.620564403226726,-0.0638802058144693,-0.0249548296207889,-0.010229073051678,0.451378320971582,0.238868777568607],
[-0.0266703936499954,0.697882219392673,-0.262143807604035,0.744276882678694,0.794361344268853,0.413320030801875,0.386344935838815,0.390126859159993,-0.65072201721523,-0.796850022493558],
[-0.943561559842262,-1.3091026064303,-0.772873980047489,-1.35896346094303,-0.70816152043529,-0.0784592438929672,-0.0458266159915798,-0.0481914483533573,-0.0481084379723203,-0.174496560747226],
[0.516816159211556,0.784013456628452,0.360088510315886,0.783346652566972,0.430214816389676,0.0559902445241986,0.033492914606219,0.0292286243917806,-0.25280940110285,-0.171140153893415],
[1.55552423110633,1.30362249252372,1.63631530106101,1.26837569314747,-0.386962470658741,-0.909549312470925,-0.914067168880695,-0.894211223695106,1.51276795657683,1.79491089096371],
[-0.791892521165846,-0.356297893988392,-0.869777787685319,-0.346748458159405,0.447565370151646,0.637720087849164,0.646048662089271,0.647361285681271,0.55534808667072,0.189378149070914],
[-1.19031745021885,-1.1635385444821,-1.14139741854201,-1.12107016890389,0.23045105519984,0.813435779041595,0.8350003725486,0.83067412047098,-0.648041601163369,-0.890845797217675],
[0.86053732364848,0.527792163957099,0.885003489135132,0.453453822357688,-0.911351222885758,-1.23865748358284,-1.26041993637277,-1.27747993876224,-0.835388497247394,-0.310776353304454],
[-0.943039485651613,-0.989798469120955,-0.88392349382629,-0.978478522335425,0.267468983555179,0.860723857589762,0.892314645101988,0.896822324884658,-0.0362740995169665,-0.277476144852711],
[-0.692798527040915,-1.16812522702208,-0.458853971125361,-1.25440953043364,-1.20694672903182,-0.703779306938408,-0.681049180575395,-0.686526726168328,-0.876230140055659,-0.585454342618424],
[0.755285989731523,0.660194884912545,0.783200695933002,0.63205845438102,-0.305844186681491,-0.638099585151511,-0.638693200698675,-0.624104313010565,1.75907294514141,1.7617947086826],
[1.16812981665725,1.46490747138993,0.979512118070803,1.41258901737918,0.345825610232739,-0.234553388624411,-0.259977699970642,-0.25238139808348,-0.159634580440968,0.0230867492589352],
[-0.418949099211257,-0.248615891631179,-0.383536305649069,-0.227541677836952,-0.185325446923361,-0.183814040462901,-0.181428416082489,-0.17569064325041,0.199245454623775,0.122038704675361],
[-0.459633862456167,0.0138704712772696,-0.615599569663139,0.163341166827473,1.27280345926071,1.18038427670899,1.17345492800781,1.17659269586661,0.534154140660262,-0.0144208275778085],
[-1.38312808552879,-1.36040398264249,-1.27358459851105,-1.39027979685092,-0.539186113741087,0.123063580742561,0.134658711931492,0.117827016335454,-2.13244033126463,-1.81247534129018],
[-0.564663534730434,-0.582478227160428,-0.542944435554653,-0.508026958068817,-0.218729975665685,-0.188764454563204,-0.191790598989086,-0.198318626521942,0.222563700080266,-0.10493919564581],
[0.186881866486268,0.831094526759393,-0.0433191842223422,0.908524712076465,0.804688537709527,0.343498072247237,0.321431342594472,0.331112975620278,0.365786197912789,-0.0229850928042726],
[-0.102345103097875,0.136446391570208,-0.195780072145719,0.21007067339382,0.609124149381311,0.464247614092956,0.44939600671096,0.447185902782911,-0.698363763324691,-0.706737767927665],
[-0.219722637369564,-0.0987202182425704,-0.215433277420199,-0.00788558356266772,-0.129918359233328,-0.309319639408001,-0.327570138707329,-0.330818034973804,-1.22281468048663,-1.06988264018424],
[0.12598238876308,-0.599307173811809,0.330358102710655,-0.733230906490814,-1.37626196615832,-1.15110091369369,-1.14025240268115,-1.15292559444073,-0.339968118549391,0.0743098352672527],
[1.46305286344131,0.0546232194107626,2.02098021780266,-0.1116836439606,-2.06764286929231,-2.08659466836254,-2.06210101211576,-2.0409937749881,0.694746807512924,1.60529896132231],
[0.991696664442642,0.25426699239781,1.21295959209343,0.205615897363486,-0.69019152852495,-0.828810608536492,-0.823143376573095,-0.815337903397118,0.377611374004345,0.814192064238385],
[-0.627787406028352,-0.453542624182536,-0.590824023933081,-0.477578056801619,0.0185704142688204,0.276344724930799,0.292402818939817,0.299463526467575,0.124323900323624,0.0923436047514097],
[0.0627553385888667,0.383361845501948,-0.0916825469427,0.458792792858725,0.834082934962323,0.596227679332617,0.576349164942259,0.571365312243721,-0.48529340453564,-0.557569276783998],
[-0.740525222206054,-0.852502415815423,-0.639991558392083,-0.890476856073778,-0.600414519621661,-0.26128825914138,-0.254859342197994,-0.265703464166825,-1.14955708366745,-0.916690900095161],
[0.477816685342845,0.488443051376761,0.441330812223462,0.548252577662932,-0.0222159485502496,-0.377642581174499,-0.398999321234616,-0.406119769569022,-0.536560344525053,-0.360103617321936],
[-0.563635598437805,-0.160214109404515,-0.686280502728843,-0.0466597681065136,1.28506247193241,1.38157614243331,1.39487545511113,1.40986719783788,1.5231396483941,0.832564109041648],
[0.951938003057192,-0.0943820926049189,1.32311820112927,-0.237553566588272,-1.6951295773117,-1.6850681659344,-1.66550554015821,-1.6565714423282,1.22065750699713,1.79994877131747],
[-0.675690165277253,-0.053949343839095,-0.825948640030921,0.0353570049281471,0.895872715349717,0.853786567424982,0.837569940732052,0.836410490099684,-1.08526764997212,-1.22486766680103],
[-1.21594877884624,-0.86863736515942,-1.27514106366424,-0.745693951678267,1.16183264294433,1.65584979473437,1.67197023370999,1.67433251091619,-0.699070863717399,-1.12785463771207],
[-0.447419171495912,-0.453418844225893,-0.388738802764669,-0.480279615380653,-0.757024900703323,-0.71034601869775,-0.713986440272762,-0.723622802810761,-0.342234712233813,-0.269879426085118],
[-1.36209088033288,-1.45363593528973,-1.21078948335057,-1.47188529546205,-0.395147220670163,0.378175159102794,0.420823478329242,0.427351230057694,-0.0440738424555167,-0.332574123093941],
[-0.499751737356249,-0.698868909382767,-0.37199990198566,-0.755611411889546,-0.656580197188519,-0.357182470892203,-0.338231036834881,-0.33885884460287,0.454379072954775,0.474471645632085],
[0.864941702189335,0.00959831988208466,1.16670101362381,0.00139046719027921,-1.0120234986084,-1.13399209268919,-1.12238260766783,-1.10799780415064,0.952019434275597,1.24668226677229],
[-0.120784322292428,0.72481297405094,-0.423625216596939,0.865067480883801,1.25246350677449,0.77792966703616,0.747727108400756,0.747596378137492,0.482173776646777,-0.18748914367364],
[-1.47579230840236,-1.46097658175681,-1.35386782339078,-1.4657927473803,-0.513169889668202,0.144544502304332,0.173962083476624,0.171403269015703,-0.132894717131842,-0.494014106470364],
[0.0727773167722848,0.0801829778932224,0.0749977234140177,0.0743431331037572,-0.26021681917897,-0.398761374461058,-0.411937788352586,-0.420331479256275,-0.704686033511364,-0.456286661504376],
[-0.07093450173458,0.416830112102578,-0.256834731568743,0.560808803026143,0.722869689964203,0.331730262895338,0.302277475089285,0.292024745184799,-0.189222377127091,-0.500323770977111],
[-0.196232258793739,-0.862835868423021,0.0863566843424593,-0.939377352098812,-1.07543294952583,-0.705252075168838,-0.680319823099541,-0.674208028078887,-0.384556544175346,-0.054169497760299],
[-0.846893818144444,-0.596528773767517,-0.852954798380377,-0.609199717274709,0.0144208165257526,0.299367123779708,0.300756034893457,0.294429988684508,-1.22996067402268,-1.09801750882542],
[0.663000870943915,-0.204951315535194,1.00232807350663,-0.256340653862026,-0.977200111162626,-0.927159574869844,-0.910907498767844,-0.895477081338777,-0.0993520199138534,0.433484229015928],
[1.39268691406844,-0.00878485418634255,1.74185502459864,-0.224428077636227,-1.85035776990397,-1.8188132260659,-1.80599488128689,-1.81351349671381,0.254547148259225,1.06331220299072],
[-1.4581715287279,-1.47188457863728,-1.33625746461718,-1.5670464845231,-0.591978627256198,0.38040535642813,0.422469856179185,0.413240120819436,-1.13130630622691,-1.04058546369925],
[-0.108030194690701,-0.227513400044154,-0.011156172133458,-0.24802512409491,-0.821279323174678,-0.87668133166652,-0.889868319326007,-0.89943514527811,-1.54181008496465,-1.02220507587289],
[-0.0364101366980183,0.509655318536651,-0.230318651137822,0.482039307932028,0.400643779006318,0.135449295182018,0.111294331710558,0.103429057231087,-0.541375394615206,-0.528674312253807],
[0.707752132317787,0.101858442689745,0.886636136386733,0.0978621909645689,-0.55894432378574,-0.690299829604219,-0.6893200881156,-0.685498623298906,-0.0177377365619085,0.329219616708413],
[0.490517679921336,0.887744042075898,0.318349356244413,0.880885838444036,0.307188704631046,-0.129000723208931,-0.146713392269532,-0.140737945864785,0.740733149153673,0.567393367336539],
[-1.25828641652165,-1.08044228488375,-1.20651141156062,-1.11137107494908,-0.211753983844409,0.381390186282039,0.397388290273109,0.388012609294913,-1.37157303000962,-1.26837104025532],
[-0.660960831207247,-0.830255044284453,-0.583533863597205,-0.834539547616144,-0.255915151293579,0.0856384326492643,0.0919594276438083,0.0799609777162748,-1.05730503529446,-0.908828675871814],
[0.22556352398117,0.874758802149455,-0.0153771819646829,0.881772335325644,0.788497478445266,0.38591204175001,0.357003036782663,0.356633937331761,-0.739867634994269,-0.713392079800352],
[-0.365493274267444,-0.439973242603124,-0.350480436947608,-0.371326362121128,-0.188081697745609,-0.205951606303968,-0.210448598715973,-0.219248073525138,0.359985762237239,0.0908996658736595],
[0.23379757322591,0.358531681481662,0.14461723545805,0.39040370722586,0.338096025732194,0.104262633021999,0.0855222911197961,0.0779237581754589,-0.602962332517576,-0.48309309037563],
[-0.300075976417912,-0.556603090005194,-0.112439133655153,-0.55854805608919,-0.694604949467168,-0.553908527908223,-0.542843652489022,-0.533415858325263,-0.486124000519133,-0.269644020921893],
[0.538932076794959,-0.322329658253118,0.881195047743569,-0.442785499785858,-1.41720857117441,-1.29528496096333,-1.26942250665228,-1.25351999632492,1.31560037910684,1.66818498840675],
[0.648032960334393,1.48060614738796,0.239945118301885,1.54721293540777,1.59636810494059,0.950260017049201,0.901566070581107,0.894559164842231,-1.1362663379358,-1.18116465780921],
[-1.25674419676875,-1.48726792804602,-1.09208290209042,-1.52925842717782,-0.403516384045228,0.465427143519263,0.501588573019444,0.495945972187961,-1.40121861331561,-1.24977701663617],
[-1.57289691909372,-1.64562158824181,-1.45245869948477,-1.65833151715136,-0.164602966601194,0.805472032363655,0.86117733122326,0.866503945005344,0.668882396067861,0.0437069952854023],
[0.0591536234452029,0.411259917747852,-0.0345194231168049,0.457708772480881,0.0425538427055315,-0.290047339982847,-0.313260530603745,-0.319529576696271,-0.513985659955122,-0.471137497474165],
[-0.493450625024305,-0.590204196321911,-0.355415224928465,-0.572375153187671,-0.738970930283855,-0.656041203778623,-0.649885675013711,-0.645948111839302,-0.0593056024416801,-0.0546307324221363],
[0.106546823543253,-0.413226931876526,0.276274212854053,-0.413035827533297,-1.02346676612001,-1.04868369766022,-1.04537437533457,-1.04799202276146,0.482199046416584,0.52241136838289],
[-0.896114407357334,-0.891562219388032,-0.845566486917061,-0.867011981419271,0.161221530748014,0.604721487201896,0.618255269565889,0.612159038183454,-0.877090715110879,-0.881271964770615],
[-1.14790803738993,-0.883492474347383,-1.16604223102881,-0.859983074303901,0.634109285001213,1.25008484271213,1.26926994820933,1.26601350728811,-1.25144045011115,-1.27111893414714],
[-0.449397030043199,-0.718162779333706,-0.312678091655609,-0.70533247871215,-0.552966021668045,-0.36119443771534,-0.347909995929417,-0.346610736146854,0.434098363627358,0.327226613486727],
[-1.27772060636229,-1.28310693403524,-1.19357732121368,-1.22734983343137,0.0358325598331895,0.594331042258186,0.623761625215764,0.631550923608031,0.194521412620913,-0.334729128063989],
[-1.02405025717169,-1.05660001640756,-0.931824039309592,-1.04292858192837,0.0551916263020715,0.623879852981186,0.665745751310406,0.682475662883076,1.4291513450931,0.892624769723618],
[-1.15138516700612,-1.04993281898393,-1.11967556067654,-1.02968681904772,0.37586628807566,1.02024335470295,1.04871610620052,1.05028676349207,-0.591327079779501,-0.789343159122644],
[-0.74620491214333,-0.482218437468629,-0.769676170140012,-0.320933489806864,0.671967913495495,0.713456459099065,0.703076203466845,0.701400188907736,-1.2362915669553,-1.30933204771477],
[1.77470731036855,2.16672024372235,1.39756019981152,2.10638397762321,0.774869774950551,-0.0388581274265836,-0.0737231028026028,-0.0743874948482521,1.1037713417626,0.942063792463686]]);


var alpha_coefficients_GREEN = ee.Image([[28.0195332274794,-14.1922280158325,-32.1767675980291,4.112170419375,-31.8122022162119,3.92265615799145,13.1880163767813,14.3107220708414,-34.0660136890888,
-29.5628474630763,55.4529463855686,-22.8030217444779,25.5640238571041,-2.17798905142054,-36.4470058460148,-9.30510860409936,21.3014846961894,10.0338211797099,-25.5164283874522,-23.0267698877976,
-0.286559450896243,10.1343223563796,28.9450578708048,35.9758777237564,42.4523104810949,6.40023765477638,-6.34100790108114,9.24823046764642,36.0921084430632,-4.73866538177718,-15.9153217444408,
-33.9924197716499,2.80909463723473,1.60354664017646,-30.2769311451894,10.4923437774274,-1.60452376728772,-21.155737292372,-9.96229845362162,-52.6218532300935,37.9522858349428,-4.69891179952135,
-7.83289197790733,-20.2751002466996,-11.1825682769847,-42.3828846658415,-1.306141325675,28.2188544354824,-41.7723932834249,3.02316258453695,-0.084924376578038,16.6260177034643,15.2134795220078,
-15.9254510224891,-45.5084625802882,-23.1763261355762,3.39782522278753,-0.58449952486168,-19.3515111855404,36.4883897595772,40.1124266317577,-18.7858934441104,-5.52017561542809,3.70256280483445,
-49.9221741787803,20.5279937477047,18.8145290746038,10.4340632279982,-21.2671608511174,-0.76194541753234,-16.5865148173916,-19.6653208156182,41.7438985085065,55.6616143535496,-1.09707408894013,
-14.0923315244344,-9.27897036727994,-26.6700038305683,-2.74430898411943,-0.242035254043687,-10.3790212256453,-42.6458290093792,33.3365915122397,-10.1695876102138,14.8176739478372,-9.48310532488547,
21.7208969713743,-33.5538542183644,4.45328677447198,-28.8915978824279,9.88329315847375,-10.0201432722972,-0.637878876819573,50.5359008507433,20.8213370092142,20.3554542883601,61.204859752488,
8.44186691551238,-27.7092410284279,51.5594095971929,-33.0114298212902,18.4826003608431,17.877119060113,30.0088538262926,-11.1074357243136,-22.7524354338236,1.16758902502774,-20.1859864115427,
-22.8998231278344,54.2379159394257,10.3539445775487,-17.9319805719754,-0.998550117947223,37.9599665762497,24.89818588548,6.21051015183734,4.39753630556058,33.0213706197107,-1.44788599997061,
-10.7806507156506,4.46797570505434,34.6235712117909,-40.9030926082867,-0.709891932154244,-12.2693764278703,1.63773883151289,25.2567873405492,1.87833856846371,-40.023278335233,-15.0339572018305,
-45.860762265536,-8.55591406642598,-15.1649998984833,-18.6741925602455,-16.2944130023917,20.8955224726777,-43.454686449504,63.2152990793033,-39.38591430682,27.0081244237908,14.0003180587269,
57.4046670609536,36.6928004365271,18.5248881647674,6.90939786816039,-28.6392818854419,-10.4340304207059,-10.8723179808398,-20.4009385365186,22.0308820120041,-38.0775225285051,-40.4401609553016,
-24.1377546542077,-4.52612545910767,-27.0316875737587,21.5190204244981,14.0934748453798,-3.75146084659247,-41.6561037875201,36.1182196644891,9.86967973178817,96.7650480866215,51.0252274405394,
-5.05335049224447,13.8743543512885,7.32013148369362,-36.7242561566605,18.1706487116908,8.33013537191941,2.66593388348186,21.0195758759886,2.88888131629505,11.073201505915,-30.9660536154271,
32.065728892739,-64.4469265606853,-6.5598906814083,-55.839243142891,18.8480314364568,-8.61239898399495]]);

var XDX_pre_calc_GREEN =  ee.Image([[0.0610640332280729],[0.398685791694372],[0.082757386718757],[0.0293952267117152],[0.0503095212476888],[0.0990324782171713],[0.0471167872856602],[0.022580923433123],
[0.168662016272948],[0.221217833224376],[0.0480631191613271],[0.0308528993242254],[0.176365784409098],[0.0372344502003124],[0.0222947724519292],[0.0267406386879466],[0.122648051298685],[0.180530174651269],
[0.397267509873659],[0.381627875912211],[1.18827288490377],[0.283996220412043],[0.312896930197233],[0.266657280798927],[0.0928526494305833],[0.770259237645016],[0.304040729708925],[0.337713668016759],
[0.115058938638063],[0.0320868933975104],[0.0349948827214087],[0.130830721336598],[0.164679293937179],[0.546875651891813],[0.139614317793626],[0.0327893590843524],[0.0664929384662492],[0.124809545005535],
[0.754959761801127],[0.0876961209696392],[0.0650675646483289],[0.0508763861112511],[0.573228742467535],[0.171245172424924],[0.0945515834423551],[0.0190368252842506],[0.324075441246416],[0.278905459695285],
[0.0190844328953582],[0.319553810309907],[0.0660666989755018],[0.333842607544681],[0.375111662523245],[0.221167479014581],[0.155095963315062],[0.236384345770729],[0.135986684178728],[0.0959672920097909],
[0.237569559372319],[0.142431284416672],[0.347939930563006],[0.150162171853033],[0.0119132997062291],[0.0736706925650997],[0.0181885538472254],[0.163000340554613],[0.166271750596642],[0.038019720587033],
[0.273038769503232],[0.399567947124747],[0.209840347131932],[0.0182633362839658],[0.0365409838547059],[0.0305929980364176],[0.0880647397685316],[0.139233854219715],[0.00735478301722388],[0.0480110605295592],
[0.176013873845085],[0.339098366014959],[0.0572178847896821],[0.0613815001296903],[0.0569759365427787],[0.178891737086873],[0.23971405744774],[0.0913226834760663],[0.0360393318579116],[0.0231105626349918],
[0.691706077871991],[0.222141775891517],[0.694347731300572],[0.117009624404583],[0.445108785394401],[0.12252823106834],[0.0495744885466542],[0.112644382927147],[0.0336943342729845],[0.0561072685064256],
[0.0487585359262861],[0.242512240656116],[0.0340775538087055],[0.150987768899636],[0.0762302939133807],[0.107636229554452],[0.0676991093552222],[0.113932825637573],[0.210526704529915],[0.101836254166418],
[0.198669221951628],[0.125442809364528],[0.0136018524275544],[0.00520791202392146],[0.124564899891998],[0.0383215953285823],[0.156764745672673],[0.0485775125066925],[0.325966675718757],[0.0732411220726692],
[0.192657482572924],[0.0953078143618282],[0.129381278154744],[0.112461495626385],[0.0792572585451569],[0.207099347327297],[0.0163287851060797],[0.0474395596633248],[0.248594166499211],[0.0435606103579144],
[0.0464366765216324],[0.00750353236128952],[0.00512729409225241],[0.0497611470245692],[0.373644456068568],[0.128931727380255],[0.0425767958948774],[0.0156447077660179],[0.0808352996825939],[0.0328361081427733],
[0.0602015699033019],[0.172777041744528],[0.0636584705773289],[0.201863119396084],[0.0315743486103647],[0.251910525490094],[0.0450764590549805],[0.122053637380088],[0.0584867749160274],[0.281937021056692],
[0.00237136477415689],[0.0203485445578708],[0.0548899043789515],[0.0823869602389394],[0.0918808858168434],[0.282737137368485],[0.2862774029315],[0.0119074061952541],[0.0193178988168774],[0.0685687203387581],
[0.0559950814750799],[0.19334548131483],[0.069957194584596],[0.0487015531677888],[0.0210834241995665],[0.0104636208506599],[0.0240100527035491],[0.0886739438172371],[0.155721645616407],[0.23690112070328],
[0.343737586929835],[0.0114788363552945],[0.0368959964790845],[0.0283199590693263],[0.109191407845377],[0.1721752273181],[0.0409677945790222],[0.217207796398989],[0.141987784030877],[0.177960446742547],
[0.0659336262560502],[0.445079967389523]])//.multiply(1.0e+1)

var mx_GREEN       =  ee.Image([[0.0361832598533339,0.0810636623504067,0.0355704418619047,0.131319107780762,0.37926506816363,0.442046758335607,0.446655184763607,0.446687101671612,0.20669980631676,0.0893315488557987]]).multiply(1.0e+04);
var sx_GREEN       =  ee.Image([[0.00919207863650421,0.0188787860019573,0.0112428821103701,0.0247152915056575,0.0285205876798114,0.0352439009623457,0.0352173709650289,0.0349558895966315,0.024981545549813,0.0196641380170907]]).multiply(1.0e+04);
var mean_model_Green = 2.58491555319892;
var hyp_ell_GREEN  = ee.Image([0.00880394028538869,0.0398255030048824,0.0745237656966263,0.0186814810457692,0.00320693479505507,0.00827730777305861,4.85737965679259e-05,2.65386575314323e-05,6.63870530378289e-10,9.71147360512211e-10]);
var hyp_sign_GREEN = ee.Array([3.70302890204142e-06]);
var hyp_sig_GREEN  = 1013.11467416342;
var LAI_min_th       = 0;
var LAI_max_th       = 7;
var XTrain_GREEN_dim = X_train_GREEN.length().toList().get(0);
var sequence_GREEN   = ee.List.sequence(1, XTrain_GREEN_dim).map(function(element){ return ee.String('B').cat(ee.String(element)).slice(0,4).replace('[.]+[0-9]*$','')});

var LAIG_palette =['#FFFFFF','#FFFFFF','#FFFFFF','#FFFFFF','#FFFFFF','#FFFFFF','#FFFFFF','#FFFFFF','#FFFFFF','#FFFFFF','#FFFFFF','#FDFEFB','#FBFDF8','#FAFCF4','#F8FBF1','#F6FAED',
'#F5F9EA','#F3F8E6','#F2F7E3','#F0F6DF','#EEF5DC','#EDF4D9','#EBF3D5','#EAF2D2','#E8F1CE','#E6F0CB','#E5EFC7','#E3EEC4','#E1EDC0','#E0ECBD','#DEEBBA','#DDEAB6','#DBE9B3','#D9E8AF',
'#D8E7AC','#D5E5A5','#D3E4A1','#D1E39E','#D0E29B','#CEE197','#CCE094','#CBDF90','#C9DE8D','#C8DD89','#C6DC86','#C4DB82','#C3DA7F','#C1D97C','#C0D878','#BED775','#BCD671','#BBD56E',
'#B9D46A','#B7D367','#B6D263','#B4D160','#B3D05D','#B1CF59','#AFCE56','#AECD52','#ABCB4B','#A9CA48','#A7C944','#A6C841','#A4C73E','#A3C63A','#A1C537','#9FC433','#9EC330','#9CC22C',
'#9AC129','#99C025','#97BF22','#96BE1F','#94BD1B','#92BC18','#91BB14','#8FBA11','#8EB90D','#8CB80A','#8AB706','#89B603','#87B500','#85B400','#82B200','#81B100','#7FB000','#7DAF00',
'#7CAE00','#7AAD00','#79AC00','#77AB00','#75AA00','#74A900','#72A800','#70A700','#6FA600','#6DA500','#6CA400','#6AA300','#68A200','#67A100','#65A000','#649F00','#629E00','#609D00',
'#5F9C00','#5D9B00','#5B9A00','#589800','#579700','#559600','#539500','#529400','#509300','#4F9200','#4D9100','#4B9000','#4A8F00','#488E00','#478D00','#458C00','#438B00','#428A00',
'#408900','#3E8800','#3D8700','#3B8600','#3A8500','#388400','#368300','#358200','#338100','#328000','#2E7E00','#2D7D00','#2B7C00','#297B00','#287A00','#267900','#257800','#237700',
'#217600','#207500','#1E7400','#1D7300','#1B7200','#197100','#187000','#166F00','#146E00','#136D00','#116C00','#106B00','#0E6A00','#0C6900','#0B6800','#096700','#066500','#046400',
'#036300','#016200','#006100','#006000','#005F00','#005E00','#005D00','#005C00','#005B00','#005A00','#005900','#005800','#005700','#005600','#005500','#005400','#005300','#005200',
'#005100','#005000','#004F00','#004E00','#004D00','#004B00','#004A00','#004900','#004800','#004700','#004600','#004500','#004400','#004300','#004200','#004100','#004000','#003F00',
'#003E00','#003D00','#003C00','#003B00','#003A00','#003900','#003800','#003700','#003600','#003500','#003400','#003200','#003100','#003000','#002F00','#002E00','#002D00','#002C00',
'#002B00','#002A00','#002900','#002800','#002700','#002600','#002500','#002400','#002300','#002200','#002100','#002000','#001F00','#001E00','#001D00','#001C00','#001B00','#001A00',
'#001800','#001700','#001600','#001500','#001400','#001300','#001200','#001100','#001000','#000F00','#000E00','#000D00','#000C00','#000B00','#000A00','#000900','#000800','#000700',
'#000600','#000500','#000400','#000300','#000200','#000100'];


var calculate_LAI_GREEN = function(image_orig){
  //Create a list of band names for flattening operation 
  var im_norm_ell2D_hypell = image_orig.subtract(mx_GREEN).divide(sx_GREEN).multiply(hyp_ell_GREEN).toArray().toArray(1); 
  var im_norm_ell2D = image_orig.subtract(mx_GREEN).divide(sx_GREEN).toArray().toArray(1); 
  
  var PtTDX  = ee.Image(X_train_GREEN).matrixMultiply(im_norm_ell2D_hypell).arrayProject([0]).arrayFlatten([sequence_GREEN]);
  var PtTPt  = im_norm_ell2D_hypell.matrixTranspose().matrixMultiply(im_norm_ell2D).arrayProject([0]).multiply(-0.5); //OK
  var arg1   = PtTPt.exp().multiply(hyp_sig_GREEN)
  var k_star = PtTDX.subtract(XDX_pre_calc_GREEN.multiply(0.5)).exp().toArray()
  var mean_pred = k_star.arrayDotProduct(alpha_coefficients_GREEN.toArray()).multiply(arg1);
  mean_pred = mean_pred.toArray(1).arrayProject([0]).arrayFlatten([['LAI']]);
  // mean_pred = mean_pred.add(mean_model_Green);
  // mean_pred = mean_pred.where(mean_pred.lt(0),ee.Image(0.00001))      
  mean_pred = mean_pred.updateMask(mean_pred.gt(0));
  image_orig= image_orig.addBands(mean_pred)
  return image_orig
};


/////////////////////////////////////////////////////////////////////////////////////////CCC////////////////////////////////////////////////////////////////////////////////////////////////////////////

var X_train_CCC =  ee.Array([[-1.12062031319024,-1.07186135092314,-1.05315534093011,-1.11533195470063,-1.02538028081123,-0.897204595624165,-0.911838275950108,-0.923814349493063,-1.14851028238254,-0.964783163601949],[-1.02409187674752,-1.35916432708554,-0.867298865211084,-1.46908846076441,-0.629112514148714,0.0913437893547907,0.139943843553403,0.146603510866568,0.186810343955306,-0.112402689230619],[0.765630468910257,1.42606734117554,0.352166550102468,1.25914909621589,0.165257237223954,-0.30310599138482,-0.337247345049064,-0.339964666192668,0.150977867538996,-0.505852666726181],[0.783421966060976,0.77851935844026,0.61724484240096,0.449284571605902,-1.52015477624626,-1.73057402261475,-1.7538969659415,-1.76654221512426,-1.24465452628829,-0.720476818023735],[-0.578473801246587,-0.639287551166136,-0.493534562683587,-0.703199450695657,-1.32277593082032,-1.32879159395757,-1.33445908414621,-1.34157308814639,-0.649415059213124,-0.439991303312332],[0.569284013410874,1.19132883149075,0.214420733953056,1.11312230681432,0.377226365257372,-0.0711894337912855,-0.108991922556471,-0.115660885247525,-0.597464150809514,-0.749922608868633],[-1.05629843797232,-0.876119615344546,-1.01796742342779,-0.863597596937046,-1.0113921846051,-1.04637396085506,-1.06143082943883,-1.06488831699784,-0.503107111536106,-0.777126306431089],[-1.10394405363773,-1.13651418467465,-1.07191629734612,-1.11744662098384,-0.457084697209717,-0.308629996877783,-0.323065717221995,-0.331519112062454,-0.867388406105437,-0.976356918082196],[-0.539327368434371,-0.730437575548862,-0.44015111073644,-0.786165937116828,-1.41588651625984,-1.40628519648856,-1.41657180249193,-1.43081627749581,-1.14364683155007,-0.611655753259127],[-1.28777108060578,-1.63926090722977,-1.17499654497564,-1.78287123360235,-0.46314004298126,0.614952176387924,0.656659576827407,0.641649371226707,-1.32209957677511,-1.13512714508162],[-1.1172256649278,-1.05288129624376,-1.07461005002508,-0.985445960666939,1.19290749822636,2.06839732483243,2.13679356749427,2.15547187589819,2.67156780743076,1.55847347128448],[0.635465550607112,1.08406856527065,0.288559492890577,0.819778317373862,-0.654334468032301,-1.01314185765969,-1.05269738211982,-1.0647838971931,-1.15927245706491,-1.0376096186985],[-1.06942427801832,-1.2730058323952,-0.961632937788279,-1.35440575094433,-1.26217370619648,-1.03078873135639,-1.03325988597838,-1.04070991121053,-0.932239215818776,-0.836746492382954],[-0.724504317682864,-0.263915237695313,-0.793278067526857,-0.121509667551108,1.90594083977243,2.19152592208613,2.19516550512369,2.1965136785362,0.0866947449917329,-0.249437838574551],[-0.440198271686981,-0.0491912341355878,-0.49921868430497,0.00934426448984902,-0.518731407110684,-0.745133716384068,-0.770445722886268,-0.782730743237075,-1.10743392549956,-0.884050186089507],[1.94510451939925,0.832738229815912,2.08341324813577,0.68963720588044,-0.578255179456519,-0.691796779224816,-0.668882940278563,-0.672584315437443,1.00954494674887,1.67461359909606],[-0.971883042984667,-0.726413029759146,-0.982407467434791,-0.664456704723283,-0.191388508152434,-0.214872023220559,-0.235649451501431,-0.242923325502409,-0.786494714672428,-0.894781824631158],[-1.15235967488462,-1.31676563186824,-1.09191070753102,-1.34695936380538,-0.493905411408809,-0.139683659158385,-0.145305013188506,-0.156533608124793,-1.13071691100549,-1.05184452799396],[-0.249928265127809,-0.0767236394199891,-0.245625128105194,0.0100422616987461,-0.33761547646424,-0.530621038695352,-0.535346061035541,-0.527994613430028,0.434606517319454,0.00803934732245204],[-0.0947676580393161,-0.3739435048769,0.0664532704020254,-0.296237821319268,-0.00457291475796937,0.0418555215780561,0.0530550399076582,0.0632580324117257,-0.226866095015772,0.0952587787838481],[0.751808626043888,0.884280379847087,0.725648697855488,0.937814222429228,0.077481654515848,-0.221169845846496,-0.218564388335132,-0.214168922579733,0.478705777672977,0.559368031997291],[-1.10625167214454,-1.41184090874491,-0.9558815813673,-1.53694294353096,-1.07881959281334,-0.520901687339192,-0.492718188059959,-0.488124722292888,-0.502882134668245,-0.580543096365828],[-0.962075792807738,-0.759558826207046,-0.958044753139324,-0.561117099694215,1.52669636346629,1.76157903176814,1.78104433730572,1.79859389955402,2.14626244436851,1.02191600847171],[-1.02770036786517,-0.955714143929966,-0.963554624942563,-0.966773495094653,-1.31592769819962,-1.32832161914427,-1.35561382444046,-1.37274862488779,-1.67219226325393,-1.12613554357137],[-1.18201879383974,-1.20412956097944,-1.1190667140466,-1.22178238037531,-1.08261855924057,-0.994374490349332,-1.01187732356255,-1.02220913149859,-1.04067315591845,-1.04241063657045],[-0.110486278466352,-0.519742544382355,0.104581408852633,-0.565062058211489,-0.874663845468548,-0.779421061153424,-0.762305570654447,-0.746909930836006,0.0921323555390562,0.319356686856414],[1.82466639611069,0.875743140750568,2.00287316671659,0.792473727600786,-0.39032595367599,-0.545676645810714,-0.519161114692837,-0.511433230783794,1.94379576200833,2.44927964459705],[0.753993991532534,1.14966136537933,0.420805315546155,0.905330046065391,-0.568814779425637,-0.929151273670036,-0.966634483538282,-0.980833587100043,-1.2020995267966,-0.968893002474251],[-0.637125329096077,-0.419008007571422,-0.625784835028086,-0.373074207066771,-0.329503186167849,-0.41431708421606,-0.417003441046133,-0.41358946405558,0.635468230774087,0.126722111336683],[0.171433178483664,-0.226031296445069,0.355024674290164,-0.240366837578791,-0.713473928025298,-0.728790282203639,-0.717511991066066,-0.707461333449525,-0.0176967536092251,0.36482853914103],[-0.92264208538815,-0.65318800200761,-0.954183669068849,-0.514451539277856,0.83308195632453,0.909179628031482,0.900464756840379,0.899602835863616,-0.105995710417994,-0.559488866943226],[-1.3018881636545,-1.57494968515533,-1.16772982474419,-1.70506170867612,-1.01153047882298,-0.350603471472844,-0.335323026148266,-0.345962379131021,-1.41162887582999,-1.10778677084109],[-0.277293869497416,-0.75913143000697,-0.103811673325597,-0.861897594047865,-0.960645727908644,-0.679103856392335,-0.658002538780583,-0.660017391937108,-0.4417910946251,-0.0627705167502191],[2.49621632880949,1.22463917547568,2.59469496428037,1.04490582251469,-0.778519278985956,-0.984669150167332,-0.963362383329813,-0.971768341590166,1.14395367147633,1.93367094865537],[-0.537881687951471,-0.394631617941583,-0.539759800063624,-0.217657742842384,0.65781029080129,0.580976280004214,0.56843456252465,0.559284234092511,-0.426175289529093,-0.499427436830564],[0.0337018204621751,-0.0653603955919662,0.135136176759807,0.033907836907569,0.177676057989329,0.0841544557329243,0.098506949619679,0.118726635918333,1.51462649636802,1.09190739694936],[-1.26221426131623,-1.57585114769411,-1.10529417038918,-1.7404968996927,-0.750322301067965,0.492202681475106,0.557963123679235,0.545618091339981,-1.15170091414297,-0.910269196794131],[1.36733070285893,0.806130374097175,1.5600458209068,0.781874780415314,-0.634532677003762,-0.83815230036483,-0.820686685006806,-0.808182267412931,0.766325981327274,1.31222677954384],[-1.22109150939533,-1.30716738170503,-1.14552456437049,-1.32395237197404,-0.862019386768743,-0.678135484098149,-0.704262798086844,-0.723809458725311,-1.71412455891492,-1.24560946685868],[1.95894166530573,0.899445007591787,2.35556939361946,0.858959782158237,-0.129436580486398,-0.225438450134594,-0.188975441687162,-0.1562074970423,1.57740263100675,2.39693092411032],[-1.27113199373651,-1.51009982938766,-1.16750315759056,-1.58943849702818,-0.704675989553958,-0.186097074685575,-0.190840710370809,-0.209984901326769,-1.59179003914535,-1.20896100838499],[-1.04579666959831,-0.942643223320389,-1.01194730579599,-0.848734079248556,0.610923698512215,0.890451492008776,0.877631075236864,0.861889213694336,-1.04388354011221,-0.957015726263745],[-1.138096327891,-1.13006408912875,-1.09639101031173,-1.08813281867875,0.825593688358631,1.68299435908923,1.73619769231949,1.74168751565908,0.484438223976693,-0.124170129742954],[-1.038866619365,-1.07574844304208,-0.969172179217689,-0.961341261600597,1.37351246813096,2.03094065246776,2.04861323984233,2.05028338075049,-0.671049218715755,-0.753482603771243],[-0.548641209769656,-0.64172615177057,-0.488873602532685,-0.561545416163311,0.367992193446132,0.516179003019427,0.530362732992611,0.532657183884074,0.780466938067302,0.371268346192204],[1.20833554220583,2.18489891478862,0.666980439370723,2.15126130535234,1.65462288218855,0.991329143736322,0.948564350613294,0.948727534617697,0.127005332396899,-0.519699126515539],[-0.496912251936118,-0.902305112032708,-0.40268944669241,-0.893657117199112,0.322184296056499,0.723143260708481,0.758337267965784,0.764120548902607,2.06087345621368,1.53653092267806],[-0.280786845502628,0.530524850327112,-0.4749434063968,0.837369979518362,2.59433015169278,2.27900448780346,2.2394044914564,2.2333851148188,-0.291959402116939,-0.599186834669845],[-0.463311572337434,0.131822657350636,-0.584910882538146,0.307623125404235,1.11111641583081,0.862582065643884,0.814008456136468,0.794393055140335,-1.2830333926703,-1.03521741240329],[1.83251617047458,2.54414526434757,1.19514783503249,2.35542132801756,1.43307214844915,0.774498617522043,0.717094681165523,0.706527002369562,-0.977058491425989,-0.949021392330361],[0.403984913848221,-0.318797183747083,0.645988764904869,-0.420507070301628,-0.481108101205034,-0.136323379275209,-0.0838788227733465,-0.0648887632663705,1.66572122865319,1.87570862894283],[0.90444091966284,1.61787451312868,0.451629912589494,1.52165638035002,0.821770459787913,0.287657152765579,0.250923140856884,0.249603607875719,0.137545543294463,-0.420664086549534],[-0.587031398316309,0.00989903807193138,-0.687183155653402,0.364786600250605,2.15787845250097,1.92423995675872,1.87745738239474,1.85583322198022,-0.919414195202666,-0.911914228798666],[1.51036342225941,2.07179431081549,0.944747108621044,1.8218297679659,0.678770356559909,0.118565499154163,0.072135840818471,0.0643869711468074,-0.687156937518871,-0.816059607280372],[-0.554518833390274,-1.05448006331505,-0.315110758344314,-1.19462680416434,-0.777872935483456,-0.043299190824782,0.00481619933889419,0.0154036407437577,-0.74410833623597,-0.221000216483718],[0.726013638917453,0.0268657513659518,1.02958914928899,-0.0243562058181051,-0.664422667294292,-0.642366958060298,-0.616327848026442,-0.59283971378756,0.580709128966281,1.11713043934533],[-0.0140924288353158,0.0358354238320485,0.0423630105591881,0.147511823768441,-0.26419192211457,-0.449477525295304,-0.443454347438085,-0.433172193590472,1.2037506481466,0.752279446714718],[1.39499540172137,1.24662199374359,1.45249025414816,1.22215238350005,-0.131605616114156,-0.437833839247885,-0.427376329866979,-0.410010676055468,0.970782414458268,1.14306662154269],[0.50432123773715,0.796564331290472,0.368795215587565,0.776472323627822,-0.163655907660789,-0.484348935867561,-0.504443247055967,-0.510482608946036,-0.672919785312526,-0.401543421743076],[0.740843198395016,1.4191484072623,0.507039930858793,1.58996362509149,1.61064580614646,1.1269120735425,1.10942671784283,1.12480543035878,0.358601162553008,0.0952229063053921],[-0.101092267473195,0.802688613554563,-0.321760373467761,1.12790403608172,2.26339694074129,1.81173423143496,1.7861621557881,1.79542435686555,0.67877426911533,-0.0281060408372091],[2.67027584782417,2.03038847223512,2.7820503622093,1.87921923371187,-0.0513935140167592,-0.388213466114771,-0.371160124151512,-0.354960554997085,0.952697666790555,1.61649815587124],[0.0982184097351813,0.87260941075501,-0.193202275002299,0.879379061162774,0.258693663250502,-0.174152348553316,-0.227244770256292,-0.244213311705569,-1.5057781239685,-1.19828569787377],[-0.755119305635689,-0.827881772185209,-0.726367828241398,-0.78425138590524,-0.21389504293693,-0.140341383705449,-0.141908428738477,-0.146634610635539,0.0365342774948512,-0.349419379588723],[-0.92876752689706,-0.553224915337815,-0.936398840911425,-0.477032751498662,0.0406551174023186,-0.00999462984303573,-0.0558315655785554,-0.0816794678683965,-1.68000022159976,-1.20589668430549],[0.402134844820416,-0.274322487808665,0.666249444474792,-0.272836190603989,0.0903274890065976,0.292577076492553,0.328908927303292,0.357779714282854,0.723358301053172,0.937843341242371],[-0.796687159040283,-0.440187320983192,-0.85857569505048,-0.402689287228239,-0.468419970646952,-0.624778530975809,-0.64952444375196,-0.655336171767733,-0.350310768496398,-0.721301631512476],[-1.17032926972971,-1.39529899674547,-1.0636401874314,-1.4386907993433,0.765899110522646,2.28408053604252,2.35100860389541,2.33133812072736,-0.9888250271256,-0.881840923096536],[-0.602588765813266,-0.235124455884687,-0.644511083870512,-0.0337422398209038,1.69343066593925,1.73777084431376,1.74871394442773,1.76029392001966,2.41433131007859,1.73467883194496],[-0.0412234627244842,0.592432884625133,-0.177326496882625,0.755253624571069,0.621239476680116,0.259275718064901,0.228486053279368,0.223236402335229,-0.983977422878069,-0.789636294571678],[0.0153011709537823,-0.634183677329727,0.186283215055292,-0.748604897298413,-0.659665831442185,-0.29995908166816,-0.268166171753808,-0.270354408207336,-0.106764158191849,0.212659893929989],[0.84306499386722,0.756583859037355,0.783297799589802,0.725107114716463,-0.363537150565998,-0.63523887328548,-0.636051019542746,-0.642286507477798,0.466161085376344,0.520842764745712],[0.465964510315506,1.05291138228511,0.16133327531293,0.899574169677717,-0.295381392810276,-0.678979357101929,-0.705324106043742,-0.708030421385352,0.141186686768954,-0.427186222840133],[-1.28264467637188,-1.52860116216258,-1.13455843951551,-1.66738994892042,-0.23071113458793,1.55291541881294,1.71351961601793,1.73350260942608,2.56580368210624,1.82312413880971],[-0.0229895478321775,-0.55920846213888,0.13071692371109,-0.615276247880457,-0.645896094527442,-0.490743235435581,-0.466464780705099,-0.460044228725412,0.912187769521301,0.727213330567258],[0.0553180498234005,0.805778077515113,-0.17365336767217,1.04758702639834,1.77277175708545,1.33586751923952,1.29044076965096,1.27497757577339,-0.732019623841163,-0.755606875609428],[1.13945518826484,1.26112171511417,0.980022284523104,1.05588419515761,-0.656153643550973,-0.966139572498457,-0.973824645452293,-0.971043828791131,0.197716142263144,0.0322824245914129],[0.730124903423685,0.216355977990185,0.9361387404346,0.280093324907276,0.00777214909120382,-0.0637763217020978,-0.0400192739846273,-0.0216135816508399,1.01614337544078,1.24096882638516],[0.992383608294148,1.51831775813196,0.549235618945808,1.21206445140976,-0.307750233560067,-0.737607714263065,-0.774143942229311,-0.780271656835473,-0.401603039264037,-0.810826154919892],[1.22799766470689,0.441911575033338,1.30028134711769,0.348248955500911,-0.902026448272014,-1.04421543939567,-1.03369717677566,-1.0447959384929,0.319824346016832,0.848948804470738],[-0.0606717994712151,0.528013592368665,-0.267902762669199,0.487247141860433,-0.275102608040778,-0.607348630318976,-0.653017982274743,-0.669304328724738,-1.53160314720906,-1.15123591603438],[-0.453477427638527,-0.551864726931073,-0.368972195875348,-0.440455513260447,-0.181214420902499,-0.215538554791381,-0.205486361188056,-0.19745532798736,1.21480910932906,0.643020116599361],[-1.2444270467327,-1.54988938528461,-1.14071051267226,-1.64647922422828,-0.285327645792037,0.545756191354968,0.591298567212648,0.592518648253122,0.332405418501422,-0.347795357701871],[-0.948749585717955,-0.665068089954725,-0.978811495830225,-0.468319879111075,1.48825008565356,1.69000755223593,1.6775444681827,1.67028525317857,-0.556995990320311,-0.821752493556626],[0.0548146483249707,-0.244193497967302,0.128077012268077,-0.236634476944629,-0.931331478283066,-1.02265304299974,-1.02341046935282,-1.03492143949629,-0.495424642519589,-0.11559939606519],[-0.91799338724952,-0.629801950429947,-0.952538975049893,-0.502402635520772,1.00493071864459,1.18647197362574,1.16962442434848,1.15865351167955,-0.777424999899769,-0.867491171166861],[-0.926350274670084,-0.782426049326117,-0.916442564560584,-0.630990027072109,1.56810019657012,2.00349596483959,2.02917374876112,2.03813694777154,1.24968945150103,0.476603886305414],[-0.634910499545136,-0.914909789180452,-0.453946214316685,-0.955026259281802,-0.583084801739087,-0.252969606723303,-0.220160739137971,-0.202115262581154,0.561053560667608,0.342721205297887],[1.23963642612045,2.11829898606277,0.695926911714314,2.11913158882298,2.01869915162934,1.35649757207483,1.32517227203444,1.33435228320651,1.82160475426855,0.677537680135938],[1.07714783265497,1.17464145214178,0.971393625755181,1.07456082166706,-0.342430541460716,-0.660330884612313,-0.670958475613821,-0.671197941722216,-0.447568625578924,-0.0511068909370198],[0.100340507431148,0.985587627566122,-0.196221566922711,1.17226612769115,1.68944876295012,1.195215746941,1.16620190568146,1.1708513513316,0.938590635133775,0.025981037139087],[-0.268516776583778,-0.70503558768034,-0.0189292294822534,-0.772756146849253,-1.25655289541479,-1.11884735968401,-1.09551158246979,-1.07762231218576,0.178727023297242,0.332704544546807],[0.0862090635071018,0.295770771209322,0.117692862227065,0.374960091611281,-0.0143131948823534,-0.224996897988878,-0.219449343616486,-0.200583102753926,0.732171234192425,0.521592537572806],[-0.195982536312868,0.505520646207661,-0.405612180363238,0.654850210856103,1.43520721707603,1.1054853853763,1.05647862245629,1.04060330789045,-0.963846791818243,-0.932425015524234],[0.358761461086835,0.748469742178911,0.178078344660198,0.748788828514447,-0.0466133865069048,-0.391299126984382,-0.406762218250015,-0.409438776817206,0.447903364422329,0.0106012507220127],[0.881770950368309,0.655210364907309,0.895282942675458,0.698749398206276,-0.0966671590068031,-0.334682774432829,-0.322517108785628,-0.325782448635948,1.95928747272087,2.26778721299522],[1.61526028050367,0.828482584795154,1.71687279308697,0.726454998298323,-0.934899226482864,-1.1186988412379,-1.09805872156635,-1.10386541880446,1.30112612706381,1.7233408471111],[-0.580467878733901,0.0776002752204834,-0.707780498687083,0.352538361597613,1.88525348050661,1.65306689139966,1.63387842855153,1.63659219510638,0.677493150840009,-0.0826526161082164],[2.36115854893676,1.58051672712903,2.53407916594869,1.46075924457663,-0.476041195159161,-0.743256219046435,-0.719848464523058,-0.710074238255801,1.17733148956651,1.87477746559746],[-0.675412736030074,-0.122879528839706,-0.76771887637744,0.0513476248456629,1.19723295316726,1.05990063072094,1.02765214178788,1.01746428077492,-0.83290925036202,-0.887107902914795],[-0.980600522562965,-1.12119523637342,-0.911840073322103,-1.13094938219112,-0.279511524755278,0.0483495006422534,0.0537257386578637,0.0473524864621793,-0.635306242025648,-0.702439299254051],[-0.742207651050283,-0.388954422631072,-0.764800948370647,-0.27099211526558,0.101055723613782,-0.0317988190730709,-0.0563654114606344,-0.0627296829960756,-1.06768120484164,-0.921647902595141],[-0.219642064133691,-0.760978086874299,-0.0541972858820403,-0.850358275063819,-0.384591353441348,0.112014274435534,0.150053400324792,0.147932052074555,-0.111028451879702,0.115032373401356],[-1.1291563832222,-1.37602571774454,-1.0235986382479,-1.40587888416333,0.868496921929972,2.23697016468061,2.33452401759946,2.34920756223526,1.07376981635713,0.398146973185754],[-1.05135367168834,-0.847129254772635,-1.04147597543799,-0.707173405743778,0.82675438930306,1.0015581015127,1.00815998429678,1.01384051193585,1.03735213225477,0.0969052368144697],[0.678547491367918,-0.0736689777214453,0.878136689375077,-0.174711410102271,-0.907054777509742,-0.872457659500965,-0.853332677356188,-0.849079087168215,0.21942618682041,0.745215990921481],[-1.16832228743992,-1.27828119895689,-1.09713860254733,-1.30274914640236,-0.514940689812239,-0.180489802786167,-0.169970049499602,-0.169006553800862,0.308896674957952,-0.341807569230818],[0.337350452345546,0.967952344501983,0.0398453765677222,0.86243468480551,-0.166654708595811,-0.557855959030362,-0.597613717045099,-0.6078203412359,-1.16097306345843,-1.04340483026886],[-0.87134629495106,-1.21181185503431,-0.715690354706718,-1.31683248837301,-0.477418314423496,0.321066997713167,0.361052992806893,0.35445193542875,-0.846789966002915,-0.566095233841365],[0.483472330215296,0.149720941719322,0.650299445543916,0.201181151633164,-0.269535901839068,-0.377802763393558,-0.364125168551498,-0.351545224152853,0.322139286565896,0.658433747368901],[-0.0196572537480846,0.325707280119151,-0.0887983339125788,0.329703918629206,-0.544797198344757,-0.79524848380545,-0.812678198799712,-0.820087329997075,-0.792908564128506,-0.587701874080616],[0.817150094859353,0.0121617956683342,1.02114399569216,-0.0602461092488998,-0.510026635270335,-0.458448279631982,-0.429044498501488,-0.417116845382589,1.35719268372472,1.45711204404956],[1.09105806770822,0.961404634716817,1.11854323648254,0.855941022247329,-0.779542170955378,-1.02245568560369,-1.01517057013257,-1.00878194945306,0.545081095814813,0.674541123985049],[1.12399569170349,1.08222954047833,1.14646325458585,1.01481106431603,-0.405095290902407,-0.678650694988028,-0.668731324856149,-0.650732463222646,0.896930856095454,0.929103639318027],[0.284881809506261,0.541709808883103,0.259831589266783,0.532920708851554,-0.460170356618423,-0.715558529644835,-0.718819873578365,-0.705208275354965,0.280150969879269,0.120955008324966],[-1.09615394971006,-0.975970434191072,-1.06996866850543,-0.950953351946802,-0.737820989014734,-0.72572343633933,-0.74383761524055,-0.750587516035986,-0.649546295719377,-0.885618117616936],[0.611334255184199,0.526584257362411,0.724201837005957,0.469783688592231,-1.01885473469891,-1.20430111057538,-1.19591331013217,-1.18318430894272,0.487004701162741,0.573453874032458],[1.6968181753568,1.4612554808938,1.65854057510951,1.32412265011501,-0.433113699444332,-0.738745821924236,-0.728386008756786,-0.725920746854206,1.27268306943832,1.37426943523343],[1.45934034570124,1.10225854754589,1.41928970120859,0.907612580157228,-1.03312063244796,-1.27530854026778,-1.27126577608402,-1.28053248321306,0.366820629926742,0.588737831496484],[0.484446471499689,-0.255380135579793,0.625159949053522,-0.398330965609795,-1.40795570679673,-1.37428767789645,-1.35641279781779,-1.36355084654882,0.562085374219317,0.723393608779995],[0.276511274971573,-0.0730133824788286,0.343505319611644,-0.13476043200153,-1.26787603778028,-1.374340520039,-1.37530148602889,-1.38808488209419,-0.45669447297288,0.0133524036280571],[0.137121821134362,-0.275122481910308,0.320792505471171,-0.187139869346085,0.108035457052188,0.132962581083936,0.150397726928854,0.167936878589373,0.23779215557295,0.432984980628822],[-0.395489869006793,0.329293592162289,-0.570334769558499,0.557566719836793,1.61951070813383,1.29817666010672,1.26644244221053,1.26359180091051,-0.205205375744019,-0.613652063023101],[-0.196568848312174,0.553789246629254,-0.411218521422283,0.714546396141165,1.32007170040024,0.945519009336597,0.908874225940962,0.903457533117018,-0.473950734397042,-0.729840232069079],[0.29809038875045,1.10234280565391,-0.0252383544094711,1.09416247651929,0.399531524250923,-0.0614933009523063,-0.0948071028257724,-0.0980613287734061,-0.0386042021180503,-0.64021702765644],[-1.22931649374632,-1.25008610060012,-1.15478430026962,-1.23553531792945,0.292637857717748,0.948864077087825,0.967169557883271,0.957985555151707,-0.789607564251853,-0.868827072405195],[-0.376098975761357,-0.899935734348536,-0.146965112455954,-1.02373802513297,-1.16877537173521,-0.839706339738965,-0.808249033525452,-0.794708498069902,-0.021410880650969,0.142559366922478],[1.48989206586138,0.549342799733462,1.91265874963307,0.488509206113331,-0.349497133372807,-0.320116757774595,-0.276332258202621,-0.238670226532465,1.29796886240829,2.08435716052527],[2.5386404672493,1.52019799612929,3.03118808891743,1.54067732440961,0.168533111837601,-0.0747194490414453,-0.035227029672481,0.0120798780359897,2.5668892847702,3.48735590506435],[1.81232849132748,2.72159772435516,1.1456849149998,2.69409248643041,2.59999730316853,1.83480943432107,1.76962610004612,1.75831315664669,-0.522612695256205,-0.726939885144862],[-0.242772266649336,0.56286775248487,-0.425365417408616,0.824767020972323,2.03315793341912,1.67213850134895,1.65183089152922,1.65760427112229,0.896929516947431,0.204461574887221],[-0.0251843920695463,0.38698765256906,-0.133531056634755,0.492375496912389,0.635527452979746,0.366074091673811,0.342402300910192,0.333777215705068,-0.608921678102821,-0.489344101437547],[0.0983013202360569,0.500025246923683,0.00231216152584331,0.599267892131229,0.386987025582285,0.0930831765471183,0.0843500590457406,0.0817106183676358,0.383827586627291,0.193646719801025],[0.69659548574311,1.24797775554683,0.323640484368128,1.06908606859638,-0.067750565912981,-0.489260052570777,-0.524644805128783,-0.529802280895913,-0.553526704175435,-0.758084168127824],[0.628644049176938,0.0853289722913593,0.915932347069513,0.11118658228709,-0.216510987247723,-0.220455676283524,-0.193276132840323,-0.164994423611084,0.664437573572609,1.0999261000841],[0.303673714353497,1.20964062168301,-0.0175060409777811,1.44777217951884,2.77299803206136,2.29248643990086,2.23098025980153,2.21429235513691,-0.694947431142576,-0.765018901299605],[0.00897838874857292,-0.493007690935595,0.269625354581764,-0.539433805997485,-0.330098579169026,0.0114120423600762,0.0477093993037005,0.0685766150046417,-0.0194479128406128,0.44054190482711],[-0.850585722515194,-0.526814272437114,-0.90145881557889,-0.483640449740934,-0.539648286253896,-0.68364988192883,-0.713560813360364,-0.723168080155434,-0.918672195602265,-0.991998205994164],[2.70433630383681,1.33844074053794,2.86402537931171,1.13708046287499,-0.74985840888449,-0.944473493413727,-0.917454829374643,-0.919190560216294,1.49769341600007,2.33722112034125],[-1.17863939151652,-1.19116434460863,-1.10599762171069,-1.16360233656859,1.0258412896305,2.16395513389051,2.18783689438974,2.15813377768976,-1.14596166050347,-0.977278986550073],[1.17992579085344,0.713336553400656,1.38107719665604,0.749744803827378,-0.337327727442481,-0.551289522179787,-0.532416691479319,-0.512007941324492,1.32394029916603,1.52674825696313],[-0.468807876175099,-0.0831051226116251,-0.530572705336123,0.0461669980206115,0.09490235878255,-0.132776950935317,-0.158231025925215,-0.16771737082697,-0.935035356890765,-0.811910251640724],[-0.544683546673449,-0.910659181329195,-0.424626413072627,-1.01356323347943,-1.52974899826685,-1.41370311240889,-1.40873587857482,-1.4204004019731,-0.403179439678426,-0.302926619383664],[0.297556381171807,0.96215410448195,-0.0244049276745796,0.885870643252374,0.0777956066525727,-0.341549851048983,-0.389723038698394,-0.403389255591117,-1.25654002297061,-1.10809156015009],[-0.167747742105568,-0.00650427544548872,-0.126531695962121,0.102267093363561,-0.262010270172198,-0.4567785479912,-0.460252538265659,-0.448202621253379,-0.0723949241819854,-0.140940323284356],[-0.59425934392364,-0.766084555616208,-0.545105122370566,-0.721571158528715,-0.264484523565026,-0.204902872645062,-0.199410173640834,-0.202302415000417,0.736501146133404,0.164861147344956],[-0.0455710107380328,0.62465672641287,-0.270579517536478,0.752645497146319,1.6171728079874,1.30093686141653,1.24747535286653,1.22889550948355,-1.02942933433047,-0.903921637786054],[0.297010496606813,1.2236192249725,-0.0307960158717209,1.37179710776383,1.44140862095137,0.908758492168116,0.868095263142925,0.862815337039444,-0.364543010493326,-0.714090566174496],[1.75227890514229,0.95990325292255,1.97951657158304,0.940979915433663,-0.132574160882166,-0.329896157020019,-0.303022557366806,-0.283849864740581,2.13369007634607,2.57470377264566],[-1.05700865891577,-0.973738128573924,-1.04381001526458,-0.909206799431444,-0.130801568678989,-0.0481454558075937,-0.0667933606190938,-0.0755367720473099,-0.959775335445699,-1.00557692146331],[-1.22992467538876,-1.41106098700053,-1.14525529144544,-1.41201977726776,0.838133334598571,2.00569011471327,2.08846575261183,2.10168844739421,1.34822708771085,0.356109498750214],[-0.905410234118342,-0.658962124670638,-0.909679793847877,-0.653199159202665,-1.05417847464484,-1.16084004960363,-1.18291547956379,-1.18882257678399,-0.742332737553162,-0.889125761517418],[0.0760030777739643,1.07932324631781,-0.227057377182132,1.43068997211809,3.4924729727033,3.05082482829915,3.00185690542734,2.99508100309207,0.0741759428902117,-0.43272072515232],[1.3268144195536,1.16260902797764,1.48925892363964,1.19009366296101,0.0317504254996348,-0.243054899567405,-0.219144915807796,-0.182609241441281,2.07719543870047,2.17155947967362],[0.375383303485532,-0.138474910897482,0.616868576705805,-0.13776852951096,-0.377274376208469,-0.346016213052388,-0.325645174342803,-0.305818185199125,0.28082299899547,0.69988623421407],[-0.299065299093752,-0.310713137264144,-0.268852415278705,-0.331374595123771,-0.992178507934694,-1.09871130081771,-1.11092927497749,-1.1214818430932,-0.791593967152611,-0.481210809184348],[-0.884603010250509,-0.565810512298056,-0.90229740395293,-0.578391230321553,-0.891184909454744,-0.999139890841269,-1.02019303049401,-1.02690240010697,-0.495127351658487,-0.726222879228301],[-0.477081453388515,0.274101783865464,-0.645131014530977,0.638151069732815,3.36734048242503,3.2839491491054,3.24119381934659,3.22892272997085,-0.366341263096855,-0.691644155017325],[-0.973682178013311,-1.01896565239048,-0.890615101666124,-0.952701465671915,0.199436774483027,0.471056617111397,0.479728767737659,0.486508449565054,-0.50454379417343,-0.62756392987565],[-1.07568225070666,-1.36410762206392,-0.945491958208916,-1.47247455340914,-1.2021494058305,-0.821021037877267,-0.819048440468826,-0.836194486492694,-1.34420656712552,-0.954589168584579],[-1.16556471387326,-1.1963340832523,-1.10513593945116,-1.2111637987676,-0.973201387163286,-0.864908438862781,-0.877031763831325,-0.883989037580254,-0.599398550128713,-0.857896994411166],[-0.765104196699825,-0.54055933423156,-0.751605440372498,-0.553968739679477,-0.961597289176213,-1.05081109955236,-1.07306691412116,-1.08425578108912,-1.18192860970042,-0.908441633450456],[-1.31247150065833,-1.63789365915366,-1.19185683901752,-1.77407241185651,-0.389006578313154,0.773145538417309,0.818804291340198,0.801820917788978,-1.38523917850641,-1.14647026360939],[-0.434622597603987,-0.638563877814507,-0.298336588031502,-0.556811830024583,-0.219475821181863,-0.179642727228292,-0.164906094390972,-0.147570372731853,0.547389117432425,0.222338111156413],[1.09797983831163,1.75825310032667,0.604069491493623,1.59974780876896,0.699025849671659,0.159417679497047,0.109948727168544,0.0998182173532736,-0.860746678294115,-0.927933920655196],[0.10959827568664,0.765114381907874,-0.155227472831906,0.786220879280845,0.631926465643372,0.234699718266471,0.206946688597725,0.206761768449855,0.269833280744858,-0.259895743486428],[0.101945613615456,-0.0490900328210698,0.164016437732254,-0.0564651176616591,-0.686363408892665,-0.793545925985204,-0.794381808205916,-0.802609864371573,-0.401216695059407,-0.032704563004804],[0.157924248526937,0.824786828796496,-0.0526477262122133,0.901260909579694,0.421933731818424,0.0231558082229347,-0.00361321915937531,-0.00798760036167183,-0.456464585895602,-0.628218824433754],[2.22750271026066,1.20274031003278,2.33987017915617,1.04482286383003,-0.84530325514891,-1.06361771305518,-1.04357851243752,-1.04751888570878,1.07806379449282,1.77745074150479],[0.0906701281017391,0.621388671897288,-0.0639146055413601,0.72986462624387,0.247892642212856,-0.111624881782682,-0.137896205875856,-0.146189621621497,-0.760292721263402,-0.67591876325569],[-0.849333385665879,-1.03319725896626,-0.708961179145364,-1.08034965568826,-0.618208136379813,-0.266993591101121,-0.241682149361697,-0.229768438178468,0.235703307848434,-0.00896762992833464],[0.362265400464063,0.532295797010428,0.381970744482459,0.545039698393957,-0.384288561890627,-0.620564770426571,-0.630001963176378,-0.623837134438956,-0.686145322783176,-0.185253608596928],[-1.13403993734574,-1.17532465983006,-1.05718306585068,-1.21689744014732,-1.36327915315791,-1.28925646398586,-1.31433213682074,-1.33238414532936,-1.64062123483592,-1.16279461801705],[-0.069073396893284,0.629240855941686,-0.307584020540771,0.738357879166884,1.17092696671266,0.800072613240029,0.751810224030858,0.738282671449217,-0.988835517118446,-0.947552268566029],[-0.410102330878068,-0.0542857968404947,-0.493902195982235,-0.0913116660991249,-0.717597036689518,-0.919147695638029,-0.944012265550239,-0.95488647046631,-0.862715672270574,-0.772248536666184],[1.15896428036483,0.418875988339737,1.40283581950431,0.387865758335843,-0.375101458637752,-0.4643401785265,-0.441037677402396,-0.422978009345514,1.08465686659264,1.48584095573577],[-0.968170628236436,-1.04132480827671,-0.911499761113429,-1.00049151935626,0.126291264297721,0.42241142169992,0.431842632519984,0.435947978495812,-0.25992787417253,-0.549014356749801],[-1.25564994232128,-1.49029787655138,-1.14317190259577,-1.60205127278534,-0.82147443354436,-0.130463906240894,-0.10772872669499,-0.118331622561041,-0.989099440874643,-0.923421181879103],[1.85819878303785,1.40330147201248,2.04389253504047,1.36180851804828,-0.266036815505339,-0.541113006226702,-0.517865600807104,-0.495475474931878,1.47750442040558,1.8849513061128],[-0.887366522310344,-1.06582163205007,-0.746318186505974,-1.12812995717613,-1.33234467759025,-1.18171029399599,-1.18311337758884,-1.18931575955406,-1.06606474158223,-0.707293935706878],[-0.972656246216319,-1.4100614141376,-0.864724230704541,-1.54802299907577,-1.12632195830412,-0.732234228812521,-0.717196391594673,-0.722248382644464,-0.227642800869102,-0.575088071240892],[1.4166325300105,1.23026340418568,1.44423875101317,1.16676692911464,-0.279676992573861,-0.582838282879474,-0.57554409737296,-0.562550741349855,0.876482735358512,1.03594709110514],[0.621026561257641,0.0229265321747505,0.884913743589221,0.0218611436483524,-0.295591988215745,-0.284839023151656,-0.261806702759444,-0.239579883677594,0.496828021485334,0.961466445747626],[-0.815460106390074,-0.41230979326723,-0.878359590452524,-0.24457536545941,1.02229028230971,0.978378415299271,0.96436028370112,0.96447926216257,-0.01085928699521,-0.501905426517269],[-1.19563353175661,-1.43446997296357,-1.10855743875313,-1.49328034446722,-0.55894736566938,-0.101143322552139,-0.0823662594407891,-0.0800364624022922,0.378576117655163,-0.370495918397221],[-0.689832882083891,-0.284355460963951,-0.737904269725375,-0.109815093599212,1.12388897864823,1.06177852837783,1.029815055485,1.01309270548806,-0.999042949732299,-0.877270034145561],[-0.266239021845534,-0.793819821454145,-0.0887525911104716,-0.924841780875594,-1.20612669901237,-0.927839027130002,-0.901283049634412,-0.900827935938313,0.0677634325821566,0.197627297330905],[2.12488691860661,1.0152574717754,2.37700906276587,0.931472174018881,-0.274267019819078,-0.427855081010106,-0.400107498169898,-0.386771245281544,1.47993854512869,2.18988359799733],[1.53846208793084,1.10571465638951,1.5747952937668,1.11006739876182,-0.0822219640173752,-0.369834008169054,-0.361103233790013,-0.363941461433903,0.755427325142225,1.15398909406426],[-1.11567103593548,-1.32031981287562,-0.982571660955973,-1.41399180142389,-1.29796109570445,-0.998073440327952,-0.996156400210027,-1.00707187434314,-1.12469621308983,-0.876653103570841]]);

var alpha_coefficients_CCC = ee.Image([[-0.000292302111996918,-0.0565925279685911,0.000573550812423363,-0.00396434298109329,0.0196115634873256,-0.00309900182428474,-0.0618250859939921,0.179228573569045,-0.0101100264345732,0.216353758345786,0.062846711788888,0.0382906845249622,0.0660253646036279,0.0754581838953293,-0.0993074002281681,0.00437020801060673,0.0091879248217051,-0.000699982181621941,-0.0261507330101638,0.0270633853173926,-0.0129995584360713,0.0796625419262488,-0.0636150487550681,-0.0360926021336674,0.0488971150549102,-7.36928081647185e-05,-0.00116193429685629,-0.00424852599009798,-0.0185253800237601,-0.00596726102643198,0.102213771937097,0.0281728023315368,-0.0509492124853831,-0.0101842671050687,0.0113493325846164,0.0242421149392658,-0.102362077723915,0.00253281031107495,-0.0658248031477141,-0.0268662271495272,-0.137345877785668,-0.104866419229831,0.0657199233490901,-0.119111772076013,0.0475854683737706,0.0189596088934711,-0.0271331164620752,-0.0129777132886959,-0.0275163764753477,-0.00829446117879376,0.040732158328571,-0.00704712429925062,-0.0419926964621284,-0.0122420050564141,0.0109221585604539,0.0251781748533671,-0.000753382623529199,0.00221097046625724,-0.00436647328835462,-0.0479672888284942,-0.000793382535784182,-0.0031142637993092,0.0125411972721263,-0.100231241668924,-0.0167882129666369,-0.0238731068055386,0.0679829354003596,0.0223053551624602,-0.00473351925745361,-0.0367745764488583,-0.0506446933636623,0.0248189068197559,0.00852364958747427,4.14185809435668e-05,-0.0287027414864981,-0.0172530510934056,-0.0137198144732189,-0.0306001188872678,-0.0194005068656292,0.0127582724417898,-0.00783596415976061,-0.0114367134532176,-0.00907377293458638,0.110912416287562,-0.0408093911782342,0.0957306441482131,-0.0330330855956469,0.015371486120923,0.0174225605565205,-0.0140329578989129,0.0385681840478994,-0.000715625061781761,0.0234611855526354,0.0461648411261211,0.0166276133010551,-0.00247409771402992,-0.0160388652118391,-0.00352497516197267,0.000813690800703859,-0.0333046028897875,-0.118979051824797,-0.00239148056576352,0.0323381288682386,-0.0498494128774098,-0.0420502142637135,0.0276212877551196,0.073995476600303,-0.0214603670308426,-0.096801511530316,0.0100314203185395,-0.0114059925986951,-0.0231866979649485,0.0079323062777612,0.00961693796230298,0.0234389245305418,0.0273373546822136,0.0141362366425905,-0.0025618468590777,-0.00729730982862427,-0.00785426784524383,0.0176946721430784,0.0161563976816675,-0.0207557901679784,0.00468937007381482,-0.0269059792493021,-0.0154430207438775,0.0199179001173329,-0.0064680827207518,0.00276514807159695,-0.00766489793223042,0.00587186695636718,-0.00517451060392783,-0.020109321441936,5.07806198957338e-05,0.011770954010332,0.0133149320746158,0.094460072184609,0.0847981628964408,0.00672761905840113,0.0035439110294413,-0.00527051876881565,-0.00932625313283371,-0.00559445984811609,0.0658557305883634,-0.0322032899419641,-0.066881502956501,0.0103996964147378,-0.0392982532882951,-6.11668516484272e-05,0.0714074951220939,0.0154566779038784,-0.000947568468607513,-0.00458169053623563,0.0102230852745619,0.017518491753763,0.000707408459323015,0.0499736983381182,0.00153055673964168,-0.0369397216496877,-0.0642419700548006,0.0043972195169018,-0.050449628667963,-0.0244111208512088,-0.0445818744254074,0.0288864780538796,0.0666334064269984,-0.0137641104045313,-0.0319271438515893,-0.0072850174968211,-0.0194832534051515,-0.0117856877286165,0.0119629301481488,0.0497817863810112,0.0740812486903965,-0.00228377560556239,-0.00310447189063573,0.0515456896866178,0.104709073498073,0.0125849490915418,-0.0165417399757996,-0.121110340507507,0.00320846622762871,0.0157071264605027,0.02416176457659,0.0310667973978115,-0.154234729243333,0.0422928999936204,-0.00861777134974782,-0.00292572870904519,0.0101213000683143]]);

var XDX_pre_calc_CCC =  ee.Image([[2.46811152059746],[1.38004355649535],[1.02737682730571],[5.4244319507861],[3.58431968962327],[0.830177367776541],[2.48459399111299],[1.02695009590274],[4.13446143717014],[2.32800292744393],[7.05685808460298],[2.10585408332392],[3.38751514145843],[8.13704378356401],[0.977984959974965],[1.35504275153162],[0.420406991122232],[1.24774304981081],[0.398471042559574],[0.0553123770811672],[0.527591928082785],[2.32942033442578],[5.67162493580732],[4.02007327936173],[2.92209676596167],[1.3630585281495],[1.43970135726632],[1.89435918674524],[0.349949852030144],[0.984443099222018],[1.61370427594352],[2.46449476221261],[1.53350945842171],[2.55525422193269],[0.737743556729587],[0.177029439283894],[2.32485652566163],[1.55063243713703],[2.20326370978829],[1.09670780426828],[1.84131034511735],[1.60120162051994],[4.52304975245313],[6.67841180647395],[0.604961355859132],[5.43183321120419],[1.40848194654296],[10.9552241309317],[1.79056971265596],[5.09538079455426],[0.66322363804306],[1.79442754575356],[7.4789289893322],[2.2052158854397],[1.14422520968223],[0.869748773775199],[0.336338192291693],[1.11912456566888],[0.638972640014753],[4.57388346632398],[8.00435230042981],[2.31391988771691],[0.670736745750238],[0.391886455981918],[0.301593014571257],[0.289360188134752],[0.79213572819677],[7.65944911021304],[5.96183329378786],[0.679835155245847],[0.677514352446539],[0.864651453660955],[1.08823032481275],[5.15244733059547],[0.792906018994345],[4.73504207697242],[1.9943004660894],[0.216309784750256],[1.65920509631437],[1.98689867260335],[0.835030114312343],[0.225700011337926],[1.80943561895242],[4.99238959625005],[1.87682920350516],[2.48947766902561],[6.7410967478729],[0.765879028732075],[7.35120185303926],[1.20280803443163],[4.31333536343202],[2.78160223014813],[0.142089233541267],[3.04628656368135],[0.472921716760255],[0.958963501809756],[2.65057003010227],[5.70151690797587],[2.27426993887846],[2.32277213925147],[0.763723248734818],[0.156604543796402],[0.486250176629217],[7.76198413506827],[1.94148545200675],[1.4998629165437],[1.09730316010096],[0.955664179784373],[1.19706164556317],[0.262395635143984],[1.06938573982153],[0.637169012656277],[2.04020545495875],[1.23563154056367],[0.861935785125331],[1.59234338260526],[2.49979797454493],[1.88202022139393],[3.13676095922541],[3.69199886595331],[3.36525466604063],[0.0840031717972601],[3.92254213943806],[2.51034598270023],[0.783043139737993],[1.95918986192171],[2.23184608808662],[0.791962732341919],[2.63784192844112],[12.2447297136343],[6.46833011863674],[0.565798386776089],[0.29317980143792],[1.00510820678186],[0.212602087134967],[12.2814627355489],[0.250720537998839],[1.04132599484355],[2.72471040199999],[6.81314161571466],[0.930817067419849],[0.116323338246728],[4.51317228076726],[0.738831202234449],[0.283051127801942],[0.371974668382476],[4.00196701103195],[3.34962837945576],[1.32756718021005],[0.568924130004307],[6.50229820249972],[2.72159601823471],[20.101057641709],[1.29497583002791],[0.277893919367058],[2.22387460117946],[2.00420566258924],[20.3595807150754],[0.81495837685707],[3.02971956011717],[2.40665759378345],[2.25638572760558],[2.53052587522344],[0.233133902405427],[1.82310346286584],[0.661622466156975],[1.0747351619892],[0.574215862987641],[2.73130675896416],[0.375798463794004],[0.924413330817796],[0.699526940009468],[4.26989291617295],[1.99474498300461],[1.47850809407357],[0.643660907873272],[0.776642922633701],[1.88005159283461],[1.69804606339484],[3.59497157655004],[2.73696826162295],[1.24680824158903],[0.238221976709717],[1.89416180322416],[1.36770369285892],[2.19484582837878],[2.4056043578364],[1.2474912461692],[0.935882816123658],[3.46526966202152]]);//.multiply(1.0e+2)

var mx_CCC       =  ee.Image([[0.0568947805728959,0.100961099927755,0.0622226217418517,0.143673563238822,0.304003088803668,0.346620698194755,0.350678919569442,0.350989065123232,0.167923265813213,0.0837188447776594]]).multiply(1.0e+04);
var sx_CCC       =  ee.Image([[0.0326202438547403,0.0488109760163356,0.0418601206135301,0.0572992501037164,0.0614173319092341,0.0744463862593246,0.0746947924360498,0.0742062661405183,0.0667640661290866,0.0587780493480953]]).multiply(1.0e+04);

var mean_model_CCC = 99.1965599006664;

var hyp_ell_CCC  = ee.Image([0.000381334558067897,0.104467703834737,0.00294709212044218,0.400576222888831,0.743828586509977,0.00279101524758481,0.00605162115197931,1.11304116113438,5.29994343534073e-05,0.114653566689708]);
var hyp_sign_CCC = ee.Array([0.499790665574379]);
var hyp_sig_CCC  = 2693.65108461136;
var CCC_min_th       = 0;
var CCC_max_th       = 600;
var XTrain_CCC_dim = X_train_CCC.length().toList().get(0);
var sequence_CCC   = ee.List.sequence(1, XTrain_CCC_dim).map(function(element){ return ee.String('B').cat(ee.String(element)).slice(0,4).replace('[.]+[0-9]*$','')});

var calculate_CCC = function(image_orig){
  
        var XTrain_dim = X_train_CCC.length().get([0]);
        var band_sequence   = ee.List.sequence(1, XTrain_dim).map(function(element){ return ee.String('B').cat(ee.String(element)).replace('[.]+[0-9]*$','')});
      
        //Create a list of band names for flattening operation 
        var im_norm_ell2D_hypell = image_orig.subtract(ee.Image(mx_CCC)).divide(ee.Image(sx_CCC)).multiply(ee.Image(hyp_ell_CCC)).toArray().toArray(1); 
        var im_norm_ell2D = image_orig.subtract(ee.Image(mx_CCC)).divide(ee.Image(sx_CCC)).toArray().toArray(1); 
        var PtTPt  = im_norm_ell2D_hypell.matrixTranspose().matrixMultiply(im_norm_ell2D).arrayProject([0]).multiply(-0.5); //OK
        
        var PtTDX  = ee.Image(X_train_CCC).matrixMultiply(im_norm_ell2D_hypell).arrayProject([0]).arrayFlatten([band_sequence]);
        var arg1   = PtTPt.exp().multiply(hyp_sig_CCC);
        var k_star = PtTDX.subtract(ee.Image(XDX_pre_calc_CCC).multiply(0.5)).exp().toArray();
        var mean_pred = k_star.arrayDotProduct(ee.Image(alpha_coefficients_CCC).toArray()).multiply(arg1);
        mean_pred = mean_pred.toArray(1).arrayProject([0]).arrayFlatten([['CCC']]);
        mean_pred = mean_pred.add(mean_model_CCC);
        mean_pred = mean_pred.where(mean_pred.lt(0),ee.Image(0.00001))
        image_orig= image_orig.addBands(mean_pred);
        return image_orig.select('CCC');  
};

/////////////////////////////////////////////////////////////////////////////////////////CWC////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var X_train_Cw =  ee.Array([[-0.903080099057136,-0.769997621775864,-0.874980895071887,-0.77690242067482,-0.629501102496441,-0.624816241588058,-0.640680146002494,-0.649635888583306,-1.06488141259173,-0.970832730564482],[-0.810695418988634,-1.06920874739288,-0.701953781062161,-1.13435728372119,-0.345032984361488,0.0697485380071138,0.0985208165320844,0.103286366218918,0.121630323325518,-0.183534611826842],[0.902198028872792,1.83146535524328,0.433333975956113,1.62240270675801,0.225219979132168,-0.207396141184896,-0.236853002234175,-0.23896129476776,0.0897910384703669,-0.546943249651502],[0.919225775646503,1.15707776833665,0.680114357030233,0.804071431520971,-0.984684091017031,-1.21035060811418,-1.23248578959536,-1.24240305762375,-1.15031128724881,-0.745180064821221],[-0.384206760775212,-0.319494479530085,-0.353989803288477,-0.360461266234284,-0.842992049822612,-0.928053931243445,-0.937701460980891,-0.94348361209244,-0.621405645086493,-0.486110641359456],[0.714280300767263,1.58699739098263,0.305096523141833,1.47484927632802,0.377385923544514,-0.0444490612472218,-0.0764332490538226,-0.0811880411963545,-0.575244175476384,-0.77237756222287],[-0.841519422406791,-0.566142772045402,-0.842221940669657,-0.522536299243766,-0.619459489882925,-0.729624249833555,-0.74581499995786,-0.748866043124925,-0.491402338350461,-0.797504158335276],[-0.887119715150866,-0.837330189713428,-0.892446814040629,-0.779039194794018,-0.221539646097673,-0.211277367148139,-0.226886039737204,-0.233020768274079,-0.815087918170362,-0.981522786710771],[-0.346740799401999,-0.414422495103993,-0.304291321755578,-0.444295128036872,-0.909833199284511,-0.982501773938692,-0.99541094216711,-1.00625646542295,-1.06055994748742,-0.644667884938884],[-1.06305544663311,-1.36091478589581,-0.988411604558379,-1.45142050706406,-0.225886587638731,0.437641449937362,0.461672804296628,0.451497153067744,-1.21912581724175,-1.12817032825656],[-0.899831175680484,-0.750230880753037,-0.894954621476946,-0.645658529995445,0.962937655011703,1.45884772018434,1.50192291911847,1.51630622978164,2.32948500119948,1.35976406449178],[0.777620808141422,1.47529139538739,0.374117607532861,1.17843851419773,-0.36313902870968,-0.706275014953296,-0.739677062694294,-0.748792595177407,-1.07444424440363,-1.03809862040567],[-0.854081798613928,-0.979479150706794,-0.789776130365134,-1.01847562040238,-0.799487626188231,-0.718673899141404,-0.726016233525799,-0.731859170877122,-0.872711716747967,-0.852572125809908],[-0.523968503929617,0.0714362861003505,-0.63304251525638,0.227309808517105,1.47480177796429,1.54535920339838,1.54294718800512,1.5451746630615,0.0326716636780268,-0.31010662810746],[-0.251867099734009,0.295060181892442,-0.359281559499947,0.359531756537887,-0.265793872734468,-0.517969598239902,-0.541308318528046,-0.550398954231147,-1.02838262829298,-0.896264010108382],[2.03103981704561,1.21354390645568,2.04507560960479,1.04693683892622,-0.308524109528958,-0.480494489721986,-0.469929175196778,-0.47292295177595,0.852678913832944,1.46703647028386],[-0.760727797200907,-0.410231139720478,-0.809116628971595,-0.321313483173869,-0.0308047409265357,-0.145402001512995,-0.165449182650945,-0.170703292218183,-0.743209065740617,-0.906176248936993],[-0.933456958807206,-1.02505270873949,-0.911061043527305,-1.01095138480722,-0.24797207426315,-0.0925738442811387,-0.101954382233455,-0.109937545299658,-1.04907094464569,-1.05124664249873],[-0.0697649717975246,0.266386611969403,-0.123193142397684,0.360237050977526,-0.135776464583446,-0.367250672425862,-0.376078378686849,-0.37121986133982,0.341811950129476,-0.0722887637035611],[0.0787349270235974,-0.0431524387114791,0.167343006152309,0.0507549545286929,0.103304275153108,0.0349775461940764,0.0374546640491624,0.0446619094626503,-0.245945777897271,0.00827114630325745],[0.888969527736505,1.26722237833768,0.781035275627553,1.29770842882232,0.162208659686549,-0.149826919757342,-0.153441662363898,-0.150477704916454,0.380996763815928,0.43694396663407],[-0.889328272601171,-1.1240686708872,-0.784421780459847,-1.20292115301728,-0.66786349731775,-0.360421751115507,-0.346119165509479,-0.343175740024795,-0.491202433032771,-0.615930792786357],[-0.751341550998888,-0.444750764950684,-0.786435632101942,-0.216893511442604,1.20255414249168,1.24327387136104,1.25189948888518,1.26528148459658,1.86271996670511,0.864174719394802],[-0.814149005410627,-0.649036339000787,-0.791565166668815,-0.626790852625644,-0.838075919846737,-0.927723721860095,-0.952569183199885,-0.965412203054216,-1.53020397553032,-1.11986526829061],[-0.961842876126077,-0.907748091829896,-0.936342516326371,-0.884465735210469,-0.670590655369272,-0.693088859841851,-0.710988396081007,-0.71884588952956,-0.969061716862063,-1.04253306306627],[0.0636910728725813,-0.194994564773022,0.202839222967726,-0.22087971263564,-0.521306532206158,-0.54206025725518,-0.535587353840245,-0.525202918327188,0.037503303811858,0.215258362392056],[1.9157718411195,1.2583312872886,1.97009507531801,1.15084846785068,-0.173615651920608,-0.377828904707305,-0.364703467768279,-0.359570734371352,1.68281628663434,2.18255394001787],[0.891061080225507,1.54360288945906,0.497234722206494,1.26488464575608,-0.301747144413061,-0.647262322865305,-0.679191362956384,-0.689742705309746,-1.11249864111504,-0.974628768260987],[-0.440340505768786,-0.0900847773760722,-0.477111060496445,-0.0268847192965559,-0.129952907512895,-0.285534256986392,-0.29290623021343,-0.290748312594309,0.52028951994279,0.0373321387507126],[0.333508339112756,0.110890443017567,0.435994808610801,0.107210042983284,-0.405593379800145,-0.506486524743607,-0.504106064575953,-0.497455131231188,-0.0600863869181959,0.257258273037122],[-0.713600647094002,-0.333971077017578,-0.782841072207923,-0.169740084659822,0.704630259424627,0.644368837495643,0.633021052564603,0.632939290218945,-0.138545257736497,-0.596484130510205],[-1.0765665139312,-1.29393798877476,-0.981646493872302,-1.37279752035016,-0.619558766935509,-0.240768384051255,-0.235500575379491,-0.243180031876354,-1.29867792026618,-1.10291749122856],[-0.0959558301366379,-0.444305654009554,0.00883116675449074,-0.520818523628296,-0.58303021086273,-0.471576304953774,-0.462282341208133,-0.464083491292153,-0.436919413253937,-0.137692036594812],[2.5584935920226,1.62168838392517,2.52106440390528,1.40591962094401,-0.45228738354677,-0.686269782933896,-0.676891704520708,-0.683366293496756,0.972109053795792,1.7063138470957],[-0.345357178846068,-0.0646980338168947,-0.397024189835081,0.13015655056623,0.57880826468177,0.413769617923998,0.399667552179383,0.393562259541828,-0.423043842363503,-0.541008609474523],[0.201689489506027,0.278220840148514,0.231284846343302,0.384352129489339,0.234135058454252,0.0646972345015052,0.06939863303774,0.0836780241684471,1.30147388816203,0.928822010285565],[-1.03859572615442,-1.29487681518211,-0.923520668325669,-1.40860316953183,-0.432045663376139,0.351396328125388,0.392308140443703,0.383949618164351,-1.06771647853325,-0.920481103793144],[1.47806857706589,1.18583320687922,1.55783536064501,1.14013871368453,-0.348923948141728,-0.583325460696983,-0.576618072201835,-0.568301326454459,0.63656440831391,1.13231920508699],[-0.999238284764568,-1.01505662977905,-0.960974025488121,-0.987703865756086,-0.51222947453512,-0.470895916113634,-0.494794424815742,-0.508954254891456,-1.56746331230263,-1.23021692212417],[2.04428296429569,1.28301555040176,2.29844527149509,1.21802960266786,0.0136685919070156,-0.152826087265572,-0.132646311846921,-0.109708161709717,1.35725421463587,2.13420223511998],[-1.04713063966743,-1.22640023264175,-0.981435473173227,-1.25596552270164,-0.399277617553097,-0.125184411670401,-0.133957237732397,-0.147534702157827,-1.45876182102672,-1.19636670701659],[-0.831468472167258,-0.635423654159571,-0.836617381690476,-0.507517390506669,0.545149860450287,0.631210246710917,0.616973356842704,0.606411869020168,-0.971914334014509,-0.963658365374699],[-0.539070177440305,-0.441764070535699,-0.528670451303754,-0.495901579996304,-0.896813797604265,-0.968658575284228,-0.986271895964656,-0.998705310187828,-1.11205004406284,-0.816565629225087],[-0.346740799401999,-0.414422495103993,-0.304291321755578,-0.444295128036872,-0.909833199284511,-0.982501773938692,-0.99541094216711,-1.00625646542295,-1.06055994748742,-0.644667884938884],[-0.963012707140385,-0.995050721109467,-0.932391367076711,-0.972966128796342,-0.258559188155077,-0.122489858099282,-0.129243512783767,-0.135009002184942,-0.807510653859179,-0.941824804377166],[-0.115721635093982,-0.351665826609443,-0.0262183191581345,-0.429507857544389,-0.954929713335864,-0.978944710083039,-0.982455909887117,-0.988191942730885,-0.723896784156556,-0.290673781206259],[-0.195293096931817,-0.359511701787832,-0.100413180382744,-0.407539013136807,-1.05225762645457,-1.11435516826258,-1.11842388087484,-1.12066633327181,-0.537393650458012,-0.279753429784306],[0.0194689903662823,-0.385385841827547,0.127936899729218,-0.483902377314765,-0.912096890253704,-0.891521635206781,-0.885284895634521,-0.885531486548068,0.00291472588215483,0.104332492402171],[-0.228543382118741,-0.283972241904983,-0.149940575247567,-0.324242662428213,-0.882486377213651,-0.95358665457596,-0.959901815593948,-0.962517647691741,-0.711585650863944,-0.368695994161724],[-0.0875555187813499,-0.387967644254296,0.087854317449061,-0.430745144753421,-0.79545262359661,-0.780544843148989,-0.769767228254234,-0.757823020324751,0.114447812521144,0.227587062502855],[0.222397017720334,-0.264649181109547,0.355805948754086,-0.364443000212166,-0.85837633539758,-0.851066766716794,-0.841321629056823,-0.836198760137044,0.361388590630682,0.404280673707906],[0.388919506059466,0.10864708387427,0.457408894204481,0.0357603526975821,-0.928028592980029,-1.03688309660058,-1.03558121644751,-1.03812425863655,0.096097376959703,0.288725599394448],[0.473555900084821,-0.0819886862614905,0.509012610129185,-0.197249983911464,-0.718520571335439,-0.738868706224158,-0.732520108389483,-0.739434196695185,0.200120528509093,0.305543945125926],[0.59226833593665,0.218597434743134,0.647078971311763,0.126461638078984,-0.716801162452783,-0.810340473989215,-0.804538590976127,-0.806517314576579,0.516799704590205,0.652959647332697],[-0.821493703579315,-1.04582206215721,-0.718156227058428,-1.13545227698869,-0.951436206106498,-0.775973665211846,-0.770152794691139,-0.76945237284581,-0.0378879723099735,-0.353277918637129],[0.665748107430522,0.211820779632618,0.690581381387646,0.116862381044697,-0.622609881684938,-0.710235277404377,-0.705947149969974,-0.711286118285212,0.299676153181874,0.481551470761384],[-0.0711503411431616,-0.247253609657399,0.0394825239626037,-0.296019191250029,-0.74981252413979,-0.786294255419056,-0.783348981251669,-0.77832008254019,0.0285525828760044,0.123329920833523],[1.21365572681501,1.34754328353743,1.14680896129452,1.21497928304963,-0.453021685395359,-0.712819011131339,-0.713302916350251,-0.709401330955057,0.439975178735286,0.543323173311742],[0.671160830170927,0.171529655177883,0.768279252497449,0.106386761508101,-0.460440990458504,-0.528291594790313,-0.519742676373123,-0.514682629813652,0.504733197497366,0.665193981407814],[0.650520302462251,0.0647650269019658,0.741744331659002,-0.0112216118564873,-0.434910067598602,-0.470187119140855,-0.459623755471193,-0.454883570881307,0.449314604455539,0.587507083993529],[0.556077132960136,0.0142795901497996,0.706874134632438,-0.0748134706859535,-0.238785289323467,-0.0902128753170495,-0.0587835598380793,-0.0454753891762346,1.43573053750572,1.65277716173109],[0.52431124233598,0.126975480684472,0.646926857450945,0.104041736329509,-0.421657800270451,-0.503776220128648,-0.495830266574233,-0.487017047920451,0.376916553492346,0.568982071137826],[0.48411421793796,0.131835615257036,0.584756033539271,0.124793527384934,-0.301860355087061,-0.354534798480483,-0.34183026467133,-0.337446517626282,0.447933710877085,0.65142918477882],[0.891389634091621,0.334350442602406,0.998455030341965,0.242342513065707,-0.388600283462506,-0.422520241452845,-0.408631122027805,-0.40429516705983,0.468391679981285,0.830439681194908],[0.547704802240152,0.146430167143928,0.73760279153126,0.13266712548289,-0.294978191129479,-0.317800832828945,-0.301040139766368,-0.284632076010797,0.327016775113912,0.717087105471072],[0.0636910728725813,-0.194994564773022,0.202839222967726,-0.22087971263564,-0.521306532206158,-0.54206025725518,-0.535587353840245,-0.525202918327188,0.037503303811858,0.215258362392056],[0.922065591531185,0.385773155822038,1.16897367410988,0.306587899194497,-0.327035273919801,-0.309873838748063,-0.286078759954701,-0.264201964424442,0.632867349849235,1.17844499550551],[0.209410942557113,-0.155920341837699,0.258574039833645,-0.140520030336209,0.00420801130652047,0.00766186095265555,0.0181034350958649,0.0204373639106701,0.671607136221304,0.520864759296305],[0.042514103921429,-0.279978325017497,0.151140725857415,-0.307904217167775,-0.0214451790813019,0.16190001999027,0.185418518227842,0.195198562758787,0.50667592814429,0.501887351450686],[0.425897883002629,0.109134957259387,0.526845060535974,0.125516953462552,0.02639834843209,-0.0116874525982842,-0.00134818133700476,0.00935887099599642,0.446427281518772,0.55467191843662],[-0.844386781729351,-1.13826842526613,-0.744981456703141,-1.21069752349129,-0.224530846275016,0.277077840454977,0.315897285007842,0.323716368865332,1.31375616607397,0.679819077826121],[-0.162712707501849,-0.156397405385675,-0.141688895402351,-0.153782403796938,-0.512104420282917,-0.609037352153172,-0.610120851243324,-0.613237910714422,0.317970067894564,0.148504812218533],[0.509945590693026,0.146744924166584,0.64683456178594,0.161330091799039,-0.245641676081431,-0.336752432522937,-0.325113225614965,-0.30989167263857,1.16048392002248,1.03774312887474],[-0.0372295044031422,0.412248831505053,-0.193511502841368,0.224750882565835,-1.00134905057034,-1.20420840418836,-1.23232427230979,-1.24323245444649,-1.34167630469324,-1.03569205233691],[-0.634748375022975,-0.80640531223743,-0.518452807513367,-0.8884983166079,-1.1085771500452,-1.05227791370756,-1.05488253207297,-1.05600360775324,-0.629728092166747,-0.505580075588387],[-0.684045827805355,-1.00323313195299,-0.589681904130817,-1.12481373548765,-1.14460461825783,-1.00644589199253,-1.00646744531179,-1.01453574406087,-0.746985253393544,-0.665378888181936],[-1.14049923254457,-1.30254913683551,-1.04105221754005,-1.42357247904185,-1.38884515217476,-1.23618232001101,-1.2446479570751,-1.25335245164605,-0.751436815609365,-0.891967662657565],[0.840954101758042,0.413443477477408,0.819305333434344,0.387935887152454,0.0629650477934943,-0.0239639849279961,-0.0196450613428396,-0.0271848727995007,0.354477379900317,0.546278375677287],[-1.03968150596346,-1.1143027778706,-0.97624572686978,-1.13591542208924,0.129249374909582,0.862189178946551,0.919080223020884,0.925317489793506,0.957549878113612,0.296187189741842],[-0.888362503485743,-0.912265967882369,-0.866074239122809,-0.854609365504744,0.333283921721682,0.625376172580212,0.646213032945822,0.654173939322729,1.37355165431563,0.446569185194106],[-0.959968884006501,-1.06674807872939,-0.869070078529248,-1.11908906496188,-0.221390208007994,0.353486154120525,0.399549779158656,0.410524498036909,0.857475848182454,0.310852093172719],[-0.987505818572533,-1.26545589604051,-0.932628858570193,-1.30453899834873,0.215728047883489,0.851927936422379,0.895299606840427,0.903688481709971,0.830300425783786,-0.0562489963061778],[-0.830866560610144,-0.764225248226273,-0.776692391343711,-0.801567229427961,-1.00335462120281,-1.02793537862517,-1.04304031463287,-1.05102440189573,-1.07511813157576,-0.907434238343799],[-0.476774790514507,-0.539788548062039,-0.417985247873778,-0.554215424121085,-0.893942600741362,-0.952281849355039,-0.960388049922379,-0.964624615063138,-0.610775957464557,-0.540629037901721],[-0.453908818604923,-0.782073004704151,-0.367668285964517,-0.88541554398546,-0.868459748875342,-0.728314381777115,-0.724305720605714,-0.729961106417992,-0.608734860708928,-0.466315843342487],[-0.148504774830551,-0.535093899378659,-0.0377967026272048,-0.583992960618206,-0.021913348760858,0.29462450329221,0.324879721133924,0.332732386915278,0.430402331825627,0.356964653613534],[-0.438220754045766,-0.606540723126008,-0.317134172405363,-0.614920805017534,-0.311991142877635,-0.172169775443712,-0.154563590592301,-0.141999269343919,0.454167663016265,0.236838914700871],[0.178027381082547,-0.167151603659771,0.356490461127763,-0.194983529164113,-0.130380321349811,0.0135876286599979,0.0336977046879643,0.0484029524202713,-0.0616423959683966,0.327190647323276],[-0.539977034202494,-0.489788600172091,-0.532163519106541,-0.351740079755159,0.161180358426095,0.0947662584598036,0.094216773448413,0.0964096608864884,0.827682221414585,0.180017331243072],[2.46557165096644,4.10039071718971,1.57781894628179,4.14264047257355,3.52266478317941,2.65961335878417,2.5581646472714,2.52350075901764,-0.879318805648293,-0.940057197399874],[0.853931214374017,2.21406459786491,0.363693168428422,2.48638366532372,3.23958863382386,2.70076633603862,2.60739937817445,2.56906899562626,-0.950412514077307,-0.961820686347339],[0.33329793785119,1.54773987772048,-0.0398338353122674,1.89370535472544,3.4271714054903,3.13477059799296,3.06281979779187,3.03152100253676,-0.573777409871581,-0.78951945701093],[0.307151892248306,1.59733382084484,-0.054134775197632,1.93141390617412,2.67514459709826,2.18016452266639,2.12106578391178,2.10627573825191,-0.77244650752489,-0.916472332738286],[-0.224946230991778,0.801907851589402,-0.459364277699724,1.21275408434811,2.93813473450251,2.72869968721346,2.69297269421094,2.68468227984599,-0.113474592417842,-0.603978151864899],[0.135272751738735,1.22648487119627,-0.182524424723416,1.51641829000201,2.52188242502106,2.17334657083299,2.12848268009805,2.1170166531001,-0.418975332847206,-0.715501244122786],[0.334120962006823,1.50660081692289,-0.0133348716718564,1.76497808284205,2.38180633557029,1.92986018471421,1.869914817211,1.85081134713149,-0.890081366844488,-0.927226372803309],[-0.15174101948183,-0.211641872939491,-0.131613506241061,-0.162820368385968,-0.399948521424247,-0.513356511275401,-0.515175046052586,-0.515619938620824,0.489741885220694,0.140678870626673],[-0.412244559643128,0.318709721035665,-0.567085414961618,0.577640383113293,2.01051747405569,1.94965137129858,1.93904085049097,1.94313428719325,0.235629503838998,-0.261518305643673],[3.2750370028072,2.15720930560878,3.50828369201209,1.93230866309177,-0.21508768270129,-0.463488706479456,-0.442178486569997,-0.424558608303741,1.9751373567286,3.08990772561811],[3.02808953395409,2.07253775889587,3.41287118417202,1.9542660766841,0.0824623642400099,-0.15822757022797,-0.131619162859007,-0.0979997113990232,2.32033219343949,3.4658039403655],[2.82883855555672,1.96931684958412,3.20451032354353,1.86748516676655,-0.000110714651170875,-0.248679064551018,-0.225053828029033,-0.192748693665724,2.00868376953483,3.10787005464318],[-0.0831427758550065,0.896554652429431,-0.334939116384162,1.211537425162,2.78878581999981,2.62374148151421,2.62172618573396,2.63828577638305,2.13427944166205,1.24278249417492],[3.28022522466902,2.08849943724481,3.32008835712842,1.7894747140835,-0.449371773265606,-0.692522947338188,-0.676318542486503,-0.675744091497019,1.56044567430502,2.5432099229233],[3.1443473248541,1.96488004731021,3.12594401153553,1.67146980967964,-0.442845961675721,-0.679850107494728,-0.665737477810025,-0.669801022574385,1.43996186673018,2.31111818019818],[0.815536973564709,2.17814096555182,0.324919378446376,2.30625083477415,1.8349092566336,1.24050168764529,1.18582349643008,1.17390319813675,-0.970702804663543,-1.03556414303916],[-0.387819432410821,0.395088691947124,-0.555520453303796,0.693682866177654,2.06983499046409,1.90644007013668,1.89836485325133,1.905422156048,1.44050169041545,0.599371915328435],[0.357093282190435,0.340962247696511,0.311135509696828,0.362735538135534,-0.432573747627781,-0.633890530451466,-0.640748846931252,-0.647362957099729,-0.0786680621626011,-0.0344152011497472],[-0.186579096422922,-0.530541050323669,-0.0166371343431279,-0.599999780847786,-0.759852046710094,-0.67443878012993,-0.66724609412315,-0.660154199652102,-0.608602582090972,-0.15436215974419],[-0.593219100766653,-0.15448470008436,-0.656125959336774,-0.19832973609197,-0.948346773898177,-1.11958971828714,-1.15255211877998,-1.16712978736383,-1.68026395334441,-1.21056491712987],[1.05251699688677,1.9535036475277,0.675350442543854,1.87970799298316,0.526696520588317,0.0863059790374973,0.0546091457539432,0.0465724035744369,-0.958706006617498,-0.783428457230164],[-0.701576788817118,-0.262891469796662,-0.779158152056518,-0.0248798594130878,2.17279748591291,2.69093318438451,2.72853285575975,2.73869251054549,1.41437557261589,0.603099490817292],[-0.874744678041041,-0.730551651720601,-0.888606353308427,-0.567560441062167,1.80758647005968,2.90997338792706,3.01394006842272,3.03046448206092,2.42752904022599,1.44632183757789],[-0.707799693038748,-0.218890504615799,-0.780574650247364,0.0108091166198484,2.11990127893377,2.62158696373187,2.66120931052081,2.67390916089773,1.48379586728431,0.680210591502694],[0.95150602904309,0.358956175428093,1.05613302721421,0.28921384835037,-0.259544991870214,-0.316541311859063,-0.301368782576588,-0.29322944075989,1.16158458918238,1.26614195162783],[1.62894344160782,1.06264780011223,1.80377696136678,1.03782240612485,-0.021844377334852,-0.205387601826716,-0.188445767007704,-0.170029831037863,1.68427273966323,2.10207399527454],[0.771092138969541,0.435155989185747,0.958183962749521,0.46243878760737,-0.0488393754649736,-0.149325136503597,-0.135668872300299,-0.11588880649336,0.546030502695765,0.936228456212604],[-0.0959558301366379,-0.444305654009554,0.00883116675449074,-0.520818523628296,-0.58303021086273,-0.471576304953774,-0.462282341208133,-0.464083491292153,-0.436919413253937,-0.137692036594812],[-1.09858454143183,-1.11938809088892,-1.01969343477976,-1.14905836323893,0.519479949716766,1.99454072116668,2.13919778168859,2.15383893411196,1.90334120322492,1.21704046994023],[-0.927628734562466,-0.728523058606399,-0.898372667982908,-0.711830336965142,-0.119901889704924,0.00493496148793732,0.00743347982993361,0.00699780197539713,-0.095062281400925,-0.404991559905474],[-1.03865392806184,-1.2505207150575,-0.970194913379256,-1.29236997579699,-0.025109721513542,0.579053477722721,0.606969099555836,0.603231855384743,-0.739401147084881,-0.893172468724783],[0.783500239134756,1.87392862109073,0.342266655231735,1.84607354175512,0.836361503009739,0.3476484234975,0.310588245480631,0.305169632148603,-0.794215363682598,-0.919930244986842],[0.11478327574096,-0.0301539274849262,0.15573579064426,0.0146577538638716,-0.229984465696989,-0.335486161105695,-0.334870720382214,-0.334449841367546,0.0207562754860618,0.0670375364840107],[-0.606230806629009,-0.50132730647993,-0.578858000440359,-0.343518695818581,0.618879966510208,0.661543100653528,0.674974326255223,0.690794238478908,2.03692555194661,1.30186453054947],[-0.426790445925212,0.0611438904276769,-0.543448859696684,-0.0241986091020725,-0.819159112902439,-1.01743210443629,-1.04961611516279,-1.06277324857755,-1.41363230312356,-1.15182674309626],[-0.833597568985272,-1.0755230435133,-0.753333924408752,-1.13093940426784,-0.877884798741228,-0.779802575208051,-0.788039712420061,-0.793234253267941,-1.20546195163568,-0.961997622664241],[-0.50877425386384,-0.644540082622597,-0.398614923020098,-0.664936140049985,-0.513338242459248,-0.424505154245265,-0.417918365948008,-0.410642764678024,-0.284255014224988,-0.270170711064161],[-0.902482231576218,-0.766346599281242,-0.901704756901399,-0.675955971503307,0.589811645513481,0.891454055863113,0.915034719758904,0.924697702113296,1.47681187356626,0.536303674962775],[-0.895517895168699,-0.85414775281488,-0.890937481655314,-0.782515870682114,0.132397676668383,0.253359862387688,0.242809311228212,0.235110459932198,-0.958413486435362,-1.00432778516433],[-0.874285620743078,-0.836914010983472,-0.845784230221198,-0.781669333410393,0.1083081869439,0.282095672992426,0.278518651936611,0.275158518300624,-0.912855897472444,-0.910041714746599],[-0.85283480225382,-0.696551534545971,-0.855222663302986,-0.604756839432284,0.162453194742389,0.201958018429229,0.191666657389374,0.187287936318988,-0.725440596602552,-0.870052497284263],[-0.871960276930184,-0.760991517238961,-0.885307818918057,-0.65876218592952,0.309726347994731,0.407064454815239,0.391453164395614,0.381776971378346,-1.06328008770314,-1.06208503830656],[-0.840238433946762,-0.579886049257382,-0.866328963559128,-0.479301014317259,0.33971289464273,0.389561107348564,0.384116185616263,0.383362317076313,-0.199789662893886,-0.598337790882318],[-0.795290494412899,-0.603658232361705,-0.816007403436754,-0.498594653790881,0.106894272710776,0.0678862583417296,0.0524642747169374,0.0469964242253007,-0.789356454718229,-0.9133576388937],[-0.675115469219955,-0.811651342099134,-0.625491835071498,-0.779807687189221,-0.212002082238858,-0.133370454168715,-0.137659236350589,-0.138526876378951,-0.857761059818643,-0.782608725469838],[-0.494643814436413,-0.637249721795558,-0.455963836964689,-0.598748566438567,-0.103425730721794,-0.0513578628513346,-0.0514709768987358,-0.0515837159807834,-0.404804861949425,-0.497347341451894],[-0.863978418161861,-0.800038636097333,-0.866018604886676,-0.67642003632462,0.606968461902751,0.773077085887143,0.764791116393291,0.757403617098811,-0.893942534089311,-0.977775015017007],[-1.02020671054322,-1.06116090312495,-0.9522699187554,-1.09379490442672,-0.884981192128072,-0.814204261296779,-0.83035976494666,-0.841031635083731,-1.38596078632787,-1.12955713432684],[-0.970548405934832,-0.953680917979361,-0.908148054807586,-0.976736064220442,-0.717745513644209,-0.63744267210592,-0.648572901274896,-0.655593647095443,-1.13174299852122,-0.992537884676613],[-0.265152217937045,0.159263987322263,-0.344173902477993,0.315606155481376,0.231899757238693,-0.00415704729979003,-0.0168726283525301,-0.017879865325282,0.0197456430466248,-0.328133936226586]]);

var alpha_coefficients_Cw = ee.Image([[101.049104152095,48.246789990575,-18.7622081512396,-36.5433588758915,-79.0384541179078,119.59814005842,175.767376748137,-305.563373730376,256.735339139849,-245.46615525755,176.73627988267,-99.542425510888,218.612754367432,-498.879076357606,-102.239332807292,244.906482810156,-241.455039772502,1550.2882455949,159.775842868412,-717.516400579727,-336.521267495306,0.243482233418937,264.75285765886,-184.7199729734,-1242.39864577925,687.064925868605,-294.522888903254,32.9190975145367,91.7863425934272,1498.23021955256,771.960367697062,180.518422218185,-579.084989605999,103.358541321305,-264.713659434003,147.309019347291,-341.831087382998,-57.0603361532152,-314.859898451117,-129.29716730516,-232.810851081041,-1010.4994301256,682.859956038084,256.735339139588,-441.319490108106,945.542210472979,-1023.90845775123,8.83463390343971,68.6292508082347,-321.179112587337,86.8287418607603,-459.459726106978,-154.008368499069,289.022232695028,535.693643869949,154.559004243344,213.525284275826,-2.93672857483777,-107.18967848035,-490.895504916524,273.333598950942,-101.802284816396,-1069.78749848212,62.6639505144044,-800.199591974812,687.064925868655,347.341569934886,-26.6633236406487,7.66295526388946,521.123153408247,20.9712006861278,324.564427728416,-301.511026088612,-249.566463773586,-28.7687920384975,-717.059349180273,425.791211730175,177.363444383914,114.677859371626,-181.434886630642,50.622073885021,-76.9626378255222,-87.73343887266,-911.047659586574,-145.821210404674,-6.917235236482,61.7774321103963,213.896065804641,-145.276810817991,7.51300436636978,-77.4418539621882,154.089920296457,-65.8111303399734,-215.27743969035,357.123875547343,-227.589017182803,113.453473503744,304.581667154357,-108.103619680065,-286.248123981729,617.81792948689,27.7232708885298,298.289340020454,-516.474782425065,3.30712162905345,-221.605808327851,29.4081427005553,672.423412756851,68.3042582146859,54.3674150749323,481.176290111456,-106.178023222805,-350.840857519684,19.2095113960539,111.429488858573,257.805934981789,-579.084989605959,31.6950982862003,-449.309642501189,-204.083886979143,97.4087150008621,-587.015328760645,-222.170885859443,103.792942168688,95.7007402496662,45.8170297509832,-234.563553991787,716.402917820488,639.813752695033,-310.967771826253,735.950623861069,53.0746596071279,-33.6102431576096,120.328499662929,149.631108811475,21.9712886001311,207.657230408707,-62.2554727748532,52.5075953702558]]);

var XDX_pre_calc_Cw =  ee.Image([[0.855357550753966],[0.630412269483938],[1.34687429840998],[1.19114334377957],[0.277203525222172],[1.07338711466419],[0.503446844101876],[0.730162148269453],[0.494715200708245],[1.45930298131277],[2.10826978042828],[1.22694248804302],[0.858000586518947],[0.378693447071599],[0.367756291192214],[2.3385218935352],[0.445754160469297],[0.98656497294381],[0.0690850402196412],[0.0233836246475761],[0.868060842223278],[0.803900499225424],[1.36422951561378],[1.09911730570505],[0.934828505954088],[0.0515271967437735],[2.77832892408366],[1.37061028279635],[0.161210815286396],[0.0863005283349666],[0.308310800460785],[1.45816707885062],[0.14880233289198],[3.71140906840005],[0.127505992413111],[0.492893874001955],[1.27709638710245],[1.51534655123447],[1.40108491546231],[2.89760474858057],[1.4880562541827],[0.693597617694147],[0.600963295108443],[0.494715200708245],[0.86751597880928],[0.283819876141739],[0.257144756602191],[0.141016646648031],[0.267298844425004],[0.122722614733717],[0.169494489033502],[0.181743354040959],[0.164648176697338],[0.300149843024431],[0.689975122234196],[0.267469337148252],[0.0857132735349637],[1.25494399584841],[0.305880528974555],[0.265654932940769],[0.706317554078907],[0.20055665810318],[0.182607338299728],[0.462379330292555],[0.208549330747603],[0.0515271967437735],[0.59676025001],[0.148082243839453],[0.101819960457526],[0.145954497087517],[1.15568506598369],[0.0789845643765477],[0.501925474871122],[0.675941344276234],[0.585638327204829],[0.778286816236066],[1.38774845785563],[0.362462633412662],[1.11816152007674],[1.10759021696653],[0.925520718544714],[1.14427884998268],[0.871910671711574],[0.370605446159435],[0.443340631202044],[0.159315260465354],[0.243824326055355],[0.0419460745791005],[0.372520030499575],[8.62526063165174],[2.99013582837943],[2.04571287227777],[1.66421419284588],[1.11888854997278],[1.14601119948468],[1.48801200185151],[0.109129668892985],[0.561132756943947],[7.13226732078772],[6.95627205047472],[5.96028945013149],[2.27422263925646],[6.4291391375281],[5.74864294901665],[2.27356095930717],[1.10233004027286],[0.12038398244906],[0.254031460663297],[1.02494612905663],[1.86781202839087],[1.43414302175302],[2.74089593288915],[1.45001821168423],[0.80230127813749],[2.29237329771543],[0.439613158099512],[0.14880233289198],[2.12036867404941],[0.51177673543798],[1.10231713573616],[1.5520486591754],[0.0169992587952905],[1.35380612316294],[0.718107695246165],[1.10103292269726],[0.268998880100468],[1.15406254180228],[0.807284449104597],[0.753687191364065],[0.592679166112428],[0.80967404281032],[0.423810471600842],[0.542428335099076],[0.588005676808968],[0.271336762964532],[0.772759112932347],[1.35214957366886],[1.0454372413317],[0.0492575412475847]]);//.multiply(1.0e+2)

var mx_Cw       =  ee.Image([[0.0511198848914757,0.0847310370785727,0.0574799688439146,0.123821226893355,0.294884021119248,0.346030581983731,0.350661154380805,0.350971470097844,0.171256494875863,0.0887916193430801]]).multiply(1.0e+04);
var sx_Cw       =  ee.Image([[0.0340833689454088,0.0468683731260528,0.044963903691804,0.0567064113886072,0.085555137460068,0.105956790592044,0.106280498925336,0.105497894531323,0.0751374233407254,0.0636369634240758]]).multiply(1.0e+04);

var mean_model_Cw = 0.0255784174802599;

var hyp_ell_Cw  = ee.Image([0.20786686668003,0.323862403416791,0.183564037763196,0.0181820364018123,0.042808672219323,0.00829578054645887,0.00540485225880606,0.0498416722675611,0.260051752401913,0.00419909944879706]);
var hyp_sign_Cw = ee.Array([3.40485479788378e-06]);
var hyp_sig_Cw  =0.00331725369327599;
var Cw_min_th       = 0;
var Cw_max_th       = 0.55;
var XTrain_Cw_dim = X_train_Cw.length().toList().get(0);
var sequence_Cw   = ee.List.sequence(1, XTrain_Cw_dim).map(function(element){ return ee.String('B').cat(ee.String(element)).slice(0,4).replace('[.]+[0-9]*$','')});

var calculate_CWC = function(image_orig){
  
        var XTrain_dim = X_train_Cw.length().get([0]);
        var band_sequence   = ee.List.sequence(1, XTrain_dim).map(function(element){ return ee.String('B').cat(ee.String(element)).replace('[.]+[0-9]*$','')});
      
        //Create a list of band names for flattening operation 
        var im_norm_ell2D_hypell = image_orig.subtract(ee.Image(mx_Cw)).divide(ee.Image(sx_Cw)).multiply(ee.Image(hyp_ell_Cw)).toArray().toArray(1); 
        var im_norm_ell2D = image_orig.subtract(ee.Image(mx_Cw)).divide(ee.Image(sx_Cw)).toArray().toArray(1); 
        var PtTPt  = im_norm_ell2D_hypell.matrixTranspose().matrixMultiply(im_norm_ell2D).arrayProject([0]).multiply(-0.5); //OK
        
        var PtTDX  = ee.Image(X_train_Cw).matrixMultiply(im_norm_ell2D_hypell).arrayProject([0]).arrayFlatten([band_sequence]);
        var arg1   = PtTPt.exp().multiply(hyp_sig_Cw);
        var k_star = PtTDX.subtract(ee.Image(XDX_pre_calc_Cw).multiply(0.5)).exp().toArray();
        var mean_pred = k_star.arrayDotProduct(ee.Image(alpha_coefficients_Cw).toArray()).multiply(arg1);
        mean_pred = mean_pred.toArray(1).arrayProject([0]).arrayFlatten([['CWC']]);
        mean_pred = mean_pred.add(mean_model_Cw);
        mean_pred = mean_pred.where(mean_pred.lt(0),ee.Image(0.00001))
        image_orig= image_orig.addBands(mean_pred);
        return image_orig.select('CWC');  
  
};

//////////////////////////////////////////////////////////////////////////////// INDICES //////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////// SAR INDICES ////////////////////////////////////////////////////////////////////////////////////////////

function DPDD (image)
{
  var dpdd = image.expression(
    '(VV + VH)/2.0 ** 0.5',{
      	'VV' : image.select('VV'),
      	'VH' :	image.select('VH'),
    }
  );
  dpdd = dpdd.rename(['DPDD']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return dpdd;
}

function DpRVIVV (image)
{
  var dprvivv = image.expression(
    '(4.0 * VH)/(VV + VH)',{
      	'VV' : image.select('VV'),
      	'VH' :	image.select('VH'),
    }
  );
  dprvivv = dprvivv.rename(['DpRVIVV']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return dprvivv;
}

function NDPoII (image)
{
  var ndpoii = image.expression(
    '(VV - VH)/(VV + VH)',{
      	'VV' : image.select('VV'),
      	'VH' :	image.select('VH'),
    }
  );
  ndpoii = ndpoii.rename(['NDPoII']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ndpoii;
}

function VDDPI (image)
{
  var vddpi = image.expression(
    '(VV + VH)/VV',{
      	'VV' : image.select('VV'),
      	'VH' :	image.select('VH'),
    }
  );
  vddpi = vddpi.rename(['VDDPI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return vddpi;
}

function VHVVDifference (image)
{
  var vhvvdifference = image.expression(
    'VH-VV',{
      	'VV' : image.select('VV'),
      	'VH' :	image.select('VH'),
    }
  );
  vhvvdifference = vhvvdifference.rename(['VHVVDifference']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return vhvvdifference;
}

function VHVVProduct (image)
{
  var vhvvproduct = image.expression(
    'VH*VV',{
      	'VV' : image.select('VV'),
      	'VH' :	image.select('VH'),
    }
  );
  vhvvproduct = vhvvproduct.rename(['VHVVProduct']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return vhvvproduct;
}

function VHVVRatio (image)
{
  var vhvvratio = image.expression(
    'VH/VV',{
      	'VV' : image.select('VV'),
      	'VH' :	image.select('VH'),
    }
  );
  vhvvratio = vhvvratio.rename(['VHVVRatio']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return vhvvratio;
}

function VVVHRatio (image)
{
  var vhvvratio = image.expression(
    'VV/VH',{
      	'VV' : image.select('VV'),
      	'VH' :	image.select('VH'),
    }
  );
  vvvhratio = vvvhratio.rename(['VVVHRatio']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return vvvhratio;
}

function VVVHDifference (image)
{
  var vvvhdifference = image.expression(
    'VV-VH',{
      	'VV' : image.select('VV'),
      	'VH' :	image.select('VH'),
    }
  );
  vvvhdifference = vvvhdifference.rename(['VVVHDifference']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return vvvhdifference;
}

function VVVHSum (image)
{
  var vvvhsum = image.expression(
    'VV+VH',{
      	'VV' : image.select('VV'),
      	'VH' :	image.select('VH'),
    }
  );
  vvvhsum = vvvhsum.rename(['VVVHSum']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return vvvhsum;
}

////////////////////////////////////////////////////// Normalized Crop Health Index //////////////////////////////////////////////////////////////////////////////////////////////////////////////

function NCHI (image)
{
  var parameters = {
  	'C1': 6.0,
  	'C2': 7.5,
  	'L': 1.0,
  	'alpha': 0.1,
  	'beta': 0.05,
  	'c': 1.0,
  	'cexp': 1.16,
  	'g': 2.5,
  	'gamma': 1.0,
  	'nexp': 2.0,
  	'omega': 2.0,
  	'p': 2.0,
  	'sigma': 0.5,
  	'sla': 1.0,
  	'slb': 0.5,
  	'A'	: image.select('B1'),
  	'B'	: image.select('B2'),
  	'G' : image.select('B3'),
  	'R' : image.select('B4'),
  	'RE1' :	image.select('B5'),
  	'RE2' :	image.select('B6'),
  	'RE3' :	image.select('B7'),
  	'N' : image.select('B8'),
  	'N2' :	image.select('B8A'),
  	'S1' :	image.select('B11'),
  	'S2' :	image.select('B12'),
  };
  var Sen2 = spectral.computeIndex(image,['NDVI', 'RDVI'],parameters);
  var nchi = Sen2.expression('(NDVI*0.132)*(RDVI*0.307)',{
    "NDVI":Sen2.select("NDVI"),
    "RDVI":Sen2.select("RDVI")
  });
  nchi = nchi.rename(['NCHI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile"]);
  return nchi;
}

////////////////////////////////////////////////////// VEGETATION INDICES //////////////////////////////////////////////////////////////////////////////////////////////////////////////

function AFRI1600 (image)
{
  var afri1600 = image.expression(
    '(N - 0.66 * S1) / (N + 0.66 * S1)',{
      	'N' : image.select('B8'),
      	'S1' :	image.select('B11'),
    }
  );
  afri1600 = afri1600.rename(['AFRI1600']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return afri1600;
}

function AFRI2100 (image)
{
  var afri2100 = image.expression(
    '(N - 0.5 * S2) / (N + 0.5 * S2)',{
      	'N' : image.select('B8'),
      	'S2' :	image.select('B12'),
    }
  );
  afri2100 = afri2100.rename(['AFRI2100']).float().copyProperties(image,["system:time_start", "satelite", "sensor", "tile", ]);
  return afri2100;
}

function NDWI (image)
{
  var ndwi = image.expression(
    '(B + G + R - N - S1 - S2)/(B + G + R + N + S1 + S2)',{
    	'B'	: image.select('B2'),
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    	'S1' :	image.select('B11'),
    	'S2' :	image.select('B12'),
    }
  );
  ndwi = ndwi.rename(['NDWI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ndwi;  
}

function ARI (image)
{
  var ari = image.expression(
    '(1 / G) - (1 / RE1)',{
    	'G' : image.select('B3'),
    	'RE1' :	image.select('B5'),
    }
  );
  ari = ari.rename(['ARI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ari;  
}

function ARI2 (image)
{
  var ari2 = image.expression(
    'N * ((1 / G) - (1 / RE1))',{
    	'G' : image.select('B3'),
    	'RE1' :	image.select('B5'),
    	'N' : image.select('B8'),
    }
  );
  ari2 = ari2.rename(['ARI2']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ari2;  
}

function ARVI (image)
{
  var arvi = image.expression(
    '(N - (R - gamma * (R - B))) / (N + (R - gamma * (R - B)))',{
    	'B'	: image.select('B2'),
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    	gamma : parseFloat(gammavalue.getValue())
    }
  );
  arvi = arvi.rename(['ARVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return arvi;  
}

function ATSAVI (image)
{
  var atsavi = image.expression(
    'sla * (N - sla * R - slb) / (sla * N + R - sla * slb + 0.08 * (1 + sla ** 2.0))',{
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    	sla : parseFloat(soillinevalueA.getValue()),
    	slb : parseFloat(soillinevalueB.getValue())
    }
  );
  atsavi = atsavi.rename(['ARVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return atsavi;  
}

function AVI (image)
{
  var avi = image.expression(
    '(N * (1.0 - R) * (N - R)) ** (1/3)',{
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  avi = avi.rename(['AVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return avi;  
}

function BCC (image)
{
  var bcc = image.expression(
    '(N * (1.0 - R) * (N - R)) ** (1/3)',{
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  bcc = bcc.rename(['BCC']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return bcc;  
}

function BNDVI (image)
{
  var bndvi = image.expression(
    '(N - B)/(N + B)',{
    	'B'	: image.select('B2'),
    	'N' : image.select('B8'),
    }
  );
  bndvi = bndvi.rename(['BNDVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return bndvi;  
}

function BWDRVI (image)
{
  var bwdrvi = image.expression(
    '(alpha * N - B) / (alpha * N + B)',{
    	'B'	: image.select('B2'),
    	'N' : image.select('B8'),
    	alpha : parseFloat(alphavalue.getValue())
    }
  );
  bwdrvi = bndvi.rename(['BWDRVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return bwdrvi;  
}

function CIG (image)
{
  var cig = image.expression(
    '(N / G) - 1.0',{
    	'G' : image.select('B3'),
    	'N' : image.select('B8'),
    }
  );
  cig = cig.rename(['CIG']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return cig;  
}

function CIRE (image)
{
  var cire = image.expression(
    '(N / RE1) - 1',{
    	'RE1' : image.select('B5'),
    	'N' : image.select('B8'),
    }
  );
  cire = cire.rename(['CIRE']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return cire;  
}

function CVI (image)
{
  var cvi = image.expression(
    '(N * R) / (G ** 2.0)',{
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  cvi = cvi.rename(['CVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return cvi;  
}

function DVI (image)
{
  var dvi = image.expression(
    'N - R',{
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  dvi = dvi.rename(['DVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return dvi;  
}

function DVIPlus (image)
{
  var dviplus = image.expression(
    '((lambdaN - lambdaR)/(lambdaN - lambdaG)) * G + (1.0 - ((lambdaN - lambdaR)/(lambdaN - lambdaG))) * N - R',{
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    	lambdaG : parseFloat(labdaGvalue.getValue()),
    	lamddaN : parseFloat(labdaNvalue.getValue()),
    	lambdaR : parseFloat(labdaRvalue.getValue())
    }
  );
  dviplus = dviplus.rename(['DVIPlus']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return dviplus;  
}

function EVI (image)
{
  var evi = image.expression(
    'g * (N - R) / (N + C1 * R - C2 * B + L)',{
    	'B'	: image.select('B2'),
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    	g : parseFloat(gvalue.getValue()),
    	C1 : parseFloat(C1value.getValue()),
    	C2 : parseFloat(C2value.getValue()),
    	L : parseFloat(Lvalue.getValue())
    }
  );
  evi = evi.rename(['EVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return evi;  
}

function EVI2 (image)
{
  var evi2 = image.expression(
    'g * (N - R) / (N + 2.4 * R + L)',{
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    	L : parseFloat(Lvalue.getValue()),
    	g : parseFloat(gvalue.getValue())
    }
  );
  evi2 = evi2.rename(['EVI2']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return evi2;  
}

function ExG (image)
{
  var exg = image.expression(
    '2 * G - R - B',{
    	'B'	: image.select('B2'),
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    }
  );
  exg = exg.rename(['ExG']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return exg;  
}

function ExGR (image)
{
  var exgr = image.expression(
    '(2.0 * G - R - B) - (1.3 * R - G)',{
    	'B'	: image.select('B2'),
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    }
  );
  exgr = exgr.rename(['ExGR']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return exgr;  
}

function ExR (image)
{
  var exr = image.expression(
    '1.3 * R - G',{
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    }
  );
  exr = exr.rename(['ExR']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return exr;  
}

function FCVI (image)
{
  var fcvi = image.expression(
    'N - ((R + G + B)/3.0)',{
    	'B'	: image.select('B2'),
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  fcvi = fcvi.rename(['FCVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return fcvi;  
}

function GARI (image)
{
  var gari = image.expression(
    '(N - (G - (B - R))) / (N - (G + (B - R)))',{
    	'B'	: image.select('B2'),
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  gari = gari.rename(['GARI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return gari;  
}

function GBNDVI (image)
{
  var gbndvi = image.expression(
    '(N - (G + B))/(N + (G + B))',{
    	'B'	: image.select('B2'),
    	'G' : image.select('B3'),
    	'N' : image.select('B8'),
    }
  );
  gbndvi = gbndvi.rename(['GBNDVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return gbndvi;  
}

function GCC (image)
{
  var gcc = image.expression(
    'G / (R + G + B)',{
    	'B'	: image.select('B2'),
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    }
  );
  gcc = gcc.rename(['AVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return gcc;  
}

function GDVI (image)
{
  var gdvi = image.expression(
    '((N ** nexp) - (R ** nexp)) / ((N ** nexp) + (R ** nexp))',{
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    	nexp : parseFloat(nexpvalue.getValue())
    }
  );
  gdvi = gdvi.rename(['GDVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return gdvi;  
}

function GEMI (image)
{
  var gemi = image.expression(
    '((2.0*((N ** 2.0)-(R ** 2.0)) + 1.5*N + 0.5*R)/(N + R + 0.5))*(1.0 - 0.25*((2.0 * ((N ** 2.0) - (R ** 2)) + 1.5 * N + 0.5 * R)/(N + R + 0.5)))-((R - 0.125)/(1 - R))',{
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  gemi = gemi.rename(['GEMI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return gemi;  
}

function GLI (image)
{
  var gli = image.expression(
    '(2.0 * G - R - B) / (2.0 * G + R + B)',{
    	'B'	: image.select('B2'),
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    }
  );
  gli = gli.rename(['GLI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return gli;  
}

function GM1 (image)
{
  var gm1 = image.expression(
    'RE2/G',{
    	'G' : image.select('B3'),
    	'RE2' :	image.select('B6'),
    }
  );
  gm1 = gm1.rename(['GM1']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return gm1;  
}

function GM2 (image)
{
  var gm2 = image.expression(
    'RE2/RE1',{
    	'RE1' :	image.select('B5'),
    	'RE2' :	image.select('B6'),
    }
  );
  gm2 = gm2.rename(['GM2']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return gm2;  
}

function GNDVI (image)
{
  var gndvi = image.expression(
    '(N - G)/(N + G)',{
    	'G' : image.select('B3'),
    	'N' : image.select('B8'),
    }
  );
  gndvi = gndvi.rename(['GNDVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return gndvi;  
}

function GOSAVI (image)
{
  var gosavi = image.expression(
    '(N - G) / (N + G + 0.16)',{
    	'G' : image.select('B3'),
    	'N' : image.select('B8'),
    }
  );
  gosavi = gosavi.rename(['GOSAVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return gosavi;  
}

function GRNDVI (image)
{
  var grndvi = image.expression(
    '(N - (G + R))/(N + (G + R))',{
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  grndvi = grndvi.rename(['GRNDVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return grndvi;  
}

function GRVI (image)
{
  var grvi = image.expression(
    '(N * (1.0 - R) * (N - R)) ** (1/3)',{
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  grvi = grvi.rename(['GRVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return grvi;  
}

function GSAVI (image)
{
  var gsavi = image.expression(
    '(N * (1.0 - R) * (N - R)) ** (1/3)',{
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  gsavi = gsavi.rename(['GSAVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return gsavi;  
}

function GVMI (image)
{
  var gvmi = image.expression(
    '((N + 0.1) - (S2 + 0.02)) / ((N + 0.1) + (S2 + 0.02))',{
    	'N' : image.select('B8'),
    	'S2' :	image.select('B12'),
    }
  );
  gvmi = gvmi.rename(['GVMI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return gvmi;  
}

function IAVI (image)
{
  var iavi = image.expression(
    '(N - (R - gamma * (B - R)))/(N + (R - gamma * (B - R)))',{
    	'B'	: image.select('B2'),
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  iavi = iavi.rename(['IAVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return iavi;  
}

function IKAW (image)
{
  var ikaw = image.expression(
    '(R - B)/(R + B)',{
    	'B'	: image.select('B2'),
    	'R' : image.select('B4'),
    }
  );
  ikaw = ikaw.rename(['IKAW']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ikaw;  
}

function IPVI (image)
{
  var ipvi = image.expression(
    'N/(N + R)',{
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  ipvi = ipvi.rename(['IPVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ipvi;  
}

function IRECI (image)
{
  var ireci = image.expression(
    '(RE3 - R) / (RE1 / RE2)',{
    	'R' : image.select('B4'),
    	'RE1' :	image.select('B5'),
    	'RE2' :	image.select('B6'),
    	'RE3' :	image.select('B7'),
    }
  );
  ireci = ireci.rename(['IRECI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ireci;  
}

function MCARI (image)
{
  var mcari = image.expression(
    '((RE1 - R) - 0.2 * (RE1 - G)) * (RE1 / R)',{
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    	'RE1' :	image.select('B5'),
    }
  );
  mcari = mcari.rename(['MCARI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return mcari;  
}

function MCARI1 (image)
{
  var mcari1 = image.expression(
    '1.2 * (2.5 * (N - R) - 1.3 * (N - G))',{
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  mcari1 = mcari1.rename(['MCARI1']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return mcari1;  
}

function MCARI2 (image)
{
  var mcari2 = image.expression(
    '(1.5 * (2.5 * (N - R) - 1.3 * (N - G))) / ((((2.0 * N + 1) ** 2) - (6.0 * N - 5 * (R ** 0.5)) - 0.5) ** 0.5)',{
    	'G' : image.select('B3'),
    	'R' : image.select('B4'), 
    	'N' : image.select('B8'),
    }
  );
  mcari2 = mcari2.rename(['MCARI2']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return mcari2;  
}

function MCARI705 (image)
{
  var mcari705 = image.expression(
    '((RE2 - RE1) - 0.2 * (RE2 - G)) * (RE2 / RE1)',{
    	'G' : image.select('B3'),
    	'RE1' :	image.select('B5'),
    	'RE2' :	image.select('B6'),
    }
  );
  mcari705 = mcari705.rename(['MCARI705']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return mcari705;  
}

function MCARIOSAVI (image)
{
  var mcariosavi = image.expression(
    '(((RE1 - R) - 0.2 * (RE1 - G)) * (RE1 / R)) / (1.16 * (N - R) / (N + R + 0.16))',{
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    	'RE1' :	image.select('B5'),
    	'N' : image.select('B8'),
    }
  );
  mcariosavi = mcariosavi.rename(['MCARIOSAVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return mcariosavi;  
}

function MCARIOSAVI705 (image)
{
  var mcariosavi705 = image.expression(
    '(((RE2 - RE1) - 0.2 * (RE2 - G)) * (RE2 / RE1)) / (1.16 * (RE2 - RE1) / (RE2 + RE1 + 0.16))',{
    	'G' : image.select('B2'),
    	'RE1' :	image.select('B5'),
    	'RE2' :	image.select('B6'),
    }
  );
  mcariosavi705 = mcariosavi705.rename(['MCARIOSAVI705']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return mcariosavi705;  
}

function MGRVI (image)
{
  var mgrvi = image.expression(
    '(G ** 2.0 - R ** 2.0) / (G ** 2.0 + R ** 2.0)',{
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    }
  );
  mgrvi = mgrvi.rename(['MGRVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return mgrvi;  
}

function MNDVI (image)
{
  var mndvi = image.expression(
    '(N - S2)/(N + S2)',{
    	'N' : image.select('B8'),
    	'S2' :	image.select('B12'),
    }
  );
  mndvi = mndvi.rename(['MNDVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return mndvi;  
}

function MNLI (image)
{
  var mnli = image.expression(
    '(1 + L)*((N ** 2) - R)/((N ** 2) + R + L)',{
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    	L : parseFloat(Lvalue.getValue()) 
    }
  );
  mnli = mnli.rename(['MNLI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return mnli;  
}

function MRBVI (image)
{
  var mrbvi = image.expression(
    '(R ** 2.0 - B ** 2.0)/(R ** 2.0 + B ** 2.0)',{
    	'B'	: image.select('B2'),
    	'R' : image.select('B4'),
    }
  );
  mrbvi = mrbvi.rename(['MRBVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return mrbvi;  
}

function MSAVI (image)
{
  var msavi = image.expression(
    '0.5 * (2.0 * N + 1 - (((2 * N + 1) ** 2) - 8 * (N - R)) ** 0.5)',{
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  msavi = msavi.rename(['MSAVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return msavi;  
}

function MSI (image)
{
  var msi = image.expression(
    'S1/N',{
    	'N' : image.select('B8'),
    	'S1' :	image.select('B11'),
    }
  );
  msi = msi.rename(['MSI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return msi;  
}

function MSR (image)
{
  var msr = image.expression(
    '(N / R - 1) / ((N / R + 1) ** 0.5)',{
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  msr = msr.rename(['MSR']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return msr;  
}

function MSR705 (image)
{
  var msr705 = image.expression(
    '(RE2 / RE1 - 1) / ((RE2 / RE1 + 1) ** 0.5)',{
    	'RE1' :	image.select('B5'),
    	'RE2' :	image.select('B6'),
    }
  );
  msr705 = msr705.rename(['MSR705']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return msr705;  
}

function MTCI (image)
{
  var mtci = image.expression(
    '(RE2 - RE1) / (RE1 - R)',{
    	'R' : image.select('B4'),
    	'RE1' :	image.select('B5'),
    	'RE2' :	image.select('B6'),
    }
  );
  mtci = mtci.rename(['MTCI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return mtci;  
}

function MTVI1 (image)
{
  var mtvi1 = image.expression(
    '1.2 * (1.2 * (N - G) - 2.5 * (R - G))',{
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  mtvi1 = mtvi1.rename(['MTVI1']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return mtvi1;  
}

function MTVI2 (image)
{
  var mtvi2 = image.expression(
    '(1.5 * (1.2 * (N - G) - 2.5 * (R - G))) / ((((2.0 * N + 1) ** 2) - (6.0 * N - 5 * (R ** 0.5)) - 0.5) ** 0.5)',{
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  mtvi2 = mtvi2.rename(['MTVI2']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return mtvi2;  
}

function ND705 (image)
{
  var nd705 = image.expression(
    '(RE2 - RE1)/(RE2 + RE1)',{
    	'RE1' :	image.select('B5'),
    	'RE2' :	image.select('B6'),
    }
  );
  nd705 = nd705.rename(['ND705']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return nd705;  
}

function NDDI (image)
{
  var nddi = image.expression(
    '(((N - R)/(N + R)) - ((G - N)/(G + N)))/(((N - R)/(N + R)) + ((G - N)/(G + N)))',{
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  nddi = nddi.rename(['NDDI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return nddi;  
}

function NDGI (image)
{
  var ndgi = image.expression(
    '(((lambdaN - lambdaR)/(lambdaN - lambdaG)) * G + (1.0 - ((lambdaN - lambdaR)/(lambdaN - lambdaG))) * N - R)/(((lambdaN - lambdaR)/(lambdaN - lambdaG)) * G + (1.0 - ((lambdaN - lambdaR)/(lambdaN - lambdaG))) * N + R)',{
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    	lambdaG : parseFloat(labdaGvalue.getValue()),
    	lamddaN : parseFloat(labdaNvalue.getValue()),
    	lambdaR : parseFloat(labdaRvalue.getValue())
    }
  );
  ndgi = ndgi.rename(['NDGI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ndgi;  
}

function NDII (image)
{
  var ndii = image.expression(
    '(N - S1)/(N + S1)',{
    	'N' : image.select('B8'),
    	'S1' :	image.select('B11'),
    }
  );
  ndii = ndii.rename(['NDII']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ndii;  
}

function NDMI (image) //NDII is also same formula
{
  var ndmi = image.expression(
    '(N - S1)/(N + S1)',{
    	'N' : image.select('B8'),
    	'S1' :	image.select('B11'),
    }
  );
  ndmi = ndmi.rename(['NDMI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ndmi;  
}

function NDPI(image)
{
  var ndpi = image.expression(
    '(N - (alpha * R + (1.0 - alpha) * S1))/(N + (alpha * R + (1.0 - alpha) * S1))',{
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    	'S1' :	image.select('B11'),
    	alpha : parseFloat(alphavalue.getValue())  
    }
  );
  ndpi = ndpi.rename(['NDPI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ndpi;  
}

function NDREI (image)
{
  var ndrei = image.expression(
    '(N - RE1) / (N + RE1)',{
    	'RE1' :	image.select('B5'),
    	'N' : image.select('B8'),
    }
  );
  ndrei = ndrei.rename(['NDREI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ndrei;  
}

function NDVI (image)
{
  var ndvi = image.expression(
    '(N - R)/(N + R)',{
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  ndvi = ndvi.rename(['NDVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ndvi;  
}

function NDYI (image)
{
  var ndyi = image.expression(
    '(G - B) / (G + B)',{
    	'B'	: image.select('B2'),
    	'G' : image.select('B3'),
    }
  );
  ndyi = ndyi.rename(['NDYI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ndyi;  
}

function NGRDI (image)
{
  var ngrdi = image.expression(
    '(G - R) / (G + R)',{
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    }
  );
  ngrdi = ngrdi.rename(['NGRDI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ngrdi;  
}

function NIRv (image)
{
  var nirv = image.expression(
    '((N - R) / (N + R)) * N',{
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  nirv = nirv.rename(['NIRv']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return nirv;  
}

function NIRvH2 (image)
{
  var nirvh2 = image.expression(
    'N - R - k * (lambdaN - lambdaR)',{
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    	lambdaR : parseFloat(lambdaRvalue.getValue()), 
    	lambdaN : parseFloat(lambdaNvalue.getValue()), 
    	k : parseFloat(kvalue.getValue())     	
    }
  );
  nirvh2 = nirvh2.rename(['NIRvH2']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return nirvh2;  
}

function NIRvP (image)
{
  var nirvp = image.expression(
    '((N - R) / (N + R)) * N * PAR',{
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
      PAR : parseFloat(PARvalue.getValue()) 
    }
  );
  nirvp = nirvp.rename(['NIRvP']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return nirvp;  
}

function NLI (image)
{
  var nli = image.expression(
    '((N ** 2) - R)/((N ** 2) + R)',{
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  nli = nli.rename(['NLI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return nli;  
}

function NMDI (image)
{
  var nmdi = image.expression(
    '(N - (S1 - S2))/(N + (S1 - S2))',{
    	'N' : image.select('B8'),
    	'N2' :	image.select('B8A'),
    	'S1' :	image.select('B11'),
    	'S2' :	image.select('B12'),
    }
  );
  nmdi = nmdi.rename(['NMDI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return nmdi;  
}

function NRFIg (image)
{
  var nrfig = image.expression(
    '(G - S2) / (G + S2)',{
    	'G' : image.select('B3'),
    	'S2' :	image.select('B12'),
    }
  );
  nrfig = nrfig.rename(['NRFIg']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return nrfig;  
}

function NRFIr (image)
{
  var nrfir = image.expression(
    '(R - S2) / (R + S2)',{
    	'R' : image.select('B4'),
    	'S2' :	image.select('B12'),
    }
  );
  nrfir = nrfir.rename(['NRFIr']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return nrfir;  
}

function NormG (image)
{
  var normg = image.expression(
    'G/(N + G + R)',{
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  normg = normg.rename(['NormG']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return normg;  
}

function NormNIR (image)
{
  var normnir = image.expression(
    'N/(N + G + R)',{
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  normnir = normnir.rename(['NormNIR']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return normnir;  
}

function NormR (image)
{
  var normr = image.expression(
    'R/(N + G + R)',{
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  normr = normr.rename(['NormR']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return normr;  
}

function OCVI (image)
{
  var ocvi = image.expression(
    '(N / G) * (R / G) ** cexp',{
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    	'cexp' : 1.16 
    }
  );
  ocvi = ocvi.rename(['OCVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ocvi;  
}

function OSAVI (image)
{
  var osavi = image.expression(
    '(N - R) / (N + R + 0.16)',{
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  osavi = osavi.rename(['OSAVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return osavi;  
}

function PSRI (image)
{
  var psri = image.expression(
    '(R - B)/RE2',{
    	'B'	: image.select('B2'),
    	'R' : image.select('B4'),
    	'RE2' :	image.select('B6'),
    }
  );
  psri = psri.rename(['PSRI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return psri;  
}

function RCC (image)
{
  var rcc = image.expression(
    'R / (R + G + B)',{
    	'B'	: image.select('B2'),
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    }
  );
  rcc = rcc.rename(['RCC']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return rcc;  
}

function RDVI (image)
{
  var rdvi = image.expression(
    '(N - R) / ((N + R) ** 0.5)',{
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  rdvi = rdvi.rename(['RDVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return rdvi;  
}

function REDSI (image)
{
  var redsi = image.expression(
    '((705.0 - 665.0) * (RE3 - R) - (783.0 - 665.0) * (RE1 - R)) / (2.0 * R)',{
    	'R' : image.select('B4'),
    	'RE1' :	image.select('B5'),
    	'RE3' :	image.select('B7'),
    }
  );
  redsi = redsi.rename(['REDSI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return redsi;  
}

function RGBVI (image)
{
  var rgbvi = image.expression(
    '(G ** 2.0 - B * R)/(G ** 2.0 + B * R)',{
    	'B'	: image.select('B2'),
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    }
  );
  rgbvi = rgbvi.rename(['RGBVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return rgbvi;  
}

function RGRI (image)
{
  var rgri = image.expression(
    'R/G',{
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    }
  );
  rgri = rgri.rename(['RGRI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return rgri;  
}

function RI (image)
{
  var ri = image.expression(
    '(R - G)/(R + G)',{
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    }
  );
  ri = ri.rename(['RI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ri;  
}

function RVI (image)
{
  var rvi = image.expression(
    'RE2 / R',{
    	'R' : image.select('B4'),
    	'RE2' :	image.select('B6'),
    }
  );
  rvi = rvi.rename(['RVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return rvi;  
}

function S2REP (image)
{
  var s2rep = image.expression(
    '705.0 + 35.0 * ((((RE3 + R) / 2.0) - RE1) / (RE2 - RE1))',{
    	'R' : image.select('B4'),
    	'RE1' :	image.select('B5'),
    	'RE2' :	image.select('B6'),
    	'RE3' :	image.select('B7'),
    }
  );
  s2rep = s2rep.rename(['S2REP']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return s2rep;  
}

function SARVI (image)
{
  var sarvi = image.expression(
    '(1 + L)*(N - (R - (R - B))) / (N + (R - (R - B)) + L)',{
    	'B'	: image.select('B2'),
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    	L : parseFloat(Lvalue.getValue()) 
    }
  );
  sarvi = sarvi.rename(['SARVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return sarvi;  
}

function SAVI (image)
{
  var savi = image.expression(
    '(1.0 + L) * (N - R) / (N + R + L)',{
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    	L : parseFloat(Lvalue.getValue()) 
    }
  );
  sarvi = sarvi.rename(['SAVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return sarvi;  
}

function SAVI2 (image)
{
  var savi2 = image.expression(
    'N / (R + (slb / sla))',{
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    	sla : parseFloat(slavalue.getValue()),
    	slb : parseFloat(slbvalue.getValue())
    }
  );
  savi2 = savi2.rename(['SAVI2']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return savi2;  
}

function SEVI (image)
{
  var sevi = image.expression(
    '(N/R) + fdelta * (1.0/R)',{
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    	fdelta : parseFloat(fdeltavalue.getValue())
    }
  );
  sevi = sevi.rename(['SEVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return sevi;  
}

function SI (image)
{
  var si = image.expression(
    '((1.0 - B) * (1.0 - G) * (1.0 - R)) ** (1/3)',{
    	'B'	: image.select('B2'),
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    }
  );
  si = si.rename(['SI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return si;  
}

function SIPI (image)
{
  var sipi = image.expression(
    '(N - A) / (N - R)',{
    	'A'	: image.select('B1'),
    	'N' : image.select('B8'),
    	'R' : image.select('B4'),
    }
  );
  sipi = sipi.rename(['SIPI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return sipi;  
}

function SR (image)
{
  var sr = image.expression(
    'N/R',{
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  sr = sr.rename(['SR']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return sr;  
}

function SR2 (image)
{
  var sr2 = image.expression(
    'N/R',{
    	'G' : image.select('B3'),
    	'N' : image.select('B8'),
    }
  );
  sr2 = sr2.rename(['SR2']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return sr2;  
}

function SR3 (image)
{
  var sr3 = image.expression(
    'N2/(G * RE1)',{
    	'G' : image.select('B3'),
    	'RE1' :	image.select('B5'),
    	'N2' : image.select('B8A'),
    }
  );
  sr3 = sr3.rename(['SR3']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return sr3;  
}

function SR555 (image)
{
  var sr555 = image.expression(
    'RE2 / G',{
    	'G' : image.select('B3'),
    	'RE2' :	image.select('B6'),
    }
  );
  sr555 = sr555.rename(['SR555']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return sr555;  
}

function SR705 (image)
{
  var sr705 = image.expression(
    'RE2 / G',{
    	'RE1' : image.select('B5'),
    	'G' :	image.select('B3'),
    }
  );
  sr705 = sr705.rename(['SR705']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return sr705;  
}

function SeLI (image)
{
  var seli = image.expression(
    '(N2 - RE1) / (N2 + RE1)',{
    	'RE1' : image.select('B5'),
    	'N2' :	image.select('B8A'),
    }
  );
  seli = seli.rename(['SeLI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return seli;  
}

function TCARI (image)
{
  var tcari = image.expression(
    '3 * ((RE1 - R) - 0.2 * (RE1 - G) * (RE1 / R))',{
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    	'RE1' :	image.select('B5'),
    }
  );
  tcari = tcari.rename(['TCARI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return tcari;  
}

function TCARIOSAVI (image)
{
  var tcariosavi = image.expression(
    '(3 * ((RE1 - R) - 0.2 * (RE1 - G) * (RE1 / R))) / (1.16 * (N - R) / (N + R + 0.16))',{
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    	'RE1' :	image.select('B5'),
    	'N' : image.select('B8')
    }
  );
  tcariosavi = tcariosavi.rename(['TCARIOSAVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return tcariosavi;  
}

function TCARIOSAVI705 (image)
{
  var tcariosavi705 = image.expression(
    '(3 * ((RE2 - RE1) - 0.2 * (RE2 - G) * (RE2 / RE1))) / (1.16 * (RE2 - RE1) / (RE2 + RE1 + 0.16))',{
    	'G' : image.select('B3'),
    	'RE1' :	image.select('B5'),
    	'RE2' :	image.select('B6'),
    }
  );
  tcariosavi705 = tcariosavi705.rename(['TCARIOSAVI705']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return tcariosavi705;  
}

function TCI (image)
{
  var tci = image.expression(
    '1.2 * (RE1 - G) - 1.5 * (R - G) * (RE1 / R) ** 0.5',{
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    	'RE1' :	image.select('B5'),
    }
  );
  tci = tci.rename(['TCI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return tci;  
}

function TDVI (image)
{
  var tdvi = image.expression(
    '1.5 * ((N - R)/((N ** 2.0 + R + 0.5) ** 0.5))',{
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  tdvi = tdvi.rename(['TDVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return tdvi;  
}

function TGI (image)
{
  var tgi = image.expression(
    '- 0.5 * (190 * (R - G) - 120 * (R - B))',{
    	'B'	: image.select('B2'),
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    }
  );
  tgi = tgi.rename(['TGI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return tgi;
}

function TRRVI (image)
{
  var trrvi = image.expression(
    '((RE2 - R) / (RE2 + R)) / (((N - R) / (N + R)) + 1.0)',{
    	'R' : image.select('B4'),
    	'RE2' :	image.select('B6'),
    	'N' : image.select('B8'),
    }
  );
  trrvi = trrvi.rename(['TRRVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return trrvi;  
}

function TSAVI (image)
{
  var tsavi = image.expression(
    'sla * (N - sla * R - slb) / (sla * N + R - sla * slb)',{
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    	sla : parseFloat(slavalue.getValue()),
    	slb : parseFloat(slbvalue.getValue())     	
    }
  );
  tsavi = tsavi.rename(['TSAVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return tsavi;
}

function TTVI (image)
{
  var ttvi = image.expression(
    '0.5 * ((865.0 - 740.0) * (RE3 - RE2) - (N2 - RE2) * (783.0 - 740))',{
    	'RE2' :	image.select('B6'),
    	'RE3' :	image.select('B7'),
    	'N2' :	image.select('B8A'),
    }
  );
  ttvi = ttvi.rename(['TTVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ttvi;  
}

function TVI (image)
{
  var tvi = image.expression(
    '(((N - R)/(N + R)) + 0.5) ** 0.5',{
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    }
  );
  tvi = tvi.rename(['TVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return tvi;  
}

function TriVI (image)
{
  var trivi = image.expression(
    '0.5 * (120 * (N - G) - 200 * (R - G))',{
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
      'N'	: image.select('B8'),
    }
  );
  trivi = trivi.rename(['TriVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return trivi;  
}


function VARI (image)
{
  var vari = image.expression(
    '(G - R) / (G + R - B)',{
    	'B'	: image.select('B2'),
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    }
  );
  vari = vari.rename(['VARI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return vari;  
}

function VARI700 (image)
{
  var vari700 = image.expression(
    '(RE1 - 1.7 * R + 0.7 * B) / (RE1 + 1.3 * R - 1.3 * B)',{
    	'B'	: image.select('B2'),
    	'R' : image.select('B4'),
    	'RE1' :	image.select('B5'),
    }
  );
  vari700 = vari700.rename(['VARI700']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return vari700;  
}

function VI700 (image)
{
  var vi700 = image.expression(
    '(RE1 - R) / (RE1 + R)',{
    	'R' : image.select('B4'),
    	'RE1' :	image.select('B5'),
    }
  );
  vi700 = vi700.rename(['VI700']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return vi700;  
}

function VIG (image)
{
  var vig = image.expression(
    '(G - R) / (G + R)',{
    	'G' : image.select('B2'),
    	'R' :	image.select('B4'),
    }
  );
  vig = vig.rename(['VIG']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return vig;  
}

function WDRVI (image)
{
  var wdrvi = image.expression(
    '(alpha * N - R) / (alpha * N + R)',{
    	'N' : image.select('B8'),
    	'R' :	image.select('B4'),
    	alpha : parseFloat(alphavalue.getValue()) 
    }
  );
  wdrvi = wdrvi.rename(['WDRVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return wdrvi;  
}

function WDVI (image)
{
  var wdvi = image.expression(
    'N - sla * R',{
    	'N' : image.select('B8'),
    	'R' :	image.select('B4'),
    	sla : parseFloat(slavalue.getValue()) 
    }
  );
  wdvi = wdvi.rename(['WDVI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return wdvi;  
}

function mND705 (image)
{
  var mnd705 = image.expression(
    '(RE2 - RE1)/(RE2 + RE1 - A)',{
    	'A' : image.select('B1'),
    	'RE1' : image.select('B5'),
    	'RE2' :	image.select('B6'),
    }
  );
  mnd705 = mnd705.rename(['mND705']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return mnd705;  
}

function mSR705 (image)
{
  var msr705 = image.expression(
    '(RE2 - A)/(RE2 + A)',{
    	'A' : image.select('B1'),
    	'RE2' :	image.select('B6'),
    }
  );
  msr705 = msr705.rename(['mSR705']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return msr705;  
}

///////////////////////////////////////////////////// Burn /////////////////////////////////////////////////////////////////////////////////////////

function BAI (image)
{
  var bai = image.expression(
    '1.0 / ((0.1 - R) ** 2.0 + (0.06 - N) ** 2.0)',{
    	'N' : image.select('B8'),
    	'R' :	image.select('B4'),
    }
  );
  bai = bai.rename(['BAI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return bai;  
}

function BAIM (image)
{
  var baim = image.expression(
    '1.0/((0.05 - N) ** 2.0) + ((0.2 - S2) ** 2.0)',{
    	'N' : image.select('B8'),
    	'S2' :	image.select('B12'),
    }
  );
  baim = baim.rename(['BAIM']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return baim;  
}

function BAIS2 (image)
{
  var bais2 = image.expression(
    '(1.0 - ((RE2 * RE3 * N2) / R) ** 0.5) * (((S2 - N2)/(S2 + N2) ** 0.5) + 1.0)',{
    	'R' : image.select('B4'),
    	'RE2' :	image.select('B6'),
    	'RE3' :	image.select('B7'),
    	'N2' :	image.select('B8A'),
    	'S2' :	image.select('B12'),
    }
  );
  bais2 = bais2.rename(['BAIS2']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return bais2;  
}

function CSI (image)
{
  var csi = image.expression(
    'N/S2',{
    	'N' : image.select('B8'),
    	'S2' :	image.select('B12'),
    }
  );
  csi = csi.rename(['CSI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return csi;  
}

function MIRBI (image)
{
  var mirbi = image.expression(
    '10.0 * S2 - 9.8 * S1 + 2.0',{
    	'S1' : image.select('B11'),
    	'S2' :	image.select('B12'),
    }
  );
  mirbi = mirbi.rename(['MIRBI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return mirbi;  
}

function NBR (image)
{
  var nbr = image.expression(
    '(N - S2) / (N + S2)',{
    	'N' : image.select('B8'),
    	'S2' :	image.select('B12'),
    }
  );
  nbr = nbr.rename(['NBR']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return nbr;  
}

function NBR2 (image)
{
  var nbr2 = image.expression(
    '(S1 - S2) / (S1 + S2)',{
    	'S1' : image.select('B11'),
    	'S2' :	image.select('B12'),
    }
  );
  nbr2 = nbr2.rename(['NBR2']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return nbr2;  
}

function NBRSWIR (image)
{
  var nbrswir2 = image.expression(
    '(S2 - S1 - 0.02)/(S2 + S1 + 0.1)',{
    	'S1' : image.select('B11'),
    	'S2' :	image.select('B12'),
    }
  );
  nbrswir2 = nbrswir2.rename(['NBRSWIR']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return nbrswir2;  
}

function NBRplus (image)
{
  var nbrplus = image.expression(
    '(S2 - N2 - G - B)/(S2 + N2 + G + B)',{
    	'B'	: image.select('B2'),
    	'G' : image.select('B3'),
    	'N2' :	image.select('B8A'),
    	'S2' :	image.select('B12'),
    }
  );
  nbrplus = nbrplus.rename(['NBRplus']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return nbrplus;  
}

function NDSWIR (image)
{
  var ndswir = image.expression(
    '(N - S1)/(N + S1)',{
    	'N' :	image.select('B8'),
    	'S1' :	image.select('B11'),
    }
  );
  ndswir = ndswir.rename(['NDSWIR']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ndswir;  
}

/////////////////////////////////////////////////////// WATER ////////////////////////////////////////////////////////////////////////////

function NDWI (image)
{
  var ndwi = image.expression(
    '(B + G + R - N - S1 - S2)/(B + G + R + N + S1 + S2)',{
    	'B'	: image.select('B2'),
    	'G' : image.select('B3'),
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    	'S1' :	image.select('B11'),
    	'S2' :	image.select('B12'),
    }
  );
  ndwi = ndwi.rename(['NDWI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ndwi;  
}

function AWEInsh (image)
{
  var aweinsh = image.expression(
    '4.0 * (G - S1) - 0.25 * N + 2.75 * S2',{
    	'G' : image.select('B3'),
    	'N' : image.select('B8'),
    	'S1' :	image.select('B11'),
    	'S2' :	image.select('B12'),    	
    }
  );
  aweinsh = aweinsh.rename(['AWEInsh']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return aweinsh;  
}

function AWEIsh (image)
{
  var aweish = image.expression(
    'B + 2.5 * G - 1.5 * (N + S1) - 0.25 * S2',{
    	'B'	: image.select('B2'),
    	'G' : image.select('B3'),
    	'N' : image.select('B8'),
    	'S1' :	image.select('B11'),
    }
  );
  aweish = aweish.rename(['AWEIsh']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return aweish;  
}

function LSWI (image)
{
  var lswi = image.expression(
    '(N - S1)/(N + S1)',{
    	'N' : image.select('B8'),
    	'S1' :	image.select('B11'),
    }
  );
  lswi = lswi.rename(['lswi']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return lswi;  
}

function MBWI (image)
{
  var mbwi = image.expression(
    '(2 * G) - R - N - S1 - S2',{
    	'G'	: image.select('B3'),
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    	'S1' :	image.select('B11'),
    	'S2' :	image.select('B12'),
    }
  );
  mbwi = mbwi.rename(['MBWI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return mbwi;  
}

function MLSWI26 (image)
{
  var mlswi26 = image.expression(
    '(1.0 - N - S1)/(1.0 - N + S1)',{
    	'N' : image.select('B8'),
    	'S1' :	image.select('B11'),
    }
  );
  mlswi26 = mlswi26.rename(['MLSWI26']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return mlswi26;  
}

function MLSWI27 (image)
{
  var mlswi27 = image.expression(
    '(1.0 - N - S2)/(1.0 - N + S2)',{
    	'N' : image.select('B8'),
    	'S2' :	image.select('B12'),
    }
  );
  mlswi27 = mlswi27.rename(['MLSWI27']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return mlswi27;  
}

function MNDWI (image)
{
  var mndwi = image.expression(
    '(G - S1) / (G + S1)',{
    	'G' : image.select('B3'),
    	'S1' :	image.select('B11'),
    }
  );
  mndwi = mndwi.rename(['MNDWI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return mndwi;  
}

function MuWIR (image)
{
  var muwir = image.expression(
    '-4.0 * ((B - G)/(B + G)) + 2.0 * ((G - N)/(G + N)) + 2.0 * ((G - S2)/(G + S2)) - ((G - S1)/(G + S1))',{
    	'B'	: image.select('B2'),
    	'G'	: image.select('B3'),
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    	'S1' :	image.select('B11'),
    	'S2' :	image.select('B12'),
    }
  );
  muwir = muwir.rename(['MuWIR']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return muwir;  
}

function NDCI (image)
{
  var ndci = image.expression(
    '(RE1 - R)/(RE1 + R)',{
    	'R' : image.select('B4'),
    	'RE1' :	image.select('B5'),
    }
  );
  ndci = ndci.rename(['NDCI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ndci;  
}

function NDPonI (image)
{
  var ndponi = image.expression(
    '(S1-G)/(S1+G)',{
    	'G'	: image.select('B3'),
    	'S1' :	image.select('B11'),
    }
  );
  ndponi = ndponi.rename(['NDPonI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ndponi;  
}

function NDTI (image)
{
  var ndti = image.expression(
    '(R-G)/(R+G)',{
    	'G'	: image.select('B3'),
    	'R' :	image.select('B4'),
    }
  );
  ndti = ndti.rename(['NDTI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ndti;  
}

function NDVIMNDWI (image)
{
  var ndvimndwi = image.expression(
    '((N - R)/(N + R)) - ((G - S1)/(G + S1))',{
    	'G'	: image.select('B3'),
    	'R' : image.select('B4'),
    	'N' : image.select('B8'),
    	'S1' :	image.select('B11'),
    }
  );
  ndvimndwi = ndvimndwi.rename(['NDVIMNDWI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ndvimndwi;  
}

function NDWI (image)
{
  var ndwi = image.expression(
    '(G - N) / (G + N)',{
    	'G'	: image.select('B3'),
    	'N' : image.select('B8'),
    }
  );
  ndwi = ndwi.rename(['NDWI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ndwi;  
}

function NDWIns (image)
{
  var ndwins = image.expression(
    '(G - alpha * N)/(G + N)',{
    	'G'	: image.select('B3'),
    	'N' : image.select('B8'),
    	alpha : parseFloat(alphavalue.getValue())
    }
  );
  ndwins = ndwins.rename(['NDWIns']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ndwins;  
}

function NSDSI1 (image)
{
  var nsdsi1 = image.expression(
    '(S1-S2)/S1',{
    	'S1'	: image.select('B11'),
    	'S2' : image.select('B12'),
    }
  );
  nsdsi1 = nsdsi1.rename(['NSDSI1']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return nsdsi1;  
}

function NSDSI2 (image)
{
  var nsdsi2 = image.expression(
    '(S1-S2)/S2',{
    	'S1'	: image.select('B11'),
    	'S2' : image.select('B12'),
    }
  );
  nsdsi2 = nsdsi2.rename(['NSDSI2']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return nsdsi2;  
}

function NSDSI3 (image)
{
  var nsdsi3 = image.expression(
    '(S1-S2)/(S1+S2)',{
    	'S1'	: image.select('B11'),
    	'S2' : image.select('B12'),
    }
  );
  nsdsi3 = nsdsi3.rename(['NSDSI3']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return nsdsi3;  
}

function NWI (image)
{
  var nwi = image.expression(
    '(B - (N + S1 + S2))/(B + (N + S1 + S2))',{
    	'B'	: image.select('B2'),
    	'N' : image.select('B8'),
    	'S1'	: image.select('B11'),
    	'S2' : image.select('B12'),
    }
  );
  nwi = nwi.rename(['NWI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return nwi;  
}

function S2WI (image)
{
  var s2wi = image.expression(
    '(RE1 - S2)/(RE1 + S2)',{
    	'RE1'	: image.select('B5'),
    	'S2' : image.select('B12'),
    }
  );
  s2wi = s2wi.rename(['S2WI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return s2wi;  
}

function SWM (image)
{
  var swm = image.expression(
    '(B + G)/(N + S1)',{
    	'B'	: image.select('B2'),
    	'G'	: image.select('B3'),
    	'N' : image.select('B8'),      
    	'S1' : image.select('B11'),
    }
  );
  swm = swm.rename(['SWM']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return swm;  
}

function WI1 (image)
{
  var wi1 = image.expression(
    '(G - S2) / (G + S2)',{
    	'G'	: image.select('B3'),
    	'S2' : image.select('B12'),
    }
  );
  wi1 = wi1.rename(['WI1']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return wi1;  
}

function WI2 (image)
{
  var wi2 = image.expression(
    '(B - S2) / (B + S2)',{
    	'B'	: image.select('B2'),
    	'S2' : image.select('B12'),
    }
  );
  wi2 = wi2.rename(['WI2']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return wi2;  
}

function WRI (image)
{
  var wri = image.expression(
    '(G + R)/(N + S1)',{
    	'G'	: image.select('B3'),
    	'R'	: image.select('B4'),
    	'N' : image.select('B8'),      
    	'S1' : image.select('B11'),
    }
  );
  wri = wri.rename(['WRI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return wri;  
}

////////////////////////////////////////////////////////// SNOW ///////////////////////////////////////////////////////////////////

function NBSIMS (image)
{
  var nbsims = image.expression(
    '0.36 * (G + R + N) - (((B + S2)/G) + S1)',{
    	'G'	: image.select('B3'),
    	'R'	: image.select('B4'),
    	'N' : image.select('B8'),      
    	'S1' : image.select('B11'),
    	'S2' : image.select('B12'),
    }
  );
  nbsims = nbsims.rename(['NBSIMS']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return nbsims;  
}

function NDGlal (image)
{
  var ndglal = image.expression(
    '(G - R)/(G + R)',{
    	'G'	: image.select('B3'),
    	'R' :	image.select('B4'),
    }
  );
  ndglal = ndglal.rename(['NDGlal']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ndglal;  
}

function NDSI (image)
{
  var ndsi = image.expression(
    '(G - S1) / (G + S1)',{
    	'G'	: image.select('B3'),
    	'S1' :	image.select('B11'),
    }
  );
  ndsi = ndsi.rename(['NDSI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ndsi;  
}

function NDSII (image)
{
  var ndsii = image.expression(
    '(G - N)/(G + N)',{
    	'G'	: image.select('B3'),
    	'N' :	image.select('B8'),
    }
  );
  ndsii = ndsii.rename(['NDSII']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ndsii;  
}

function NDSInw (image)
{
  var ndsinw = image.expression(
    '(G - S1 - beta) / (G + S1)',{
    	'G'	: image.select('B3'),
    	'S1' :	image.select('B11'),
    	beta : parseFloat(betavalue.getValue())
    }
  );
  ndsinw = ndsinw.rename(['NDSInw']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ndsinw;  
}

function NDSall (image)
{
  var ndsall = image.expression(
    '(G - S1 - beta) / (G + S1)',{
    	'G'	: image.select('B3'),
    	'S1' :	image.select('B11'),
    }
  );
  ndsall = ndsall.rename(['NDSall']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ndsall;  
}

function S3 (image)
{
  var s3 = image.expression(
    '(N * (R - S1)) / ((N + R) * (N + S1))',{
    	'G'	: image.select('B3'),
    	'R'	: image.select('B4'),
    	'N' : image.select('B8'),      
    	'S1' : image.select('B11'),
    	'S2' : image.select('B12'),
    }
  );
  s3 = s3.rename(['S3']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return s3;  
}

function SWI (image)
{
  var swi = image.expression(
    '(G * (N - S1)) / ((G + N) * (N + S1))',{
    	'G'	: image.select('B3'),
    	'R'	: image.select('B4'),
    	'N' : image.select('B8'),      
    	'S1' : image.select('B11'),
    	'S2' : image.select('B12'),
    }
  );
  swi = swi.rename(['SWI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return swi;  
}

///////////////////////////////////////////////////////// URBAN ///////////////////////////////////////////////////////////////

function BI (image)
{
  var bi = image.expression(
    '((S1 + R) - (N + B))/((S1 + R) + (N + B))',{
    	'B'	: image.select('B2'),
    	'G'	: image.select('B3'),
    	'R'	: image.select('B4'),
    	'N' : image.select('B8'),      
    	'S1' : image.select('B11'),
    	'S2' : image.select('B12'),
    }
  );
  bi = bi.rename(['BI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return bi;  
}

function BLFEI (image)
{
  var blfei = image.expression(
    '(((G+R+S2)/3.0)-S1)/(((G+R+S2)/3.0)+S1)',{
    	'G'	: image.select('B3'),
    	'R'	: image.select('B4'),
    	'S1' : image.select('B11'),
    	'S2' : image.select('B12'),
    }
  );
  blfei = blfei.rename(['BLFEI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return blfei;  
}

function BRBA (image)
{
  var brba = image.expression(
    'R/S1',{
    	'R'	: image.select('B4'),
    	'S1' :	image.select('B11'),
    }
  );
  brba = brba.rename(['BRBA']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return brba;  
}

function Bal (image)
{
  var bal = image.expression(
    'R + S1 - N',{
    	'R'	: image.select('B4'),
    	'N' : image.select('B8'),      
    	'S1' : image.select('B11'),
    }
  );
  bal = bal.rename(['Bal']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return bal;  
}

function DBSI (image)
{
  var dbsi = image.expression(
    '((S1 - G)/(S1 + G)) - ((N - R)/(N + R))',{
    	'G'	: image.select('B3'),
    	'R'	: image.select('B4'),
    	'N' : image.select('B8'),      
    	'S1' : image.select('B11'),
    }
  );
  dbsi = dbsi.rename(['DBSI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return dbsi;  
}

function EMBI (image)
{
  var embi = image.expression(
    '((((S1 - S2 - N)/(S1 + S2 + N)) + 0.5) - ((G - S1)/(G + S1)) - 0.5)/((((S1 - S2 - N)/(S1 + S2 + N)) + 0.5) + ((G - S1)/(G + S1)) + 1.5)',{
    	'B'	: image.select('B2'),
    	'G'	: image.select('B3'),
    	'R'	: image.select('B4'),
    	'N' : image.select('B8'),      
    	'S1' : image.select('B11'),
    	'S2' : image.select('B12'),
    }
  );
  embi = embi.rename(['EMBI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return embi;  
}

function IBI (image)
{
  var ibi = image.expression(
    '(((S1-N)/(S1+N))-(((N-R)*(1.0+L)/(N+R+L))+((G-S1)/(G+S1)))/2.0)/(((S1-N)/(S1+N))+(((N-R)*(1.0+L)/(N+R+L))+((G-S1)/(G+S1)))/2.0)',{
    	'G'	: image.select('B3'),
    	'R'	: image.select('B4'),
    	'N' : image.select('B8'),      
    	'S1' : image.select('B11'),
    	'S2' : image.select('B12'),
    	L : parseFloat(Lvalue.getValue())
    }
  );
  ibi = ibi.rename(['IBI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ibi;  
}

function MBI (image)
{
  var mbi = image.expression(
    '((S1 - S2 - N)/(S1 + S2 + N)) + 0.5',{
    	'N' : image.select('B8'),      
    	'S1' : image.select('B11'),
    	'S2' : image.select('B12'),
    }
  );
  mbi = mbi.rename(['MBI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return mbi;  
}

function NMAI (image)
{
  var mbi = image.expression(
    '((S2 - S1)/G)/((S2 + S1)/G)',{
    	'G'	: image.select('B3'),
    	'S1' : image.select('B11'),
    	'S2' : image.select('B12'),
    }
  );
  mbi = mbi.rename(['NMAI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return mbi;  
}

function NDBI (image)
{
  var ndbi = image.expression(
    '(S1 - N) / (S1 + N)',{
    	'N' : image.select('B8'),      
    	'S1' : image.select('B11'),
    }
  );
  ndbi = ndbi.rename(['NDBI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ndbi;  
}

function NDSoil (image)
{
  var ndsoil = image.expression(
    '(S2 - G)/(S2 + G)',{
    	'G' : image.select('B3'),      
    	'S2' : image.select('B12'),
    }
  );
  ndsoil = ndsoil.rename(['NDSoil']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return ndsoil;  
}

function NHFD (image)
{
  var nhfd = image.expression(
    '(RE1 - A) / (RE1 + A)',{
    	'A' : image.select('B1'),      
    	'RE1' : image.select('B5'),
    }
  );
  nhfd = nhfd.rename(['NDFD']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return nhfd;  
}

function NSDS (image)
{
  var nsds = image.expression(
    '(S1 - S2)/(S1 + S2)',{
    	'S1' : image.select('B11'),      
    	'S2' : image.select('B12'),
    }
  );
  nsds = nsds.rename(['NSDS']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return nsds;  
}

function PISI (image)
{
  var pisi = image.expression(
    '0.8192 * B - 0.5735 * N + 0.0750',{
    	'B' : image.select('B2'),      
    	'N' : image.select('B8'),
    }
  );
  pisi = pisi.rename(['PISI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return pisi;  
}

function UI (image)
{
  var u1 = image.expression(
    '(S2 - N)/(S2 + N)',{
    	'N' : image.select('B8'),      
    	'S1' : image.select('B11'),
    }
  );
  u1 = u1.rename(['UI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return u1;  
}

function VIBI (image)
{
  var vibi = image.expression(
    '((N-R)/(N+R))/(((N-R)/(N+R)) + ((S1-N)/(S1+N)))',{
      'R' : image.select('B4'),    	
    	'N' : image.select('B8'),      
    	'S1' : image.select('B11'),
    }
  );
  vibi = vibi.rename(['VIBI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return vibi;  
}

function VGNIRBI (image)
{
  var vgnirbi = image.expression(
    '(G - N)/(G + N)',{
      'G' : image.select('B3'),    	
    	'N' : image.select('B8'),      
    }
  );
  vgnirbi = vgnirbi.rename(['VGNIRBI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return vgnirbi;  
}

function VRNIRBI (image)
{
  var vrnirbi = image.expression(
    '(R - N)/(R + N)',{
      'R' : image.select('B4'),    	
    	'N' : image.select('B8'),      
    }
  );
  vrnirbi = vrnirbi.rename(['VRNIRBI']).float().copyProperties(image, ["system:time_start", "satelite", "sensor", "tile", ]);
  return vrnirbi;  
}

////////////////////////////////////////////////////// LISTS ////////////////////////////////////////////////////////////////////////////

var soildatalist = ui.Select({
  items:[
    {	label	:	 "1 	.	CEC"	,	value	:	0	}	,
    {	label	:	 "2 	.	Clay"	,	value	:	1	}	,
    {	label	:	 "3 	.	Cu"		,	value	:	2	}	,
    {	label	:	 "4 	.	EXK"	,	value	:	3	}	,
    {	label	:	 "5 	.	ExCa"	,	value	:	4	}	,
    {	label	:	 "6 	.	ExNa"	,	value	:	5	}	,
    {	label	:	 "7 	.	Fe"		,	value	:	6	}	,
    {	label	:	 "8 	.	K"		,	value	:	7	}	,
    {	label	:	 "9 	.	Mn"		,	value	:	8	}	,
    {	label	:	 "10 	.	N"		,	value	:	9	}	,
    {	label	:	 "11 	.	P"		,	value	:	10	}	,
    {	label	:	 "12 	.	PBS"	,	value	:	11	}	,
    {	label	:	 "13 	.	pH"		,	value	:	12	}	,
    {	label	:	 "14 	.	S"		,	value	:	13	}	,
    {	label	:	 "15 	.	Zn"		,	value	:	14	}	,
    {	label	:	 "16 	.	Sand"	,	value	:	15	}	,
    {	label	:	 "17 	.	Silt"	,	value	:	16	}	,
    {	label	:	 "18 	.	ExMg"	,	value	:	17	}	
  ]
})

///////////////////////////////////////////////////////Sentinel 1 Indices ////////////////////////////////////////////////////////////////////

var sarindices = ui.Select({
  items: [
    {	label	:	"	1	.	DPDD	"	,	value	:	0	}	,
    {	label	:	"	2	.	DpRVIVV	"	,	value	:	1	}	,
    {	label	:	"	3	.	NDPoII	"	,	value	:	2	}	,
    {	label	:	"	4	.	VDDPI	"	,	value	:	3	}	,
    {	label	:	"	5	.	VHVVD	"	,	value	:	4	}	,
    {	label	:	"	6	.	VHVVP	"	,	value	:	5	}	,
    {	label	:	"	7	.	VHVVR	"	,	value	:	6	}	,
    {	label	:	"	8	.	VVVHD	"	,	value	:	7	}	,
    {	label	:	"	9	.	VVVHR	"	,	value	:	8	}	,
    {	label	:	"	10	.	VVVHS	"	,	value	:	9	}	,
  ],
  value: 0,
  style: {padding: '0px 0px 0px 0px'},
});


////////////////////////////////////////////////////// Sentinel 2 Indices /////////////////////////////////////////////////////////////////// 

/////////////////////////////////////////////////////// Vegetation ///////////////////////////////////////////////////////////////////////

var vegetationindices = ui.Select({
  items: [
    {	label	:	"	1	.	AFRI1600	"	,	value	:	0	}	,
    {	label	:	"	2	.	AFRI2100	"	,	value	:	1	}	,
    {	label	:	"	3	.	ARI	"	,	value	:	2	}	,
    {	label	:	"	4	.	ARI2	"	,	value	:	3	}	,
    {	label	:	"	5	.	ARVI	"	,	value	:	4	}	,
    {	label	:	"	6	.	ATSAVI	"	,	value	:	5	}	,
    {	label	:	"	7	.	AVI	"	,	value	:	6	}	,
    {	label	:	"	8	.	BCC	"	,	value	:	7	}	,
    {	label	:	"	9	.	BNDVI	"	,	value	:	8	}	,
    {	label	:	"	10	.	BWDRVI	"	,	value	:	9	}	,
    {	label	:	"	11	.	CIG	"	,	value	:	10	}	,
    {	label	:	"	12	.	CIRE	"	,	value	:	11	}	,
    {	label	:	"	13	.	CVI	"	,	value	:	12	}	,
    {	label	:	"	14	.	DVI	"	,	value	:	13	}	,
    {	label	:	"	15	.	DVIplus	"	,	value	:	14	}	,
    {	label	:	"	16	.	EVI	"	,	value	:	15	}	,
    {	label	:	"	17	.	EVI2	"	,	value	:	16	}	,
    {	label	:	"	18	.	ExG	"	,	value	:	17	}	,
    {	label	:	"	19	.	ExGR	"	,	value	:	18	}	,
    {	label	:	"	20	.	ExR	"	,	value	:	19	}	,
    {	label	:	"	21	.	FCVI	"	,	value	:	20	}	,
    {	label	:	"	22	.	GARI	"	,	value	:	21	}	,
    {	label	:	"	23	.	GBNDVI	"	,	value	:	22	}	,
    {	label	:	"	24	.	GCC	"	,	value	:	23	}	,
    {	label	:	"	25	.	GDVI	"	,	value	:	24	}	,
    {	label	:	"	26	.	GEMI	"	,	value	:	25	}	,
    {	label	:	"	27	.	GLI	"	,	value	:	26	}	,
    {	label	:	"	28	.	GM1	"	,	value	:	27	}	,
    {	label	:	"	29	.	GM2	"	,	value	:	28	}	,
    {	label	:	"	30	.	GNDVI	"	,	value	:	29	}	,
    {	label	:	"	31	.	GOSAVI	"	,	value	:	30	}	,
    {	label	:	"	32	.	GRNDVI	"	,	value	:	31	}	,
    {	label	:	"	33	.	GRVI	"	,	value	:	32	}	,
    {	label	:	"	34	.	GSAVI	"	,	value	:	33	}	,
    {	label	:	"	35	.	GVMI	"	,	value	:	34	}	,
    {	label	:	"	36	.	IAVI	"	,	value	:	35	}	,
    {	label	:	"	37	.	IKAW	"	,	value	:	36	}	,
    {	label	:	"	38	.	IPVI	"	,	value	:	37	}	,
    {	label	:	"	39	.	IRECI	"	,	value	:	38	}	,
    {	label	:	"	40	.	MCARI	"	,	value	:	39	}	,
    {	label	:	"	41	.	MCARI1	"	,	value	:	40	}	,
    {	label	:	"	42	.	MCARI2	"	,	value	:	41	}	,
    {	label	:	"	43	.	MCARI705	"	,	value	:	42	}	,
    {	label	:	"	44	.	MCARIOSAVI	"	,	value	:	43	}	,
    {	label	:	"	45	.	MCARIOSAVI705	"	,	value	:	44	}	,
    {	label	:	"	46	.	MGRVI	"	,	value	:	45	}	,
    {	label	:	"	47	.	MNDVI	"	,	value	:	46	}	,
    {	label	:	"	48	.	MNLI	"	,	value	:	47	}	,
    {	label	:	"	49	.	MRBVI	"	,	value	:	48	}	,
    {	label	:	"	50	.	MSAVI	"	,	value	:	49	}	,
    {	label	:	"	51	.	MSI	"	,	value	:	50	}	,
    {	label	:	"	52	.	MSR	"	,	value	:	51	}	,
    {	label	:	"	53	.	MSR705	"	,	value	:	52	}	,
    {	label	:	"	54	.	MTCI	"	,	value	:	53	}	,
    {	label	:	"	55	.	MTVI1	"	,	value	:	54	}	,
    {	label	:	"	56	.	MTVI2	"	,	value	:	55	}	,
    {	label	:	"	57	.	ND705	"	,	value	:	56	}	,
    {	label	:	"	58	.	NDDI	"	,	value	:	57	}	,
    {	label	:	"	59	.	NDGI	"	,	value	:	58	}	,
    {	label	:	"	60	.	NDII	"	,	value	:	59	}	,
    {	label	:	"	61	.	NDMI	"	,	value	:	60	}	,
    {	label	:	"	62	.	NDPI	"	,	value	:	61	}	,
    {	label	:	"	63	.	NDREI	"	,	value	:	62	}	,
    {	label	:	"	64	.	NDVI	"	,	value	:	63	}	,
    {	label	:	"	65	.	NDVI705	"	,	value	:	64	}	,
    {	label	:	"	66	.	NDYI	"	,	value	:	65	}	,
    {	label	:	"	67	.	NGRDI	"	,	value	:	66	}	,
    {	label	:	"	68	.	NIRv	"	,	value	:	67	}	,
    {	label	:	"	69	.	NIRvH2	"	,	value	:	68	}	,
    {	label	:	"	70	.	NIRvP	"	,	value	:	69	}	,
    {	label	:	"	71	.	NLI	"	,	value	:	70	}	,
    {	label	:	"	72	.	NMDI	"	,	value	:	71	}	,
    {	label	:	"	73	.	NRFIg	"	,	value	:	72	}	,
    {	label	:	"	74	.	NRFIr	"	,	value	:	73	}	,
    {	label	:	"	75	.	NormG	"	,	value	:	74	}	,
    {	label	:	"	76	.	NormNIR	"	,	value	:	75	}	,
    {	label	:	"	77	.	NormR	"	,	value	:	76	}	,
    {	label	:	"	78	.	OCVI	"	,	value	:	77	}	,
    {	label	:	"	79	.	OSAVI	"	,	value	:	78	}	,
    {	label	:	"	80	.	PSRI	"	,	value	:	79	}	,
    {	label	:	"	81	.	RCC	"	,	value	:	80	}	,
    {	label	:	"	82	.	RDVI	"	,	value	:	81	}	,
    {	label	:	"	83	.	REDSI	"	,	value	:	82	}	,
    {	label	:	"	84	.	RENDVI	"	,	value	:	83	}	,
    {	label	:	"	85	.	RGBVI	"	,	value	:	84	}	,
    {	label	:	"	86	.	RGRI	"	,	value	:	85	}	,
    {	label	:	"	87	.	RI	"	,	value	:	86	}	,
    {	label	:	"	88	.	RVI	"	,	value	:	87	}	,
    {	label	:	"	89	.	S2REP	"	,	value	:	88	}	,
    {	label	:	"	90	.	SARVI	"	,	value	:	89	}	,
    {	label	:	"	91	.	SAVI	"	,	value	:	90	}	,
    {	label	:	"	92	.	SAVI2	"	,	value	:	91	}	,
    {	label	:	"	93	.	SEVI	"	,	value	:	92	}	,
    {	label	:	"	95	.	SIPI	"	,	value	:	94	}	,
    {	label	:	"	96	.	SR	"	,	value	:	95	}	,
    {	label	:	"	97	.	SR2	"	,	value	:	96	}	,
    {	label	:	"	98	.	SR3	"	,	value	:	97	}	,
    {	label	:	"	99	.	SR555	"	,	value	:	98	}	,
    {	label	:	"	100	.	SR705	"	,	value	:	99	}	,
    {	label	:	"	101	.	SeLI	"	,	value	:	100	}	,
    {	label	:	"	102	.	TCARI	"	,	value	:	101	}	,
    {	label	:	"	103	.	TCARIOSAVI	"	,	value	:	102	}	,
    {	label	:	"	104	.	TCARIOSAVI705	"	,	value	:	103	}	,
    {	label	:	"	105	.	TCI	"	,	value	:	104	}	,
    {	label	:	"	106	.	TDVI	"	,	value	:	105	}	,
    {	label	:	"	107	.	TGI	"	,	value	:	106	}	,
    {	label	:	"	108	.	TRRVI	"	,	value	:	107	}	,
    {	label	:	"	109	.	TSAVI	"	,	value	:	108	}	,
    {	label	:	"	110	.	TTVI	"	,	value	:	109	}	,
    {	label	:	"	111	.	TVI	"	,	value	:	110	}	,
    {	label	:	"	112	.	TriVI	"	,	value	:	111	}	,
    {	label	:	"	113	.	VARI	"	,	value	:	112	}	,
    {	label	:	"	114	.	VARI700	"	,	value	:	113	}	,
    {	label	:	"	115	.	VI700	"	,	value	:	114	}	,
    {	label	:	"	116	.	VIG	"	,	value	:	115	}	,
    {	label	:	"	117	.	WDRVI	"	,	value	:	116	}	,
    {	label	:	"	118	.	WDVI	"	,	value	:	117	}	,
    {	label	:	"	119	.	mND705	"	,	value	:	118	}	,
    {	label	:	"	120	.	mSR705	"	,	value	:	119	}	,
  ],
  value: 0,
  style: {padding: '0px 0px 0px 0px'},
  onChange: function(value) {
    if ((value === 16)) {
      Lvalue.setDisabled(false)
      Lvalue.style().set('shown',true);
      C1value.style().set('shown', false);
      C2value.style().set('shown', false);
      cvalue.style().set('shown', false);
      gvalue.style().set('shown', true);
      pvalue.style().set('shown', false);
      kvalue.style().set('shown', false);
      PARvalue.style().set('shown',false);
      alphavalue.style().set('shown', false);
      betavalue.style().set('shown', false);
      gammavalue.style().set('shown', false);
      sigmavalue.style().set('shown', false);
      omegavalue.style().set('shown', false);
      cexpvalue.style().set('shown', false);
      nexpvalue.style().set('shown', false);
      slavalue.style().set('shown', false);
      slbvalue.style().set('shown', false);
      lambdaGvalue.style().set('shown', false);
      lambdaRvalue.style().set('shown', false);
      lambdaNvalue.style().set('shown', false);
      fdeltavalue.style().set('shown', false);
    }
    else if ((value === 29)) {
      Lvalue.setDisabled(false)
      Lvalue.style().set('shown',false);
      C1value.style().set('shown', false);
      C2value.style().set('shown', false);
      cvalue.style().set('shown', false);
      gvalue.style().set('shown', false);
      pvalue.style().set('shown', false);
      kvalue.style().set('shown', false);
      PARvalue.style().set('shown',false);
      alphavalue.style().set('shown', false);
      betavalue.style().set('shown', false);
      gammavalue.style().set('shown', false);
      sigmavalue.style().set('shown', false);
      omegavalue.style().set('shown', false);
      cexpvalue.style().set('shown', false);
      nexpvalue.style().set('shown', true);
      slavalue.style().set('shown', false);
      slbvalue.style().set('shown', false);
      lambdaGvalue.style().set('shown', false);
      lambdaRvalue.style().set('shown', false);
      lambdaNvalue.style().set('shown', false);
      fdeltavalue.style().set('shown', false);
    }
    else if ((value === 35)) {
      gammavalue.style().set('shown', true);
      Lvalue.setDisabled(false)
      Lvalue.style().set('shown',false);
      C1value.style().set('shown', false);
      C2value.style().set('shown', false);
      cvalue.style().set('shown', false);
      gvalue.style().set('shown', false);
      pvalue.style().set('shown', false);
      kvalue.style().set('shown', false);
      PARvalue.style().set('shown',false);
      alphavalue.style().set('shown', false);
      betavalue.style().set('shown', false);
      sigmavalue.style().set('shown', false);
      omegavalue.style().set('shown', false);
      cexpvalue.style().set('shown', false);
      nexpvalue.style().set('shown', true);
      slavalue.style().set('shown', false);
      slbvalue.style().set('shown', false);
      lambdaGvalue.style().set('shown', false);
      lambdaRvalue.style().set('shown', false);
      lambdaNvalue.style().set('shown', false);
      fdeltavalue.style().set('shown', false);
    }
    else if ((value === 47)) {
      Lvalue.setDisabled(false)
      Lvalue.style().set('shown',true);
      C1value.style().set('shown', false);
      C2value.style().set('shown', false);
      cvalue.style().set('shown', false);
      gvalue.style().set('shown', false);
      pvalue.style().set('shown', false);
      kvalue.style().set('shown', false);
      PARvalue.style().set('shown',false);
      alphavalue.style().set('shown', false);
      betavalue.style().set('shown', false);
      gammavalue.style().set('shown', false);
      sigmavalue.style().set('shown', false);
      omegavalue.style().set('shown', false);
      cexpvalue.style().set('shown', false);
      nexpvalue.style().set('shown', false);
      slavalue.style().set('shown', false);
      slbvalue.style().set('shown', false);
      lambdaGvalue.style().set('shown', false);
      lambdaRvalue.style().set('shown', false);
      lambdaNvalue.style().set('shown', false);
      fdeltavalue.style().set('shown', false);
    }
    else if ((value === 89)) {
      Lvalue.setDisabled(false)
      Lvalue.style().set('shown',true);
      C1value.style().set('shown', false);
      C2value.style().set('shown', false);
      cvalue.style().set('shown', false);
      gvalue.style().set('shown', false);
      pvalue.style().set('shown', false);
      kvalue.style().set('shown', false);
      PARvalue.style().set('shown',false);
      alphavalue.style().set('shown', false);
      betavalue.style().set('shown', false);
      gammavalue.style().set('shown', false);
      sigmavalue.style().set('shown', false);
      omegavalue.style().set('shown', false);
      cexpvalue.style().set('shown', false);
      nexpvalue.style().set('shown', false);
      slavalue.style().set('shown', false);
      slbvalue.style().set('shown', false);
      lambdaGvalue.style().set('shown', false);
      lambdaRvalue.style().set('shown', false);
      lambdaNvalue.style().set('shown', false);
      fdeltavalue.style().set('shown', false);
    }
    else if ((value === 90)) {
      Lvalue.setDisabled(false)
      Lvalue.style().set('shown',true);
      C1value.style().set('shown', false);
      C2value.style().set('shown', false);
      cvalue.style().set('shown', false);
      gvalue.style().set('shown', false);
      pvalue.style().set('shown', false);
      kvalue.style().set('shown', false);
      PARvalue.style().set('shown',false);
      alphavalue.style().set('shown', false);
      betavalue.style().set('shown', false);
      gammavalue.style().set('shown', false);
      sigmavalue.style().set('shown', false);
      omegavalue.style().set('shown', false);
      cexpvalue.style().set('shown', false);
      nexpvalue.style().set('shown', false);
      slavalue.style().set('shown', false);
      slbvalue.style().set('shown', false);
      lambdaGvalue.style().set('shown', false);
      lambdaRvalue.style().set('shown', false);
      lambdaNvalue.style().set('shown', false);
      fdeltavalue.style().set('shown', false);
    }
    else if  ((value === 14)) {
      lambdaGvalue.style().set('shown',true);
      lambdaRvalue.style().set('shown',true);
      lambdaNvalue.style().set('shown',true);
      Lvalue.style().set('shown',false);
      C1value.style().set('shown', false);
      C2value.style().set('shown', false);
      cvalue.style().set('shown', false);
      gvalue.style().set('shown', false);
      pvalue.style().set('shown', false);
      kvalue.style().set('shown', false);
      PARvalue.style().set('shown',false);
      alphavalue.style().set('shown', false);
      betavalue.style().set('shown', false);
      gammavalue.style().set('shown', false);
      sigmavalue.style().set('shown', false);
      omegavalue.style().set('shown', false);
      cexpvalue.style().set('shown', false);
      nexpvalue.style().set('shown', false);
      slavalue.style().set('shown', false);
      slbvalue.style().set('shown', false);
      fdeltavalue.style().set('shown', false);
    }
    else if  ((value === 58)) {
      lambdaGvalue.style().set('shown',true);
      lambdaRvalue.style().set('shown',true);
      lambdaNvalue.style().set('shown',true);
      Lvalue.style().set('shown',false);
      C1value.style().set('shown', false);
      C2value.style().set('shown', false);
      cvalue.style().set('shown', false);
      gvalue.style().set('shown', false);
      pvalue.style().set('shown', false);
      kvalue.style().set('shown', false);
      PARvalue.style().set('shown',false);
      alphavalue.style().set('shown', false);
      betavalue.style().set('shown', false);
      gammavalue.style().set('shown', false);
      sigmavalue.style().set('shown', false);
      omegavalue.style().set('shown', false);
      cexpvalue.style().set('shown', false);
      nexpvalue.style().set('shown', false);
      slavalue.style().set('shown', false);
      slbvalue.style().set('shown', false);
      fdeltavalue.style().set('shown', false);
    }
    else if  ((value === 5)) {
      slavalue.style().set('shown',true);
      slbvalue.style().set('shown',true);
      lambdaGvalue.style().set('shown',false);
      lambdaRvalue.style().set('shown',false);
      lambdaNvalue.style().set('shown',false);
      Lvalue.style().set('shown',false);
      C1value.style().set('shown', false);
      C2value.style().set('shown', false);
      cvalue.style().set('shown', false);
      gvalue.style().set('shown', false);
      pvalue.style().set('shown', false);
      kvalue.style().set('shown', false);
      PARvalue.style().set('shown',false);
      alphavalue.style().set('shown', false);
      betavalue.style().set('shown', false);
      gammavalue.style().set('shown', false);
      sigmavalue.style().set('shown', false);
      omegavalue.style().set('shown', false);
      cexpvalue.style().set('shown', false);
      nexpvalue.style().set('shown', false);
      fdeltavalue.style().set('shown', false);
    }
    else if  ((value === 91)) {
      slavalue.style().set('shown',true);
      slbvalue.style().set('shown',true);
      lambdaGvalue.style().set('shown',false);
      lambdaRvalue.style().set('shown',false);
      lambdaNvalue.style().set('shown',false);
      Lvalue.style().set('shown',false);
      C1value.style().set('shown', false);
      C2value.style().set('shown', false);
      cvalue.style().set('shown', false);
      gvalue.style().set('shown', false);
      pvalue.style().set('shown', false);
      kvalue.style().set('shown', false);
      PARvalue.style().set('shown',false);
      alphavalue.style().set('shown', false);
      betavalue.style().set('shown', false);
      gammavalue.style().set('shown', false);
      sigmavalue.style().set('shown', false);
      omegavalue.style().set('shown', false);
      cexpvalue.style().set('shown', false);
      nexpvalue.style().set('shown', false);
      fdeltavalue.style().set('shown', false);
    }
    else if  ((value === 108)) {
      slavalue.style().set('shown',true);
      slbvalue.style().set('shown',true);
      lambdaGvalue.style().set('shown',false);
      lambdaRvalue.style().set('shown',false);
      lambdaNvalue.style().set('shown',false);
      Lvalue.style().set('shown',false);
      C1value.style().set('shown', false);
      C2value.style().set('shown', false);
      cvalue.style().set('shown', false);
      gvalue.style().set('shown', false);
      pvalue.style().set('shown', false);
      kvalue.style().set('shown', false);
      PARvalue.style().set('shown',false);
      alphavalue.style().set('shown', false);
      betavalue.style().set('shown', false);
      gammavalue.style().set('shown', false);
      sigmavalue.style().set('shown', false);
      omegavalue.style().set('shown', false);
      cexpvalue.style().set('shown', false);
      nexpvalue.style().set('shown', false);
      fdeltavalue.style().set('shown', false);
    }
    else if  ((value === 9)) {
      alphavalue.style().set('shown',true);
      slavalue.style().set('shown',false);
      slbvalue.style().set('shown',false);
      lambdaGvalue.style().set('shown',false);
      lambdaRvalue.style().set('shown',false);
      lambdaNvalue.style().set('shown',false);
      Lvalue.style().set('shown',false);
      C1value.style().set('shown', false);
      C2value.style().set('shown', false);
      cvalue.style().set('shown', false);
      gvalue.style().set('shown', false);
      pvalue.style().set('shown', false);
      kvalue.style().set('shown', false);
      PARvalue.style().set('shown',false);
      betavalue.style().set('shown', false);
      gammavalue.style().set('shown', false);
      sigmavalue.style().set('shown', false);
      omegavalue.style().set('shown', false);
      cexpvalue.style().set('shown', false);
      nexpvalue.style().set('shown', false);
      fdeltavalue.style().set('shown', false);
    }
    else if  ((value === 61)) {
      alphavalue.style().set('shown',true);
      slavalue.style().set('shown',false);
      slbvalue.style().set('shown',false);
      lambdaGvalue.style().set('shown',false);
      lambdaRvalue.style().set('shown',false);
      lambdaNvalue.style().set('shown',false);
      Lvalue.style().set('shown',false);
      C1value.style().set('shown', false);
      C2value.style().set('shown', false);
      cvalue.style().set('shown', false);
      gvalue.style().set('shown', false);
      pvalue.style().set('shown', false);
      kvalue.style().set('shown', false);
      PARvalue.style().set('shown',false);
      betavalue.style().set('shown', false);
      gammavalue.style().set('shown', false);
      sigmavalue.style().set('shown', false);
      omegavalue.style().set('shown', false);
      cexpvalue.style().set('shown', false);
      nexpvalue.style().set('shown', false);
      fdeltavalue.style().set('shown', false);
    }
    else if  ((value === 116)) {
      alphavalue.style().set('shown',true);
      slavalue.style().set('shown',false);
      slbvalue.style().set('shown',false);
      lambdaGvalue.style().set('shown',false);
      lambdaRvalue.style().set('shown',false);
      lambdaNvalue.style().set('shown',false);
      Lvalue.style().set('shown',false);
      C1value.style().set('shown', false);
      C2value.style().set('shown', false);
      cvalue.style().set('shown', false);
      gvalue.style().set('shown', false);
      pvalue.style().set('shown', false);
      kvalue.style().set('shown', false);
      PARvalue.style().set('shown',false);
      betavalue.style().set('shown', false);
      gammavalue.style().set('shown', false);
      sigmavalue.style().set('shown', false);
      omegavalue.style().set('shown', false);
      cexpvalue.style().set('shown', false);
      nexpvalue.style().set('shown', false);
      fdeltavalue.style().set('shown', false);
    }
    else if  ((value === 4)) {
      gammavalue.style().set('shown',true);
      alphavalue.style().set('shown',false);
      slavalue.style().set('shown',false);
      slbvalue.style().set('shown',false);
      lambdaGvalue.style().set('shown',false);
      lambdaRvalue.style().set('shown',false);
      lambdaNvalue.style().set('shown',false);
      Lvalue.style().set('shown',false);
      C1value.style().set('shown', false);
      C2value.style().set('shown', false);
      cvalue.style().set('shown', false);
      pvalue.style().set('shown', false);
      kvalue.style().set('shown', false);
      PARvalue.style().set('shown',false);
      betavalue.style().set('shown', false);
      sigmavalue.style().set('shown', false);
      omegavalue.style().set('shown', false);
      cexpvalue.style().set('shown', false);
      nexpvalue.style().set('shown', false);
      fdeltavalue.style().set('shown', false);
    }
    else if  ((value === 92)) {
      fdeltavalue.style().set('shown',true);
      alphavalue.style().set('shown',false);
      slavalue.style().set('shown',false);
      slbvalue.style().set('shown',false);
      lambdaGvalue.style().set('shown',false);
      lambdaRvalue.style().set('shown',false);
      lambdaNvalue.style().set('shown',false);
      Lvalue.style().set('shown',false);
      C1value.style().set('shown', false);
      C2value.style().set('shown', false);
      cvalue.style().set('shown', false);
      gvalue.style().set('shown', false);
      pvalue.style().set('shown', false);
      kvalue.style().set('shown', false);
      PARvalue.style().set('shown',false);
      betavalue.style().set('shown', false);
      gammavalue.style().set('shown', false);
      sigmavalue.style().set('shown', false);
      omegavalue.style().set('shown', false);
      cexpvalue.style().set('shown', false);
      nexpvalue.style().set('shown', false);
    }
    else if  ((value === 15)) {
      gvalue.style().set('shown',true);
      C1value.style().set('shown',true);
      C2value.style().set('shown',true);
      Lvalue.style().set('shown',true);
      fdeltavalue.style().set('shown',false);
      alphavalue.style().set('shown',false);
      slavalue.style().set('shown',false);
      slbvalue.style().set('shown',false);
      lambdaGvalue.style().set('shown',false);
      lambdaRvalue.style().set('shown',false);
      lambdaNvalue.style().set('shown',false);
      cvalue.style().set('shown', false);
      pvalue.style().set('shown', false);
      kvalue.style().set('shown', false);
      PARvalue.style().set('shown',false);
      betavalue.style().set('shown', false);
      gammavalue.style().set('shown', false);
      sigmavalue.style().set('shown', false);
      omegavalue.style().set('shown', false);
      cexpvalue.style().set('shown', false);
      nexpvalue.style().set('shown', false);
    }
    else if  ((value === 68)) {
      lambdaRvalue.style().set('shown',true);
      lambdaNvalue.style().set('shown',true);      
      kvalue.style().set('shown',true);
      fdeltavalue.style().set('shown',false);
      alphavalue.style().set('shown',false);
      slavalue.style().set('shown',false);
      slbvalue.style().set('shown',false);
      lambdaGvalue.style().set('shown',false);
      Lvalue.style().set('shown',false);
      C1value.style().set('shown', false);
      C2value.style().set('shown', false);
      cvalue.style().set('shown', false);
      gvalue.style().set('shown', false);
      pvalue.style().set('shown', false);
      PARvalue.style().set('shown',false);
      betavalue.style().set('shown', false);
      gammavalue.style().set('shown', false);
      sigmavalue.style().set('shown', false);
      omegavalue.style().set('shown', false);
      cexpvalue.style().set('shown', false);
      nexpvalue.style().set('shown', false);
    }
    else if  ((value === 24)) {
      nexpvalue.style().set('shown',true);
      kvalue.style().set('shown',false);
      fdeltavalue.style().set('shown',false);
      alphavalue.style().set('shown',false);
      slavalue.style().set('shown',false);
      slbvalue.style().set('shown',false);
      lambdaGvalue.style().set('shown',false);
      lambdaRvalue.style().set('shown',false);
      lambdaNvalue.style().set('shown',false);
      Lvalue.style().set('shown',false);
      C1value.style().set('shown', false);
      C2value.style().set('shown', false);
      cvalue.style().set('shown', false);
      gvalue.style().set('shown', false);
      pvalue.style().set('shown', false);
      PARvalue.style().set('shown',false);
      betavalue.style().set('shown', false);
      gammavalue.style().set('shown', false);
      sigmavalue.style().set('shown', false);
      omegavalue.style().set('shown', false);
      cexpvalue.style().set('shown', false);
    }
    else if  ((value === 69)) {
      PARvalue.style().set('shown',true);
      kvalue.style().set('shown',false);
      fdeltavalue.style().set('shown',false);
      alphavalue.style().set('shown',false);
      slavalue.style().set('shown',false);
      slbvalue.style().set('shown',false);
      lambdaGvalue.style().set('shown',false);
      lambdaRvalue.style().set('shown',false);
      lambdaNvalue.style().set('shown',false);
      Lvalue.style().set('shown',false);
      C1value.style().set('shown', false);
      C2value.style().set('shown', false);
      cvalue.style().set('shown', false);
      gvalue.style().set('shown', false);
      pvalue.style().set('shown', false);
      betavalue.style().set('shown', false);
      gammavalue.style().set('shown', false);
      sigmavalue.style().set('shown', false);
      omegavalue.style().set('shown', false);
      cexpvalue.style().set('shown', false);
      nexpvalue.style().set('shown', false);
    }
    else if ((value === 117)) {
      slavalue.style().set('shown',true);
      kvalue.style().set('shown',false);
      fdeltavalue.style().set('shown',false);
      alphavalue.style().set('shown',false);
      lambdaGvalue.style().set('shown',false);
      lambdaRvalue.style().set('shown',false);
      lambdaNvalue.style().set('shown',false);
      Lvalue.style().set('shown',false);
      C1value.style().set('shown', false);
      C2value.style().set('shown', false);
      cvalue.style().set('shown', false);
      gvalue.style().set('shown', false);
      pvalue.style().set('shown', false);
      PARvalue.style().set('shown',false);
      betavalue.style().set('shown', false);
      gammavalue.style().set('shown', false);
      sigmavalue.style().set('shown', false);
      omegavalue.style().set('shown', false);
      cexpvalue.style().set('shown', false);
      nexpvalue.style().set('shown', false);
    }
    else{
      C1value.style().set('shown', false);
      C2value.style().set('shown', false);
      Lvalue.style().set('shown', false);
      cvalue.style().set('shown', false);
      gvalue.style().set('shown', false);
      pvalue.style().set('shown', false);
      kvalue.style().set('shown', false);
      PARvalue.style().set('shown',false);
      alphavalue.style().set('shown', false);
      betavalue.style().set('shown', false);
      gammavalue.style().set('shown', false);
      sigmavalue.style().set('shown', false);
      omegavalue.style().set('shown', false);
      cexpvalue.style().set('shown', false);
      nexpvalue.style().set('shown', false);
      slavalue.style().set('shown', false);
      slbvalue.style().set('shown', false);
      lambdaGvalue.style().set('shown', false);
      lambdaRvalue.style().set('shown', false);
      lambdaNvalue.style().set('shown', false);
      fdeltavalue.style().set('shown', false);
    }
  },  
});

//////////////////////////////////////////////////////////// Burn Indices ///////////////////////////////////////////////////////////////////////////////

var burnindices = ui.Select({
  items: [
    {	label	:	"	1	.	BAI	"	,	value	:	0	}	,
    {	label	:	"	2	.	BAIM	"	,	value	:	1	}	,
    {	label	:	"	3	.	BAIS2	"	,	value	:	2	}	,
    {	label	:	"	4	.	CSI	"	,	value	:	3	}	,
    {	label	:	"	5	.	MIRBI	"	,	value	:	4	}	,
    {	label	:	"	6	.	NBR	"	,	value	:	5	}	,
    {	label	:	"	7	.	NBR2	"	,	value	:	6	}	,
    {	label	:	"	8	.	NBRSWIR	"	,	value	:	7	}	,
    {	label	:	"	9	.	NBRplus	"	,	value	:	8	}	,
    {	label	:	"	10	.	NDSWIR	"	,	value	:	9	}
  ],
  value: 0,
  style: {padding: '0px 0px 0px 0px'},  
});

//////////////////////////////////////////////////////// Water Indices ////////////////////////////////////////////////////////////////////////////////////////////

var compositeindices = ui.Select({
  items: [{label: "1.NCHI",value:0}],
  value: 0, 
  style: {padding: '0px 0px 0px 0px'},
});

var waterindices = ui.Select({
  items: [
    {	label	:	"	1	.	AWEInsh	"	,	value	:	1	}	,
    {	label	:	"	2	.	LSWI	"	,	value	:	3	}	,
    {	label	:	"	3	.	MBWI	"	,	value	:	4	}	,
    {	label	:	"	4	.	MLSWI26	"	,	value	:	5	}	,
    {	label	:	"	5	.	MLSWI27	"	,	value	:	6	}	,
    {	label	:	"	6	.	MNDWI	"	,	value	:	7	}	,
    {	label	:	"	7	.	MuWIR	"	,	value	:	8	}	,
    {	label	:	"	8	.	NDCI	"	,	value	:	9	}	,
    {	label	:	"	9	.	NDPonI	"	,	value	:	10	}	,
    {	label	:	"	10	.	NDTI	"	,	value	:	11	}	,
    {	label	:	"	11	.	NDVIMNDWI	"	,	value	:	12	}	,
    {	label	:	"	12	.	NDWI	"	,	value	:	13	}	,
    {	label	:	"	13	.	NSDSI1	"	,	value	:	15	}	,
    {	label	:	"	14	.	NSDSI2	"	,	value	:	16	}	,
    {	label	:	"	15	.	NSDSI3	"	,	value	:	17	}	,
    {	label	:	"	16	.	NWI	"	,	value	:	18	}	,
    {	label	:	"	17	.	S2WI	"	,	value	:	19	}	,
    {	label	:	"	18	.	SWM	"	,	value	:	20	}	,
    {	label	:	"	19	.	WI1	"	,	value	:	21	}	,
    {	label	:	"	20	.	WI2	"	,	value	:	22	}	,
    {	label	:	"	21	.	WRI	"	,	value	:	23	}
  ],
  value: 1,
  style: {padding: '0px 0px 0px 0px'},
  onChange: function(value) {
    if ((value === 1)) {
      omegavalue.style().set('shown',false);
      slavalue.style().set('shown',false);
      kvalue.style().set('shown',false);
      fdeltavalue.style().set('shown',false);
      alphavalue.style().set('shown',false);
      lambdaGvalue.style().set('shown',false);
      lambdaRvalue.style().set('shown',false);
      lambdaNvalue.style().set('shown',false);
      Lvalue.style().set('shown',false);
      C1value.style().set('shown', false);
      C2value.style().set('shown', false);
      cvalue.style().set('shown', false);
      gvalue.style().set('shown', false);
      pvalue.style().set('shown', false);
      PARvalue.style().set('shown',false);
      betavalue.style().set('shown', false);
      gammavalue.style().set('shown', false);
      sigmavalue.style().set('shown', false);
      cexpvalue.style().set('shown', false);
      nexpvalue.style().set('shown', false);
    }
    else if  ((value === 12)) {
      alphavalue.style().set('shown',false);
      slavalue.style().set('shown',false);
      kvalue.style().set('shown',false);
      fdeltavalue.style().set('shown',false);
      lambdaGvalue.style().set('shown',false);
      lambdaRvalue.style().set('shown',false);
      lambdaNvalue.style().set('shown',false);
      Lvalue.style().set('shown',false);
      C1value.style().set('shown', false);
      C2value.style().set('shown', false);
      cvalue.style().set('shown', false);
      gvalue.style().set('shown', false);
      pvalue.style().set('shown', false);
      PARvalue.style().set('shown',false);
      betavalue.style().set('shown', false);
      gammavalue.style().set('shown', false);
      sigmavalue.style().set('shown', false);
      omegavalue.style().set('shown', false);
      cexpvalue.style().set('shown', false);
      nexpvalue.style().set('shown', false);
    }
    else {
      C1value.style().set('shown', false);
      C2value.style().set('shown', false);
      Lvalue.style().set('shown', false);
      cvalue.style().set('shown', false);
      gvalue.style().set('shown', false);
      pvalue.style().set('shown', false);
      kvalue.style().set('shown', false);
      PARvalue.style().set('shown',false);
      alphavalue.style().set('shown', false);
      betavalue.style().set('shown', false);
      gammavalue.style().set('shown', false);
      sigmavalue.style().set('shown', false);
      omegavalue.style().set('shown', false);
      cexpvalue.style().set('shown', false);
      nexpvalue.style().set('shown', false);
      slavalue.style().set('shown', false);
      slbvalue.style().set('shown', false);
      lambdaGvalue.style().set('shown', false);
      lambdaRvalue.style().set('shown', false);
      lambdaNvalue.style().set('shown', false);
      fdeltavalue.style().set('shown', false);
    }
  } , 
});

//////////////////////////////////////////////////////// Snow Indices ////////////////////////////////////////////////////////////////////////////////////////////

var snowindices = ui.Select({
  items: [
    {	label	:	"	1	.	NBSIMS	"	,	value	:	0	}	,
    {	label	:	"	2	.	NDGlaI	"	,	value	:	1	}	,
    {	label	:	"	3	.	NDSI	"	,	value	:	2	}	,
    {	label	:	"	4	.	NDSII	"	,	value	:	3	}	,
    {	label	:	"	5	.	NDSInw	"	,	value	:	4	}	,
    {	label	:	"	6	.	NDSaII	"	,	value	:	5	}	,
    {	label	:	"	7	.	S3	"	,	value	:	6	}	,
    {	label	:	"	8	.	SWI	"	,	value	:	7	}
  ],
  value: 0,
  style: {padding: '0px 0px 0px 0px'},
  onChange: function(value) {
      C1value.style().set('shown', false);
      C2value.style().set('shown', false);
      Lvalue.style().set('shown', false);
      cvalue.style().set('shown', false);
      gvalue.style().set('shown', false);
      pvalue.style().set('shown', false);
      kvalue.style().set('shown', false);
      PARvalue.style().set('shown',false);
      alphavalue.style().set('shown', false);
      betavalue.style().set('shown', false);
      gammavalue.style().set('shown', false);
      sigmavalue.style().set('shown', false);
      omegavalue.style().set('shown', false);
      cexpvalue.style().set('shown', false);
      nexpvalue.style().set('shown', false);
      slavalue.style().set('shown', false);
      slbvalue.style().set('shown', false);
      lambdaGvalue.style().set('shown', false);
      lambdaRvalue.style().set('shown', false);
      lambdaNvalue.style().set('shown', false);
      fdeltavalue.style().set('shown', false);  
  },  
});

//////////////////////////////////////////////////////// Urban Indices //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var urbanindices = ui.Select({
  items: [
    {	label	:	"	1	.	BI	"	,	value	:	0	}	,
    {	label	:	"	2	.	BLFEI	"	,	value	:	1	}	,
    {	label	:	"	3	.	BRBA	"	,	value	:	2	}	,
    {	label	:	"	4	.	BaI	"	,	value	:	3	}	,
    {	label	:	"	5	.	DBSI	"	,	value	:	4	}	,
    {	label	:	"	6	.	EMBI	"	,	value	:	5	}	,
    {	label	:	"	7	.	IBI	"	,	value	:	6	}	,
    {	label	:	"	8	.	MBI	"	,	value	:	7	}	,
    {	label	:	"	9	.	NBAI	"	,	value	:	8	}	,
    {	label	:	"	10	.	NDBI	"	,	value	:	9	}	,
    {	label	:	"	11	.	NDSoiI	"	,	value	:	10	}	,
    {	label	:	"	12	.	NHFD	"	,	value	:	11	}	,
    {	label	:	"	13	.	NSDS	"	,	value	:	12	}	,
    {	label	:	"	14	.	PISI	"	,	value	:	13	}	,
    {	label	:	"	15	.	UI	"	,	value	:	14	}	,
    {	label	:	"	16	.	VIBI	"	,	value	:	15	}	,
    {	label	:	"	17	.	VgNIRBI	"	,	value	:	16	}	,
    {	label	:	"	18	.	VrNIRBI	"	,	value	:	17	}
  ],
  value: 0,
  style: {padding: '0px 0px 0px 0px'},
  onChange: function(value) {
    if ((value === 6)) {
      Lvalue.style().set('shown', true);
      C1value.style().set('shown', false);
      C2value.style().set('shown', false);
      cvalue.style().set('shown', false);
      gvalue.style().set('shown', false);
      pvalue.style().set('shown', false);
      kvalue.style().set('shown', false);
      PARvalue.style().set('shown',false);
      alphavalue.style().set('shown', false);
      betavalue.style().set('shown', false);
      gammavalue.style().set('shown', false);
      sigmavalue.style().set('shown', false);
      omegavalue.style().set('shown', false);
      cexpvalue.style().set('shown', false);
      nexpvalue.style().set('shown', false);
      slavalue.style().set('shown', false);
      slbvalue.style().set('shown', false);
      lambdaGvalue.style().set('shown', false);
      lambdaRvalue.style().set('shown', false);
      lambdaNvalue.style().set('shown', false);
      fdeltavalue.style().set('shown', false);
    }
    else {
      C1value.style().set('shown', false);
      C2value.style().set('shown', false);
      Lvalue.style().set('shown', false);
      cvalue.style().set('shown', false);
      gvalue.style().set('shown', false);
      pvalue.style().set('shown', false);
      kvalue.style().set('shown', false);
      PARvalue.style().set('shown',false);
      alphavalue.style().set('shown', false);
      betavalue.style().set('shown', false);
      gammavalue.style().set('shown', false);
      sigmavalue.style().set('shown', false);
      omegavalue.style().set('shown', false);
      cexpvalue.style().set('shown', false);
      nexpvalue.style().set('shown', false);
      slavalue.style().set('shown', false);
      slbvalue.style().set('shown', false);
      lambdaGvalue.style().set('shown', false);
      lambdaRvalue.style().set('shown', false);
      lambdaNvalue.style().set('shown', false);
      fdeltavalue.style().set('shown', false);
    }
  },  
});

var biophysicalindices = ui.Select({
  items:[
    {	label	:	 "1 	.	LAI"	,	value	:	0	}	,
    {	label	:	 "2 	.	CCC"	,	value	:	1	}	,
    {	label	:	 "3 	.	CWC"	,	value	:	2	}	
  ],
  value: 0,
  style: {padding: '0px 0px 0px 0px'},
})

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    
/////////////////////////////////////////////////////// Drawing tools setup //////////////////////////////////////////////////////////////////////////////////

var drawingTools = Map.drawingTools();
while (drawingTools.layers().length() > 0) {var layer = drawingTools.layers().get(0); drawingTools.layers().remove(layer);}
var emptygeometry = ui.Map.GeometryLayer({geometries: null, name: 'geometry', color: '23cba7'});
function clearGeometry() {var layers = drawingTools.layers();layers.get(0).geometries().remove(layers.get(0).geometries().get(0));}
function drawPolygon() {clearGeometry();drawingTools.setDrawModes(['polygon']);drawingTools.setShape('polygon');drawingTools.draw();}
drawingTools.setShown(false);
drawingTools.layers().add(emptygeometry);

///////////////////////////////////////////////////////////// VARIABLES ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var asset = 'Use Stored Shapefile'
var draw = 'Draw a custom Polygon'
var boundary
//var geometry
var selectedboundary
//var imgDateList
//var dataset
//var imcol
var iari_fullboundary = 'Choose IARI boundary'
var rgbVis = {min: 0.0, max:3000, bands: ['B4', 'B3', 'B2'],};
var fccvis = {min: 0.0,max:3000,bands: ['B8', 'B4', 'B3'],};
var dronergbVis = {min: 0.0, max:1.0, bands: ['B4', 'B3', 'B2'],};
var dronefccvis = {min: 0.0,max:1.0,bands: ['B8', 'B4', 'B3'],};
// var sarvis = {min: 10.0,max:30,bands: ['VV', 'VH', 'VV'],};
var colorizedVis = {min: 0.0,max: 0.75,palette: ['FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901','66A000', '529400', '3E8601', '207401', '056201', '004C00', '023B01','012E01', '011D01', '011301'],};
var soilVis ={palette: ['FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718', '74A901','66A000', 
'529400', '3E8601', '207401', '056201', '004C00', '023B01', '012E01', '011D01', '011301']}
var ndvivis = {min: 1, max: 5, palette: ['#ce7e45','#fcd163','#99b718','#66a000', '#004c00']}

////////////////////////////////////////////////////// User Interface /////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////// LOGO /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var logo = ee.Image('users/tarunkondraju/IARI_NePPA/Neppa_Symbol/NePPA_Logo_Final1').visualize({bands:  ['b1', 'b2', 'b3'],min: 0,max: 255});
var thumb = ui.Thumbnail({image: logo,params: {dimensions: '642x291',format: 'png'},style: {padding: '0px 0px 0px 15px', stretch: 'horizontal'},});
var toolPanel = ui.Panel(thumb, 'flow', {width: '300px'});

/////////////////////////////////// WEBSITE LINK /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var projectdetails = ui.Label({value: 'Click to Know more about the NePPA project',style: {padding:  '0px 0px 0px 10px'}, }).setUrl('http://neppa.iari.res.in');

/////////////////////////////////// PANELS /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var panel = ui.Panel();
panel.style().set({width: '320px',});
ui.root.insert(0,panel)

var panelo = ui.Panel();
panelo.style().set({width: '320px',});
ui.root.insert(4,panelo)

//////////////////////////////////// Boxes & Labels /////////////////////////////////////////////////////////////////////////////////////////////////////////

var resultspanel = ui.Label('Results Panel',{fontWeight: 'italic' , fontSize: '20px', textAlign: 'center'})
var startdate = ui.Textbox({placeholder: 'Start: yyyy-mm-dd', style: {padding: '0px 0px 0px 0px', stretch: 'horizontal', color: 'black'},})
var enddate = ui.Textbox({placeholder: 'End: yyyy-mm-dd', style: {padding: '0px 0px 0px 0px', stretch: 'horizontal', color: 'black'},})
var cloudcover = ui.Textbox({placeholder: 'Cloud cover (eg 25)', style: {padding: '0px 0px 0px 60px'},})
var C1value = ui.Textbox({placeholder: 'C1(default:6.0)', style: {padding: '0px 0px'},})
var C2value = ui.Textbox({placeholder: 'C2(default:7.5)', style: {padding: '0px 0px'},})
var Lvalue = ui.Textbox({placeholder: 'L(default:1.0)', style: {padding: '0px 0px'},})
var cvalue = ui.Textbox({placeholder: 'c(default:1.0)', style: {padding: '0px 0px'},})
var gvalue = ui.Textbox({placeholder: 'g(default:2.5)', style: {padding: '0px 0px'},})
var pvalue = ui.Textbox({placeholder: 'p(default:2.0)', style: {padding: '0px 0px'},})
var kvalue = ui.Textbox({placeholder: 'k(default:0.0)', style: {padding: '0px 0px'},})
var PARvalue = ui.Textbox({placeholder: 'PAR(default:1.0)', style: {padding: '0px 0px'},})
var alphavalue = ui.Textbox({placeholder: 'alpha(default:0.1)', style: {padding: '0px 0px'},})
var betavalue = ui.Textbox({placeholder: 'beta(default:0.05)', style: {padding: '0px 0px'},})
var gammavalue = ui.Textbox({placeholder: 'gamma(default:1.0)', style: {padding: '0px 0px'},})
var sigmavalue = ui.Textbox({placeholder: 'sigma(default:0.5)', style: {padding: '0px 0px'},})
var omegavalue = ui.Textbox({placeholder: 'omega(default:2.0)', style: {padding: '0px 0px'},})
var cexpvalue = ui.Textbox({placeholder: 'cexp(default:1.16)', style: {padding: '0px 0px'},})
var nexpvalue = ui.Textbox({placeholder: 'nexp(default:2.0)', style: {padding: '0px 0px'},})
var slavalue = ui.Textbox({placeholder: 'sla(default:1.0)', style: {padding: '0px 0px'},})
var slbvalue = ui.Textbox({placeholder: 'slb(default:0.0)', style: {padding: '0px 0px'},})
var lambdaGvalue = ui.Textbox({placeholder: 'lambdaG(default:560)', style: {padding: '0px 0px'},})
var lambdaRvalue = ui.Textbox({placeholder: 'lambdaR(default:680)', style: {padding: '0px 0px'},})
var lambdaNvalue = ui.Textbox({placeholder: 'lambdaN(default:860)', style: {padding: '0px 0px'},})
var fdeltavalue = ui.Textbox({placeholder: 'fdelvalue(default:0.581)', style: {padding: '0px 0px'},})
var LB = ui.Textbox({placeholder: '0', style: {padding: '0px 0px'},})
var UB = ui.Textbox({placeholder: '1', style: {padding: '0px 0px'},})
var CV = ui.Textbox({placeholder: '1', style: {padding: '0px 0px'},})
var dates = ui.Panel({widgets:[startdate,enddate], layout: ui.Panel.Layout.flow('horizontal')})
var cloud = ui.Panel({widgets:[cloudcover], layout: ui.Panel.Layout.flow('horizontal')})
var calculate = ui.Button('Run', imagecollection, false, {padding: '0px 0px'})
var airtemperaturevalue = ui.Textbox({placeholder: 'Air Temperature Value', style: {padding: '0px 0px'},})
var showsoilmapbutton = ui.Checkbox({label: 'Display Digital Soil Map',value: false,style: {color: '#dc7a55', width: '200px'},
  onChange: function(value) {
    if (value === true) {soildatalist.style().set('shown',true)}
    else if  (value === false){soildatalist.style().set('shown',false)}//{Map.clear()  }//{Map.remove(n), Map.remove(soilinspectorPanel), Map.remove(legendPanel)}
  }
})

var sensorselect = ui.Select({
  items: [
    {	label	:	"	2	.	Sentinel 2 Optical	"	,	value	:	1	}	
  ],
  placeholder : 'Choose a sensor',
  style: {padding: '0px 0px 0px 0px', stretch: 'horizontal', color: 'black'},
  onChange: function(value) {
    if ((value === 0)){
      dates.style().set('shown',true)
      cloud.style().set('shown',false)
      vegetationindexpanel.style().set('shown', false);
      burnindexpanel.style().set('shown', false);
      waterindexpanel.style().set('shown', false);
      compositeindex.style().set('shown', false);      
      snowindexpanel.style().set('shown', false);
      urbanindexpanel.style().set('shown', false);
	  biophysicalpanel.style().set('shown',false);
      airtemperaturevalue.style().set('shown', false); 
    }
    else if (value === 1){
      dates.style().set('shown',true)
      cloud.style().set('shown',true)      
      vegetationindexpanel.style().set('shown', true);
      burnindexpanel.style().set('shown', true);
      waterindexpanel.style().set('shown', true);
	  biophysicalpanel.style().set('shown',true);
      compositeindexpanel.style().set('shown', true);
      snowindexpanel.style().set('shown', true);
      urbanindexpanel.style().set('shown', true);    
      airtemperaturevalue.style().set('shown', false); 
    }
    else if (value === 2){
      dates.style().set('shown',false)
      cloud.style().set('shown',false)
      vegetationindexpanel.style().set('shown', false);
      burnindexpanel.style().set('shown', false);
      waterindexpanel.style().set('shown', false);
	  biophysicalpanel.style().set('shown',false);
      compositeindexpanel.style().set('shown', false);
      snowindexpanel.style().set('shown', false);
      urbanindexpanel.style().set('shown', false); 
      airtemperaturevalue.style().set('shown', false); 
    }
    else if (value === 3){
      dates.style().set('shown',false)
      cloud.style().set('shown',false)
      vegetationindexpanel.style().set('shown', false);
      burnindexpanel.style().set('shown', false);
      waterindexpanel.style().set('shown', false);
	  biophysicalpanel.style().set('shown',false);
      compositeindexpanel.style().set('shown', false);      
      snowindexpanel.style().set('shown', false);
      urbanindexpanel.style().set('shown', false);
      airtemperaturevalue.style().set('shown', false); 
    }
    else if (value === 4){
      dates.style().set('shown',false)
      cloud.style().set('shown',false)
      sarindex.style().set('shown',false)
      sarindices.style().set('shown',false)
      showsoilmoisture.style().set('shown',false)
      vegetationindexpanel.style().set('shown', false);
      burnindexpanel.style().set('shown', false);
      waterindexpanel.style().set('shown', false);
	    biophysicalpanel.style().set('shown',false);
      compositeindexpanel.style().set('shown', false);
      snowindexpanel.style().set('shown', false);
      urbanindexpanel.style().set('shown', false);
      airtemperaturevalue.style().set('shown', true);  
    }
  }
})

var FAQ_PANEL=ui.Panel({
    layout: ui.Panel.Layout.flow('vertical'),
    widgets:[
        ui.Label({ value:'Instructions'}), 
        ui.Label({ value:'Choose a boundary: 1) Give link to an asset. 2) draw a polygons with the drawing tools, 3) IARI.'}),
        ui.Label({ value:'Enter a start and end date for the time series, using the format Year-month-day (yyyy-mm-dd)'}),
        ui.Label({ value:'Select a sensor : a) Sentinel-1, b) Sentinel-2, c) Multispectral Drone'}),
        ui.Label({ value:'Select a remote senisng index (set index values if necessary)'}),
        ui.Label({ value:'Click on "Run"'}),        
        ui.Label({ value:'Different layers will be shown on the map: Satellite Image, Remote Sensing Index, and polygon'}),
        ui.Label({ value:'Click inside a polygon to plot the Remote Sensing index time series, pixel value and image download options. '}),
        ui.Label({ value:'Time interval, cloud cover, Polygon can be updated at anytime and hit the "Run" button'}), 
        ui.Label({ value:'If Sentinel-1 is selected, then Soil Moisture can be calculated using MLR equations, user must provide the values for the constant'}),
        ui.Label({ value:'If the boundary is IARI, then the user can view Soil digitial map, and on clicking the map, values of 18 major soil parameters will be dispaled in a graph'}),
        ui.Label({ value:'Make sure the size of the polygon or boundary is not more than 4 SqKm, else downloading the Index image will not be possible'})        
    ],
    style: {position: 'top-center',  shown: true,  width: '40%', height: '50%',  padding: '5px', margin: '10px'}
  });
var CloseButton = ui.Button({label: 'Close',
  onClick: function(){
    Map.remove(FAQ_PANEL);
  }
});
FAQ_PANEL.add(CloseButton);
var ButtonFAQ = ui.Button({label: 'How to use this tool?', onClick: function(){Map.add(FAQ_PANEL)}});

/////////////////////////////////////////////////////////////////////// Boundary Selection ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var asset = ui.Checkbox({label: 'GEE assets',value: false,style: {color: '#dc7a55', width: '90px'},
  onChange: function(value) {
    if (value === true) {assetinput.style().set('shown', true),  drawingTools.setShown(false), draw.setDisabled(true),iari.setDisabled(true);}
    else if  (value === false) {assetinput.style().set('shown', false),draw.setDisabled(false),iari.setDisabled(false);}
  }
})
var draw = ui.Checkbox({label: 'Draw Polygon',value: false,style: {color: '#dc7a55', width: '110px'},
  onChange: function(value) {
    if (value === true) {drawingTools.setShown(true),clearGeometry(),drawPolygon() , asset.setDisabled(true),iari.setDisabled(true);
      drawingTools.setShape(null); ;}
    else if  (value === false) {drawingTools.setShown(false),clearGeometry(),drawPolygon(), asset.setDisabled(false),iari.setDisabled(false);}//, newpolygon.style().set('shown',false)}
  }
})
var iari = ui.Checkbox({label: 'IARI',value: false,style: {color: '#dc7a55', width: '50px'},
  onChange: function(value) {
    if (value === true) {asset.setDisabled(true),draw.setDisabled(true),showsoilmapbutton.style().set('shown',true), Map.setCenter(77.158829,28.638095,15)}
    else if(value === false) {asset.setDisabled(false),draw.setDisabled(false), showsoilmapbutton.style().set('shown',false);Map.setCenter(81.8463, 25.4358, 6); }
  }
})
var boundarytype = ui.Panel({widgets:[asset, draw, iari], layout: ui.Panel.Layout.flow('horizontal')})
var assetinput = ui.Textbox({style: {padding: '0px 0px', stretch: 'horizontal', color: 'black'},placeholder: 'GEE assets',onChange: function(input) {var userInput = input;},});
var assetpanel = ui.Panel({widgets:[boundarytype, assetinput], layout: ui.Panel.Layout.flow('vertical')})

//////////////////////////////////////////////////////////////////////////////////////// Sentinel 2 index Panels /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var compositeindex = ui.Checkbox({label: 'Composite Health Index',value: false,style: {color: '#dc7a55', width: '200px'},
  onChange: function(value) {
    if (value === true) {biophysicalindex.setDisabled(true),biophysicalindices.style().set('shown', false),compositeindices.style().set('shown', true),vegetationindex.setDisabled(true),vegetationindices.style().set('shown', false);burnindex.setDisabled(true),waterindex.setDisabled(true),snowindex.setDisabled(true),urbanindex.setDisabled(true),showsoilmapbutton.setDisabled(true)}
    else if  (value === false){biophysicalindex.setDisabled(false), biophysicalindices.style().set('shown', false),compositeindices.style().set('shown', false),vegetationindices.style().set('shown', false),vegetationindex.setDisabled(false), burnindex.setDisabled(false),waterindex.setDisabled(false),snowindex.setDisabled(false),urbanindex.setDisabled(false), showsoilmapbutton.setDisabled(false);}
  }
})
var compositeindexpanel = ui.Panel({widgets:[compositeindex, compositeindices],layout: ui.Panel.Layout.flow('vertical')})

var biophysicalindex = ui.Checkbox({label: 'Biophysical Parameters',value: false,style: {color: '#dc7a55', width: '200px'},
  onChange: function(value) {
    if (value === true) {biophysicalindices.style().set('shown', true), biophysicalindices.style().set('shown', true),compositeindex.setDisabled(true), compositeindices.style().set('shown', false),vegetationindex.setDisabled(true),vegetationindices.style().set('shown', false);burnindex.setDisabled(true),waterindex.setDisabled(true),snowindex.setDisabled(true),urbanindex.setDisabled(true),showsoilmapbutton.setDisabled(true)}
    else if  (value === false){biophysicalindex.setDisabled(false),biophysicalindices.style().set('shown', false),compositeindex.setDisabled(false), compositeindices.style().set('shown', false),vegetationindices.style().set('shown', false),vegetationindex.setDisabled(false), burnindex.setDisabled(false),waterindex.setDisabled(false),snowindex.setDisabled(false),urbanindex.setDisabled(false), showsoilmapbutton.setDisabled(false);}
  }
})
var biophysicalpanel = ui.Panel({widgets:[biophysicalindex, biophysicalindices],layout: ui.Panel.Layout.flow('vertical')})

var vegetationindex = ui.Checkbox({label: 'Calculate Vegetation Index',value: false,style: {color: '#dc7a55', width: '200px'},
  onChange: function(value) {
    if (value === true) {biophysicalindex.setDisabled(true), biophysicalindices.style().set('shown', false),vegetationindices.style().set('shown', true);compositeindex.setDisabled(true),burnindex.setDisabled(true),waterindex.setDisabled(true),snowindex.setDisabled(true),urbanindex.setDisabled(true)}
    else if  (value === false) {biophysicalindex.setDisabled(false), biophysicalindices.style().set('shown', false),vegetationindices.setValue(0),vegetationindices.style().set('shown', false), compositeindex.setDisabled(false), burnindex.setDisabled(false),waterindex.setDisabled(false),snowindex.setDisabled(false),urbanindex.setDisabled(false);}
  }
})
var vegetationindexpanel = ui.Panel({widgets:[vegetationindex, vegetationindices],layout: ui.Panel.Layout.flow('vertical')})

var burnindex = ui.Checkbox({label: 'Calculate Burn Index',value: false,style: {color: '#dc7a55', width: '200px'},
  onChange: function(value) {
    if (value === true) {biophysicalindex.setDisabled(true),burnindices.style().set('shown', true);urbanindex.setDisabled(true),waterindex.setDisabled(true),snowindex.setDisabled(true),vegetationindex.setDisabled(true)}
    else if  (value === false) {biophysicalindex.setDisabled(false),burnindices.setValue(0),burnindices.style().set('shown', false), vegetationindex.setDisabled(false),waterindex.setDisabled(false),snowindex.setDisabled(false),urbanindex.setDisabled(false);}
  }
})
var burnindexpanel = ui.Panel({widgets:[burnindex, burnindices],layout: ui.Panel.Layout.flow('vertical')})

var waterindex = ui.Checkbox({label: 'Calculate Water Index',value: false,style: {color: '#dc7a55', width: '200px'},
  onChange: function(value) {
    if (value === true) {biophysicalindex.setDisabled(true), waterindices.style().set('shown', true);compositeindex.setDisabled(true),burnindex.setDisabled(true),urbanindex.setDisabled(true),snowindex.setDisabled(true),vegetationindex.setDisabled(true), showsoilmapbutton.setDisabled(true)}
    else if  (value === false) {biophysicalindex.setDisabled(false),waterindices.setValue(1),waterindices.style().set('shown', false),compositeindex.setDisabled(false),vegetationindex.setDisabled(false),burnindex.setDisabled(false),snowindex.setDisabled(false),urbanindex.setDisabled(false), showsoilmapbutton.setDisabled(false);}
  }
})
var waterindexpanel = ui.Panel({widgets:[waterindex, waterindices],layout: ui.Panel.Layout.flow('vertical')})

var snowindex = ui.Checkbox({label: 'Calculate Snow Index',value: false,style: {color: '#dc7a55', width: '200px'},
  onChange: function(value) {
    if (value === true) {biophysicalindex.setDisabled(true), snowindices.style().set('shown', true);burnindex.setDisabled(true),waterindex.setDisabled(true),urbanindex.setDisabled(true),vegetationindex.setDisabled(true)}
    else if  (value === false) {biophysicalindex.setDisabled(false), snowindices.setValue(0),snowindices.style().set('shown', false),vegetationindex.setDisabled(false),burnindex.setDisabled(false),waterindex.setDisabled(false),urbanindex.setDisabled(false);}
  }
})
var snowindexpanel = ui.Panel({widgets:[snowindex, snowindices],layout: ui.Panel.Layout.flow('vertical')})

var urbanindex = ui.Checkbox({label: 'Calculate Urban index',value: false,style: {color: '#dc7a55', width: '200px'},
  onChange: function(value) {
    if (value === true) {biophysicalindex.setDisabled(true),urbanindices.style().set('shown', true);burnindex.setDisabled(true),waterindex.setDisabled(true),snowindex.setDisabled(true),vegetationindex.setDisabled(true)}
    else if  (value === false) {biophysicalindex.setDisabled(false), urbanindices.setValue(0),urbanindices.style().set('shown', false);burnindex.setDisabled(false),waterindex.setDisabled(false),snowindex.setDisabled(false),vegetationindex.setDisabled(false)}
  }
})
var urbanindexpanel = ui.Panel({widgets:[urbanindex, urbanindices],layout: ui.Panel.Layout.flow('vertical')})

////////////////////////////////// Adding widgets ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

panel.add(toolPanel)
panel.add(projectdetails)
panel.add(assetpanel)
panel.add(sensorselect)
panel.add(dates)
panel.add(cloud)
panel.add(showsoilmapbutton)
panel.add(soildatalist)
panel.add(vegetationindexpanel)
panel.add(waterindexpanel)
panel.add(compositeindexpanel)
panel.add(biophysicalpanel)
panel.add(airtemperaturevalue)
panel.add(C1value)
panel.add(C2value)
panel.add(Lvalue)
panel.add(cvalue)
panel.add(gvalue)
panel.add(pvalue)
panel.add(kvalue)
panel.add(alphavalue)
panel.add(betavalue)
panel.add(gammavalue)
panel.add(sigmavalue)
panel.add(omegavalue)
panel.add(cexpvalue)
panel.add(nexpvalue)
panel.add(slavalue)
panel.add(slbvalue)
panel.add(lambdaGvalue)
panel.add(lambdaRvalue)
panel.add(lambdaNvalue)
panel.add(PARvalue)
panel.add(fdeltavalue)
panel.add(calculate)
panel.add(ButtonFAQ)

dates.style().set('shown',false);
cloud.style().set('shown',false);
assetinput.style().set('shown', false);
dates.style().set('shown',false);
soildatalist.style().set('shown',false);
showsoilmapbutton.style().set('shown',false);
vegetationindices.style().set('shown', false);
burnindices.style().set('shown', false);
waterindices.style().set('shown', false);
compositeindices.style().set('shown', false);
snowindices.style().set('shown', false);
urbanindices.style().set('shown', false);
biophysicalpanel.style().set('shown',false);
biophysicalindices.style().set('shown',false);
airtemperaturevalue.style().set('shown', false);
vegetationindexpanel.style().set('shown', false);
burnindexpanel.style().set('shown', false);
waterindexpanel.style().set('shown', false);
compositeindexpanel.style().set('shown', false);
snowindexpanel.style().set('shown', false);
urbanindexpanel.style().set('shown', false);
C1value.style().set('shown', false);
C2value.style().set('shown', false);
Lvalue.style().set('shown', false);
cvalue.style().set('shown', false);
gvalue.style().set('shown', false);
pvalue.style().set('shown', false);
kvalue.style().set('shown', false);
PARvalue.style().set('shown',false);
alphavalue.style().set('shown', false);
betavalue.style().set('shown', false);
gammavalue.style().set('shown', false);
sigmavalue.style().set('shown', false);
omegavalue.style().set('shown', false);
cexpvalue.style().set('shown', false);
nexpvalue.style().set('shown', false);
slavalue.style().set('shown', false);
slbvalue.style().set('shown', false);
lambdaGvalue.style().set('shown', false);
lambdaRvalue.style().set('shown', false);
lambdaNvalue.style().set('shown', false);
fdeltavalue.style().set('shown', false);

///////////////////////////////////////////////////////////////////////////////// Main Process Functions //////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////// Cloud Mask, Clip and Mosaic function /////////////////////////////////////////////////////////////////////////////////////////////////

function clp(image) {
  return image.clip(boundary);
}

function imagecollection (){
  panelo.clear()
  var panel1 = ui.Panel();
  panel1.style().set({width: '320px',});
  Map.add(panel1)
  if (asset.getValue() == true){
    Map.clear()
    boundary = ee.FeatureCollection(ee.String(assetinput.getValue())), Map.centerObject(boundary, 15)
  }
  else if (draw.getValue() == true){
    Map.clear()
    boundary = drawingTools.layers().get(0).getEeObject(), Map.centerObject(boundary, 15);
  }
  else if (iari.getValue() == true){
    Map.clear()
    //showsoilmapbutton.setValue(false)
    var iariboundary = ee.FeatureCollection('users/NePPA/IARI_Boundary/IARI_Outerboundary_Innerboundary')
    boundary = ee.FeatureCollection('users/tarunkondraju/IARI_NePPA/IARI_shapefiles/rabi2021-22_crops_24722')
    var empty = ee.Image().byte();
    var palette = ['FFE4E1','8fbc8f']
    var iaricoloured = empty.paint(iariboundary, 'Farm_Area').paint(iariboundary, 0, 2);
    Map.addLayer(iaricoloured,{palette: ['000000'].concat(palette),min: 0,max: palette.length},'IARI Boundary');
    var empty = ee.Image().byte();
    var boundary1 = empty.paint({
      featureCollection: boundary,
      color: '1',
      width: '3'
    });
    Map.addLayer(boundary1, {palette: 'BLACK', max: 14}, 'IARI Agriculture Blocks');
    var iarilegend = ui.Panel({style: {position: 'bottom-left',padding: '8px 15px'}});
    var iarilegendlabel = ui.Label({value: 'IARI Land Use',style: {fontWeight: 'bold',fontSize: '18px',margin: '0 0 4px 0',padding: '0'}});
    iarilegend.add(iarilegendlabel);
    var content = function(color, label) {
      var box = ui.Label({style: {backgroundColor: '#' + color,padding: '9px',margin: '0 0 4px 0'}});
      var labels = ui.Label({value: label,style: {margin: '0 0 4px 6px'}});
      return ui.Panel({widgets: [box, labels],layout: ui.Panel.Layout.Flow('horizontal')});
    };
    var classcolor = ['FFE4E1','8fbc8f'];
    var labelName = ['Built Area','Agriculture'];
    for (var i = 0; i < 2; i++) {iarilegend.add(content(classcolor[i], labelName[i]));}  
    Map.add(iarilegend);
    Map.centerObject(boundary, 15)      
  };
  if (showsoilmapbutton.getValue() == true){
    var soilimg = ee.Image('users/NePPA/IARI_Soil_Data/All_Soil_Properties');
    print(soilimg)
    var img = soilimg.select(['b1','b2','b3','b4','b5','b6','b7','b8','b9','b10','b11','b12','b13','b14','b15','b16','b17','b18']).rename(['N', 'P', 'K','Fe', 'Cu', 'Zn','Mn', 'S', 'CEC','Silt', 'Sand', 'Clay','Ph', 'PBS', 'ExNa','ExMg', 'ExK', 'ExCa']);
    print(img)
    var wavelengths =['N', 'P', 'K','Fe', 'Cu', 'Zn','Mn', 'S', 'CEC','Silt', 'Sand', 'Clay','Ph', 'PBS', 'ExNa','ExMg', 'ExK', 'ExCa']
    var soildata
    var indexpanellabel
    var bandname
    if (soildatalist.getValue() == 0){soildata = img.select('CEC');indexpanellabel = 'CEC (meq/100g)',bandname = 'CEC'}
      else if (soildatalist.getValue() === 1) {soildata = img.select('Clay');indexpanellabel = 'Clay (%)', bandname = 'Clay'}
      else if (soildatalist.getValue() === 2) {soildata = img.select('Cu');indexpanellabel = 'Copper (ppm)', bandname = 'Cu'}
      else if (soildatalist.getValue() === 3) {soildata = img.select('ExK');indexpanellabel = 'Ex Potassium', bandname = 'ExK'}
      else if (soildatalist.getValue() === 4) {soildata = img.select('ExCa');indexpanellabel = 'Ex Calcium', bandname = 'ExCa'}
      else if (soildatalist.getValue() === 5) {soildata = img.select('ExNa');indexpanellabel = 'Ex Sodium', bandname = 'ExNa'}
      else if (soildatalist.getValue() === 6) {soildata = img.select('Fe');indexpanellabel = 'Iron (ppm)', bandname = 'Fe'}
      else if (soildatalist.getValue() === 7) {soildata = img.select('K');indexpanellabel = 'Avail. Potassium (kg/ha)', bandname = 'K'}
      else if (soildatalist.getValue() === 8) {soildata = img.select('Mn');indexpanellabel = 'Manganese (ppm)', bandname = 'Mn'}
      else if (soildatalist.getValue() === 9) {soildata = img.select('N');indexpanellabel = 'Avail. Nitrogen (kg/ha)', bandname = 'N'}
      else if (soildatalist.getValue() === 10) {soildata = img.select('P');indexpanellabel = 'Avail. phosphorus (kg/ha)', bandname = 'P'}
      else if (soildatalist.getValue() === 11) {soildata = img.select('PBS');indexpanellabel = 'Soil Base Saturaion (%)', bandname = 'PBS'}
      else if (soildatalist.getValue() === 12) {soildata = img.select('Ph');indexpanellabel = 'Soil Reaction (pH)', bandname = 'Ph'}
      else if (soildatalist.getValue() === 13) {soildata = img.select('S');indexpanellabel = 'Sulphul (ppm)', bandname = 'S'}
      else if (soildatalist.getValue() === 14) {soildata = img.select('Zn');indexpanellabel = 'Zinc (ppm)', bandname = 'Zn'}
      else if (soildatalist.getValue() === 15) {soildata = img.select('Sand');indexpanellabel = 'Sand (%)', bandname = 'Sand'}
      else if (soildatalist.getValue() === 16) {soildata = img.select('Silt');indexpanellabel = 'Silt (%)', bandname = 'Silt'}
      else if (soildatalist.getValue() === 17) {soildata = img.select('ExMg');indexpanellabel = 'Ex Magnesium', bandname = 'ExMg'}

    var soilminvalue = (ee.Number.parse(ee.String((soildata.reduceRegion(ee.Reducer.min(),boundary)).get(bandname))).round());
    var soilmaxvalue = (ee.Number.parse(ee.String((soildata.reduceRegion(ee.Reducer.max(),boundary)).get(bandname))).round());    
    var imgviz = {min: soilminvalue.getInfo(), max: soilmaxvalue.getInfo(), palette: ['#ce7e45','#fcd163','#99b718','#66a000', '#004c00']}
    Map.addLayer(soildata,imgviz,indexpanellabel)
    function makeColorBarParams(palette) {return {bbox: [0, 0, 1, 0.1],dimensions: '10x10',format: 'png',min: 0,max: 1,palette: palette,};}
    var colorBar = ui.Thumbnail({image: ee.Image.pixelLonLat().select(0),params: makeColorBarParams(imgviz.palette),style: {stretch: 'horizontal', margin: '0px 8px', maxHeight: '24px'},});
    var legendLabels = ui.Panel({widgets: [ui.Label(soilminvalue.getInfo(), {margin: '4px 8px'}), ui.Label(((soilmaxvalue.getInfo()-soilminvalue.getInfo()) / 2+soilminvalue.getInfo()),{margin: '4px 8px', textAlign: 'center', stretch: 'horizontal'}),ui.Label(soilmaxvalue.getInfo(), {margin: '4px 8px'})],layout: ui.Panel.Layout.flow('horizontal')});
    var legendTitle = ui.Label({value: indexpanellabel,style: {fontWeight: 'bold'}});
    var legendPanel = ui.Panel({widgets:[legendTitle, colorBar, legendLabels], style: {position: 'bottom-left'}});
    Map.add(legendPanel);
    var i=0;
    var print_point = function(coords, map) {
      i++;
      var coord_array = Object.keys(coords).map(function (key) { return coords[key]; });
      var point = ee.Geometry.Point(coord_array);
      Map.addLayer(point,{},'Inspection Point'+i);
    };
    Map.onClick(print_point);    
    var showInteractiveChart = true; 
    if (showInteractiveChart === true){
      var soilinspectorPanel = ui.Panel({style:{position: 'middle-right',stretch:  'horizontal'}});
      panelo.add(soilinspectorPanel);
      Map.onClick(function(scoords) {
        soilinspectorPanel.clear();
        var point = ee.FeatureCollection(ee.Geometry.Point(scoords.lon, scoords.lat)).map(function(addLabels){
          var labelNames = addLabels.set('Label_Simage','Soil Property Value');
        return labelNames;
        });
        var soilchart = ui.Chart.image
        .regions({image: img,regions: point,reducer: ee.Reducer.mean(),scale: 10,seriesProperty: 'Graph Showing Soil Properties',xLabels: wavelengths})
        .setChartType('ScatterChart')//'ColumnChart')
        .setOptions({title: 'Soil Property Value',vAxis: {title: 'Value'},hAxis: {title: 'Soil Property',},colors: ['ff0000']});
        soilinspectorPanel.add(soilchart);            
      });
    }
  }
 else if (sensorselect.getValue() == 1){ 
    var dataset = ee.ImageCollection('COPERNICUS/S2_SR')
    .filter(ee.Filter.date(startdate.getValue(),enddate.getValue()))
    .filterBounds(boundary)
    .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',ee.Number.parse(cloudcover.getValue())))
    var dataset_mosaic = mosaicByDate(dataset);
    var clip = dataset_mosaic.map(clp).sort('system:time_start', true);
    var indeximagecollection
    var indexpanellabel
  	if (vegetationindex.getValue() == true) {
  		if(vegetationindices.getValue() === 0){indeximagecollection = ee.ImageCollection(clip.map(AFRI1600));indexpanellabel = 'AFRI1600';}
  		else if(vegetationindices.getValue() === 1){indeximagecollection = ee.ImageCollection(clip.map(AFRI2100));indexpanellabel = 'AFRI2100';}
  		else if(vegetationindices.getValue() === 2){indeximagecollection = ee.ImageCollection(clip.map(ARI));indexpanellabel = 'ARI';}
  		else if(vegetationindices.getValue() === 3){indeximagecollection = ee.ImageCollection(clip.map(ARI2));indexpanellabel = 'ARI2';}
  		else if(vegetationindices.getValue() === 4){indeximagecollection = ee.ImageCollection(clip.map(ARVI));indexpanellabel = 'ARVI';}
  		else if(vegetationindices.getValue() === 5){indeximagecollection = ee.ImageCollection(clip.map(ATSAVI));indexpanellabel = 'ATSAVI';}
  		else if(vegetationindices.getValue() === 6){indeximagecollection = ee.ImageCollection(clip.map(AVI));indexpanellabel = 'AVI';}
  		else if(vegetationindices.getValue() === 7){indeximagecollection = ee.ImageCollection(clip.map(BCC));indexpanellabel = 'BCC';}
  		else if(vegetationindices.getValue() === 8){indeximagecollection = ee.ImageCollection(clip.map(BNDVI));indexpanellabel = 'BNDVI';}
  		else if(vegetationindices.getValue() === 9){indeximagecollection = ee.ImageCollection(clip.map(BWDRVI));indexpanellabel = 'BWDRVI';}
  		else if(vegetationindices.getValue() === 10){indeximagecollection = ee.ImageCollection(clip.map(CIG));indexpanellabel = 'CIG';}
  		else if(vegetationindices.getValue() === 11){indeximagecollection = ee.ImageCollection(clip.map(CIRE));indexpanellabel = 'CIRE';}
  		else if(vegetationindices.getValue() === 12){indeximagecollection = ee.ImageCollection(clip.map(CVI));indexpanellabel = 'CVI';}
  		else if(vegetationindices.getValue() === 13){indeximagecollection = ee.ImageCollection(clip.map(DVI));indexpanellabel = 'DVI';}
  		else if(vegetationindices.getValue() === 14){indeximagecollection = ee.ImageCollection(clip.map(DVIplus));indexpanellabel = 'DVIplus';}
  		else if(vegetationindices.getValue() === 15){indeximagecollection = ee.ImageCollection(clip.map(EVI));indexpanellabel = 'EVI';}
  		else if(vegetationindices.getValue() === 16){indeximagecollection = ee.ImageCollection(clip.map(EVI2));indexpanellabel = 'EVI2';}
  		else if(vegetationindices.getValue() === 17){indeximagecollection = ee.ImageCollection(clip.map(ExG));indexpanellabel = 'ExG';}
  		else if(vegetationindices.getValue() === 18){indeximagecollection = ee.ImageCollection(clip.map(ExGR));indexpanellabel = 'ExGR';}
  		else if(vegetationindices.getValue() === 19){indeximagecollection = ee.ImageCollection(clip.map(ExR));indexpanellabel = 'ExR';}
  		else if(vegetationindices.getValue() === 20){indeximagecollection = ee.ImageCollection(clip.map(FCVI));indexpanellabel = 'FCVI';}
  		else if(vegetationindices.getValue() === 21){indeximagecollection = ee.ImageCollection(clip.map(GARI));indexpanellabel = 'GARI';}
  		else if(vegetationindices.getValue() === 22){indeximagecollection = ee.ImageCollection(clip.map(GBNDVI));indexpanellabel = 'GBNDVI';}
  		else if(vegetationindices.getValue() === 23){indeximagecollection = ee.ImageCollection(clip.map(GCC));indexpanellabel = 'GCC';}
  		else if(vegetationindices.getValue() === 24){indeximagecollection = ee.ImageCollection(clip.map(GDVI));indexpanellabel = 'GDVI';}
  		else if(vegetationindices.getValue() === 25){indeximagecollection = ee.ImageCollection(clip.map(GEMI));indexpanellabel = 'GEMI';}
  		else if(vegetationindices.getValue() === 26){indeximagecollection = ee.ImageCollection(clip.map(GLI));indexpanellabel = 'GLI';}
  		else if(vegetationindices.getValue() === 27){indeximagecollection = ee.ImageCollection(clip.map(GM1));indexpanellabel = 'GM1';}
  		else if(vegetationindices.getValue() === 28){indeximagecollection = ee.ImageCollection(clip.map(GM2));indexpanellabel = 'GM2';}
  		else if(vegetationindices.getValue() === 29){indeximagecollection = ee.ImageCollection(clip.map(GNDVI));indexpanellabel = 'GNDVI';}
  		else if(vegetationindices.getValue() === 30){indeximagecollection = ee.ImageCollection(clip.map(GOSAVI));indexpanellabel = 'GOSAVI';}
  		else if(vegetationindices.getValue() === 31){indeximagecollection = ee.ImageCollection(clip.map(GRNDVI));indexpanellabel = 'GRNDVI';}
  		else if(vegetationindices.getValue() === 32){indeximagecollection = ee.ImageCollection(clip.map(GRVI));indexpanellabel = 'GRVI';}
  		else if(vegetationindices.getValue() === 33){indeximagecollection = ee.ImageCollection(clip.map(GSAVI));indexpanellabel = 'GSAVI';}
  		else if(vegetationindices.getValue() === 34){indeximagecollection = ee.ImageCollection(clip.map(GVMI));indexpanellabel = 'GVMI';}
  		else if(vegetationindices.getValue() === 35){indeximagecollection = ee.ImageCollection(clip.map(IAVI));indexpanellabel = 'IAVI';}
  		else if(vegetationindices.getValue() === 36){indeximagecollection = ee.ImageCollection(clip.map(IKAW));indexpanellabel = 'IKAW';}
  		else if(vegetationindices.getValue() === 37){indeximagecollection = ee.ImageCollection(clip.map(IPVI));indexpanellabel = 'IPVI';}
  		else if(vegetationindices.getValue() === 38){indeximagecollection = ee.ImageCollection(clip.map(IRECI));indexpanellabel = 'IRECI';}
  		else if(vegetationindices.getValue() === 39){indeximagecollection = ee.ImageCollection(clip.map(MCARI));indexpanellabel = 'MCARI';}
  		else if(vegetationindices.getValue() === 40){indeximagecollection = ee.ImageCollection(clip.map(MCARI1));indexpanellabel = 'MCARI1';}
  		else if(vegetationindices.getValue() === 41){indeximagecollection = ee.ImageCollection(clip.map(MCARI2));indexpanellabel = 'MCARI2';}
  		else if(vegetationindices.getValue() === 42){indeximagecollection = ee.ImageCollection(clip.map(MCARI705));indexpanellabel = 'MCARI705';}
  		else if(vegetationindices.getValue() === 43){indeximagecollection = ee.ImageCollection(clip.map(MCARIOSAVI));indexpanellabel = 'MCARIOSAVI';}
  		else if(vegetationindices.getValue() === 44){indeximagecollection = ee.ImageCollection(clip.map(MCARIOSAVI705));indexpanellabel = 'MCARIOSAVI705';}
  		else if(vegetationindices.getValue() === 45){indeximagecollection = ee.ImageCollection(clip.map(MGRVI));indexpanellabel = 'MGRVI';}
  		else if(vegetationindices.getValue() === 46){indeximagecollection = ee.ImageCollection(clip.map(MNDVI));indexpanellabel = 'MNDVI';}
  		else if(vegetationindices.getValue() === 47){indeximagecollection = ee.ImageCollection(clip.map(MNLI));indexpanellabel = 'MNLI';}
  		else if(vegetationindices.getValue() === 48){indeximagecollection = ee.ImageCollection(clip.map(MRBVI));indexpanellabel = 'MRBVI';}
  		else if(vegetationindices.getValue() === 49){indeximagecollection = ee.ImageCollection(clip.map(MSAVI));indexpanellabel = 'MSAVI';}
  		else if(vegetationindices.getValue() === 50){indeximagecollection = ee.ImageCollection(clip.map(MSI));indexpanellabel = 'MSI';}
  		else if(vegetationindices.getValue() === 51){indeximagecollection = ee.ImageCollection(clip.map(MSR));indexpanellabel = 'MSR';}
  		else if(vegetationindices.getValue() === 52){indeximagecollection = ee.ImageCollection(clip.map(MSR705));indexpanellabel = 'MSR705';}
  		else if(vegetationindices.getValue() === 53){indeximagecollection = ee.ImageCollection(clip.map(MTCI));indexpanellabel = 'MTCI';}
  		else if(vegetationindices.getValue() === 54){indeximagecollection = ee.ImageCollection(clip.map(MTVI1));indexpanellabel = 'MTVI1';}
  		else if(vegetationindices.getValue() === 55){indeximagecollection = ee.ImageCollection(clip.map(MTVI2));indexpanellabel = 'MTVI2';}
  		else if(vegetationindices.getValue() === 56){indeximagecollection = ee.ImageCollection(clip.map(ND705));indexpanellabel = 'ND705';}
  		else if(vegetationindices.getValue() === 57){indeximagecollection = ee.ImageCollection(clip.map(NDDI));indexpanellabel = 'NDDI';}
  		else if(vegetationindices.getValue() === 58){indeximagecollection = ee.ImageCollection(clip.map(NDGI));indexpanellabel = 'NDGI';}
  		else if(vegetationindices.getValue() === 59){indeximagecollection = ee.ImageCollection(clip.map(NDII));indexpanellabel = 'NDII';}
  		else if(vegetationindices.getValue() === 60){indeximagecollection = ee.ImageCollection(clip.map(NDMI));indexpanellabel = 'NDMI';}
  		else if(vegetationindices.getValue() === 61){indeximagecollection = ee.ImageCollection(clip.map(NDPI));indexpanellabel = 'NDPI';}
  		else if(vegetationindices.getValue() === 62){indeximagecollection = ee.ImageCollection(clip.map(NDREI));indexpanellabel = 'NDREI';}
  		else if(vegetationindices.getValue() === 63){indeximagecollection = ee.ImageCollection(clip.map(NDVI));indexpanellabel = 'NDVI';}
  		else if(vegetationindices.getValue() === 64){indeximagecollection = ee.ImageCollection(clip.map(ND705));indexpanellabel = 'ND705';}
  		else if(vegetationindices.getValue() === 65){indeximagecollection = ee.ImageCollection(clip.map(NDYI));indexpanellabel = 'NDYI';}
  		else if(vegetationindices.getValue() === 66){indeximagecollection = ee.ImageCollection(clip.map(NGRDI));indexpanellabel = 'NGRDI';}
  		else if(vegetationindices.getValue() === 67){indeximagecollection = ee.ImageCollection(clip.map(NIRv));indexpanellabel = 'NIRv';}
  		else if(vegetationindices.getValue() === 68){indeximagecollection = ee.ImageCollection(clip.map(NIRvH2));indexpanellabel = 'NIRvH2';}
  		else if(vegetationindices.getValue() === 69){indeximagecollection = ee.ImageCollection(clip.map(NIRvP));indexpanellabel = 'NIRvP';}
  		else if(vegetationindices.getValue() === 70){indeximagecollection = ee.ImageCollection(clip.map(NLI));indexpanellabel = 'NLI';}
  		else if(vegetationindices.getValue() === 71){indeximagecollection = ee.ImageCollection(clip.map(NMDI));indexpanellabel = 'NMDI';}
  		else if(vegetationindices.getValue() === 72){indeximagecollection = ee.ImageCollection(clip.map(NRFIg));indexpanellabel = 'NRFIg';}
  		else if(vegetationindices.getValue() === 73){indeximagecollection = ee.ImageCollection(clip.map(NRFIr));indexpanellabel = 'NRFIr';}
  		else if(vegetationindices.getValue() === 74){indeximagecollection = ee.ImageCollection(clip.map(NormG));indexpanellabel = 'NormG';}
  		else if(vegetationindices.getValue() === 75){indeximagecollection = ee.ImageCollection(clip.map(NormNIR));indexpanellabel = 'NormNIR';}
  		else if(vegetationindices.getValue() === 76){indeximagecollection = ee.ImageCollection(clip.map(NormR));indexpanellabel = 'NormR';}
  		else if(vegetationindices.getValue() === 77){indeximagecollection = ee.ImageCollection(clip.map(OCVI));indexpanellabel = 'OCVI';}
  		else if(vegetationindices.getValue() === 78){indeximagecollection = ee.ImageCollection(clip.map(OSAVI));indexpanellabel = 'OSAVI';}
  		else if(vegetationindices.getValue() === 79){indeximagecollection = ee.ImageCollection(clip.map(PSRI));indexpanellabel = 'PSRI';}
  		else if(vegetationindices.getValue() === 80){indeximagecollection = ee.ImageCollection(clip.map(RCC));indexpanellabel = 'RCC';}
  		else if(vegetationindices.getValue() === 81){indeximagecollection = ee.ImageCollection(clip.map(RDVI));indexpanellabel = 'RDVI';}
  		else if(vegetationindices.getValue() === 82){indeximagecollection = ee.ImageCollection(clip.map(REDSI));indexpanellabel = 'REDSI';}
  		else if(vegetationindices.getValue() === 83){indeximagecollection = ee.ImageCollection(clip.map(RENDVI));indexpanellabel = 'RENDVI';}
  		else if(vegetationindices.getValue() === 84){indeximagecollection = ee.ImageCollection(clip.map(RGBVI));indexpanellabel = 'RGBVI';}
  		else if(vegetationindices.getValue() === 85){indeximagecollection = ee.ImageCollection(clip.map(RGRI));indexpanellabel = 'RGRI';}
  		else if(vegetationindices.getValue() === 86){indeximagecollection = ee.ImageCollection(clip.map(RI));indexpanellabel = 'RI';}
  		else if(vegetationindices.getValue() === 87){indeximagecollection = ee.ImageCollection(clip.map(RVI));indexpanellabel = 'RVI';}
  		else if(vegetationindices.getValue() === 88){indeximagecollection = ee.ImageCollection(clip.map(S2REP));indexpanellabel = 'S2REP';}
  		else if(vegetationindices.getValue() === 89){indeximagecollection = ee.ImageCollection(clip.map(SARVI));indexpanellabel = 'SARVI';}
  		else if(vegetationindices.getValue() === 90){indeximagecollection = ee.ImageCollection(clip.map(SAVI));indexpanellabel = 'SAVI';}
  		else if(vegetationindices.getValue() === 91){indeximagecollection = ee.ImageCollection(clip.map(SAVI2));indexpanellabel = 'SAVI2';}
  		else if(vegetationindices.getValue() === 92){indeximagecollection = ee.ImageCollection(clip.map(SEVI));indexpanellabel = 'SEVI';}
  		else if(vegetationindices.getValue() === 93){indeximagecollection = ee.ImageCollection(clip.map(SI));indexpanellabel = 'SI';}
  		else if(vegetationindices.getValue() === 94){indeximagecollection = ee.ImageCollection(clip.map(SIPI));indexpanellabel = 'SIPI';}
  		else if(vegetationindices.getValue() === 95){indeximagecollection = ee.ImageCollection(clip.map(SR));indexpanellabel = 'SR';}
  		else if(vegetationindices.getValue() === 96){indeximagecollection = ee.ImageCollection(clip.map(SR2));indexpanellabel = 'SR2';}
  		else if(vegetationindices.getValue() === 97){indeximagecollection = ee.ImageCollection(clip.map(SR3));indexpanellabel = 'SR3';}
  		else if(vegetationindices.getValue() === 98){indeximagecollection = ee.ImageCollection(clip.map(SR555));indexpanellabel = 'SR555';}
  		else if(vegetationindices.getValue() === 99){indeximagecollection = ee.ImageCollection(clip.map(SR705));indexpanellabel = 'SR705';}
  		else if(vegetationindices.getValue() === 100){indeximagecollection = ee.ImageCollection(clip.map(SeLI));indexpanellabel = 'SeLI';}
  		else if(vegetationindices.getValue() === 101){indeximagecollection = ee.ImageCollection(clip.map(TCARI));indexpanellabel = 'TCARI';}
  		else if(vegetationindices.getValue() === 102){indeximagecollection = ee.ImageCollection(clip.map(TCARIOSAVI));indexpanellabel = 'TCARIOSAVI';}
  		else if(vegetationindices.getValue() === 103){indeximagecollection = ee.ImageCollection(clip.map(TCARIOSAVI705));indexpanellabel = 'TCARIOSAVI705';}
  		else if(vegetationindices.getValue() === 104){indeximagecollection = ee.ImageCollection(clip.map(TCI));indexpanellabel = 'TCI';}
  		else if(vegetationindices.getValue() === 105){indeximagecollection = ee.ImageCollection(clip.map(TDVI));indexpanellabel = 'TDVI';}
  		else if(vegetationindices.getValue() === 106){indeximagecollection = ee.ImageCollection(clip.map(TGI));indexpanellabel = 'TGI';}
  		else if(vegetationindices.getValue() === 107){indeximagecollection = ee.ImageCollection(clip.map(TRRVI));indexpanellabel = 'TRRVI';}
  		else if(vegetationindices.getValue() === 108){indeximagecollection = ee.ImageCollection(clip.map(TSAVI));indexpanellabel = 'TSAVI';}
  		else if(vegetationindices.getValue() === 109){indeximagecollection = ee.ImageCollection(clip.map(TTVI));indexpanellabel = 'TTVI';}
  		else if(vegetationindices.getValue() === 110){indeximagecollection = ee.ImageCollection(clip.map(TVI));indexpanellabel = 'TVI';}
  		else if(vegetationindices.getValue() === 111){indeximagecollection = ee.ImageCollection(clip.map(TriVI));indexpanellabel = 'TriVI';}
  		else if(vegetationindices.getValue() === 112){indeximagecollection = ee.ImageCollection(clip.map(VARI));indexpanellabel = 'VARI';}
  		else if(vegetationindices.getValue() === 113){indeximagecollection = ee.ImageCollection(clip.map(VARI700));indexpanellabel = 'VARI700';}
  		else if(vegetationindices.getValue() === 114){indeximagecollection = ee.ImageCollection(clip.map(VI700));indexpanellabel = 'VI700';}
  		else if(vegetationindices.getValue() === 115){indeximagecollection = ee.ImageCollection(clip.map(VIG));indexpanellabel = 'VIG';}
  		else if(vegetationindices.getValue() === 116){indeximagecollection = ee.ImageCollection(clip.map(WDRVI));indexpanellabel = 'WDRVI';}
  		else if(vegetationindices.getValue() === 117){indeximagecollection = ee.ImageCollection(clip.map(WDVI));indexpanellabel = 'WDVI';}
  		else if(vegetationindices.getValue() === 118){indeximagecollection = ee.ImageCollection(clip.map(mND705));indexpanellabel = 'mND705';}
  		else if(vegetationindices.getValue() === 119){indeximagecollection = ee.ImageCollection(clip.map(mSR705));indexpanellabel = 'mSR705';}
  	}
  	else if (burnindex.getValue() == true) {
  		if(burnindices.getValue() === 0){indeximagecollection = ee.ImageCollection(clip.map(BAI));indexpanellabel = 'BAI';}
  		else if(burnindices.getValue() === 1){indeximagecollection = ee.ImageCollection(clip.map(BAIM));indexpanellabel = 'BAIM';}
  		else if(burnindices.getValue() === 2){indeximagecollection = ee.ImageCollection(clip.map(BAIS2));indexpanellabel = 'BAIS2';}
  		else if(burnindices.getValue() === 3){indeximagecollection = ee.ImageCollection(clip.map(CSI));indexpanellabel = 'CSI';}
  		else if(burnindices.getValue() === 4){indeximagecollection = ee.ImageCollection(clip.map(MIRBI));indexpanellabel = 'MIRBI';}
  		else if(burnindices.getValue() === 5){indeximagecollection = ee.ImageCollection(clip.map(NBR));indexpanellabel = 'NBR';}
  		else if(burnindices.getValue() === 6){indeximagecollection = ee.ImageCollection(clip.map(NBR2));indexpanellabel = 'NBR2';}
  		else if(burnindices.getValue() === 7){indeximagecollection = ee.ImageCollection(clip.map(NBRSWIR));indexpanellabel = 'NBRSWIR';}
  		else if(burnindices.getValue() === 8){indeximagecollection = ee.ImageCollection(clip.map(NBRplus));indexpanellabel = 'NBRplus';}
  		else if(burnindices.getValue() === 9){indeximagecollection = ee.ImageCollection(clip.map(NDSWIR));indexpanellabel = 'NDSWIR';}
  	}
  	else if (waterindex.getValue() == true){
  		if(waterindices.getValue() === 1){indeximagecollection = ee.ImageCollection(clip.map(AWEInsh));indexpanellabel = 'AWEInsh';}
  		else if(waterindices.getValue() === 3){indeximagecollection = ee.ImageCollection(clip.map(LSWI));indexpanellabel = 'LSWI';}
  		else if(waterindices.getValue() === 4){indeximagecollection = ee.ImageCollection(clip.map(MBWI));indexpanellabel = 'MBWI';}
  		else if(waterindices.getValue() === 5){indeximagecollection = ee.ImageCollection(clip.map(MLSWI26));indexpanellabel = 'MLSWI26';}
  		else if(waterindices.getValue() === 6){indeximagecollection = ee.ImageCollection(clip.map(MLSWI27));indexpanellabel = 'MLSWI27';}
  		else if(waterindices.getValue() === 7){indeximagecollection = ee.ImageCollection(clip.map(MNDWI));indexpanellabel = 'MNDWI';}
  		else if(waterindices.getValue() === 8){indeximagecollection = ee.ImageCollection(clip.map(MuWIR));indexpanellabel = 'MuWIR';}
  		else if(waterindices.getValue() === 9){indeximagecollection = ee.ImageCollection(clip.map(NDCI));indexpanellabel = 'NDCI';}
  		else if(waterindices.getValue() === 10){indeximagecollection = ee.ImageCollection(clip.map(NDPonI));indexpanellabel = 'NDPonI';}
  		else if(waterindices.getValue() === 11){indeximagecollection = ee.ImageCollection(clip.map(NDTI));indexpanellabel = 'NDTI';}
  		else if(waterindices.getValue() === 12){indeximagecollection = ee.ImageCollection(clip.map(NDVIMNDWI));indexpanellabel = 'NDVIMNDWI';}
  		else if(waterindices.getValue() === 13){indeximagecollection = ee.ImageCollection(clip.map(NDWI));indexpanellabel = 'NDWI';}
  		else if(waterindices.getValue() === 14){indeximagecollection = ee.ImageCollection(clip.map(NDWIns));indexpanellabel = 'NDWIns';}
  		else if(waterindices.getValue() === 15){indeximagecollection = ee.ImageCollection(clip.map(NSDSI1));indexpanellabel = 'NSDSI1';}
  		else if(waterindices.getValue() === 16){indeximagecollection = ee.ImageCollection(clip.map(NSDSI2));indexpanellabel = 'NSDSI2';}
  		else if(waterindices.getValue() === 17){indeximagecollection = ee.ImageCollection(clip.map(NSDSI3));indexpanellabel = 'NSDSI3';}
  		else if(waterindices.getValue() === 18){indeximagecollection = ee.ImageCollection(clip.map(NWI));indexpanellabel = 'NWI';}
  		else if(waterindices.getValue() === 19){indeximagecollection = ee.ImageCollection(clip.map(S2WI));indexpanellabel = 'S2WI';}
  		else if(waterindices.getValue() === 20){indeximagecollection = ee.ImageCollection(clip.map(SWM));indexpanellabel = 'SWM';}
  		else if(waterindices.getValue() === 21){indeximagecollection = ee.ImageCollection(clip.map(WI1));indexpanellabel = 'WI1';}
  		else if(waterindices.getValue() === 22){indeximagecollection = ee.ImageCollection(clip.map(WI2));indexpanellabel = 'WI2';}
  		else if(waterindices.getValue() === 23){indeximagecollection = ee.ImageCollection(clip.map(WRI));indexpanellabel = 'WRI';}
  	}
  	else if (snowindex.getValue() == true){
  		if(burnindices.getValue() === 0){indeximagecollection = ee.ImageCollection(clip.map(NBSIMS));indexpanellabel = 'NBSIMS';}
  		else if(burnindices.getValue() === 1){indeximagecollection = ee.ImageCollection(clip.map(NDGlaI));indexpanellabel = 'NDGlaI';}
  		else if(burnindices.getValue() === 2){indeximagecollection = ee.ImageCollection(clip.map(NDSI));indexpanellabel = 'NDSI';}
  		else if(burnindices.getValue() === 3){indeximagecollection = ee.ImageCollection(clip.map(NDSII));indexpanellabel = 'NDSII';}
  		else if(burnindices.getValue() === 4){indeximagecollection = ee.ImageCollection(clip.map(NDSInw));indexpanellabel = 'NDSInw';}
  		else if(burnindices.getValue() === 5){indeximagecollection = ee.ImageCollection(clip.map(NDSaII));indexpanellabel = 'NDSaII';}
  		else if(burnindices.getValue() === 6){indeximagecollection = ee.ImageCollection(clip.map(S3));indexpanellabel = 'S3';}
  		else if(burnindices.getValue() === 7){indeximagecollection = ee.ImageCollection(clip.map(SWI));indexpanellabel = 'SWI';}
  	}
  	else if(urbanindex.getValue() == true){
  		if(burnindices.getValue() === 0){indeximagecollection = ee.ImageCollection(clip.map(BI));indexpanellabel = 'BI';}
  		else if(burnindices.getValue() === 1){indeximagecollection = ee.ImageCollection(clip.map(BLFEI));indexpanellabel = 'BLFEI';}
  		else if(burnindices.getValue() === 2){indeximagecollection = ee.ImageCollection(clip.map(BRBA));indexpanellabel = 'BRBA';}
  		else if(burnindices.getValue() === 3){indeximagecollection = ee.ImageCollection(clip.map(BaI));indexpanellabel = 'BaI';}
  		else if(burnindices.getValue() === 4){indeximagecollection = ee.ImageCollection(clip.map(DBSI));indexpanellabel = 'DBSI';}
  		else if(burnindices.getValue() === 5){indeximagecollection = ee.ImageCollection(clip.map(EMBI));indexpanellabel = 'EMBI';}
  		else if(burnindices.getValue() === 6){indeximagecollection = ee.ImageCollection(clip.map(IBI));indexpanellabel = 'IBI';}
  		else if(burnindices.getValue() === 7){indeximagecollection = ee.ImageCollection(clip.map(MBI));indexpanellabel = 'MBI';}
  		else if(burnindices.getValue() === 8){indeximagecollection = ee.ImageCollection(clip.map(NBAI));indexpanellabel = 'NBAI';}
  		else if(burnindices.getValue() === 9){indeximagecollection = ee.ImageCollection(clip.map(NDBI));indexpanellabel = 'NDBI';}
  		else if(burnindices.getValue() === 10){indeximagecollection = ee.ImageCollection(clip.map(NDSoiI));indexpanellabel = 'NDSoiI';}
  		else if(burnindices.getValue() === 11){indeximagecollection = ee.ImageCollection(clip.map(NHFD));indexpanellabel = 'NHFD';}
  		else if(burnindices.getValue() === 12){indeximagecollection = ee.ImageCollection(clip.map(NSDS));indexpanellabel = 'NSDS';}
  		else if(burnindices.getValue() === 13){indeximagecollection = ee.ImageCollection(clip.map(PISI));indexpanellabel = 'PISI';}
  		else if(burnindices.getValue() === 14){indeximagecollection = ee.ImageCollection(clip.map(UI));indexpanellabel = 'UI';}
  		else if(burnindices.getValue() === 15){indeximagecollection = ee.ImageCollection(clip.map(VIBI));indexpanellabel = 'VIBI';}
  		else if(burnindices.getValue() === 16){indeximagecollection = ee.ImageCollection(clip.map(VgNIRBI));indexpanellabel = 'VgNIRBI';}
  		else if(burnindices.getValue() === 17){indeximagecollection = ee.ImageCollection(clip.map(VrNIRBI));indexpanellabel = 'VrNIRBI';}
  	}
  	else if (compositeindex.getValue() == true) {
  	  if (compositeindices.getValue() === 0){indeximagecollection = ee.ImageCollection(clip.map(NCHI));indexpanellabel = 'NCHI';}
  	}
  	else if(biophysicalindex.getValue() == true){
		if(biophysicalindices.getValue() === 0){
		  print('in the loop')
		  
		  var artmosatdata = clip.select(['B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B8A', 'B11', 'B12']);
		  print(artmosatdata,'artmosatdata')
		  
		  var Nsize = artmosatdata.size();
		  print(Nsize,'Nsize')
		  
		  var indeximagecollection = artmosatdata.map(calculate_LAI_GREEN).sort('system:time_start', true);
		  indeximagecollection = indeximagecollection.select('LAI');
		  print(indeximagecollection,'LAI_Collection')
		  print('selected_lai_bands')
		  var indexpanellabel = 'LAI'		
		}
		else if(biophysicalindices.getValue() === 1){
		
		  print('in the loop')
		  
		  var artmosatdata = clip.select(['B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B8A', 'B11', 'B12']);
		  print(artmosatdata,'artmosatdata')
		  
		  var Nsize = artmosatdata.size();
		  print(Nsize,'Nsize')
		  
		  var indeximagecollection = artmosatdata.map(calculate_CCC).sort('system:time_start', true);
		  indeximagecollection = indeximagecollection.select('CCC');
		  print(indeximagecollection,'CCC_Collection')
		  print('selected_CCC_bands')
		  var indexpanellabel = 'CCC'		
		}
		else if(biophysicalindices.getValue() === 2){

		  print('in the loop')
		  
		  var artmosatdata = clip.select(['B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B8A', 'B11', 'B12']);
		  print(artmosatdata,'artmosatdata')
		  
		  var Nsize = artmosatdata.size();
		  print(Nsize,'Nsize')
		  
		  var indeximagecollection = artmosatdata.map(calculate_CWC).sort('system:time_start', true);
		  indeximagecollection = indeximagecollection.select('CWC');
		  print(indeximagecollection,'CWC_Collection')
		  print('selected_CWC_bands')
		  var indexpanellabel = 'CWC'		
		}		
	
  	}
    var imgDateList = clip.aggregate_array('system:id');

    var selectMenu = ui.Select({
      items: imgDateList.getInfo(),
      onChange: displayselectedimage,
      placeholder:'Select Date',
      style: {padding: '0px 0px 0px 0px', stretch: 'horizontal', color: 'black'}
    });
    var selectMenuPanel = ui.Panel({style:{position: 'top-right',stretch:  'horizontal'}});
    panelo.add(selectMenuPanel)
    selectMenuPanel.add(selectMenu);  

    function mosaicByDate(imcol){
      var imlist = imcol.toList(imcol.size());
      var unique_dates = imlist.map(function(im){return ee.Image(im).date().format("YYYY-MM-dd");}).distinct();
      var mosaic_imlist = unique_dates.map(function(d){
        d = ee.Date(d);
        var im = imcol.filterDate(d, d.advance(1, "day")).mosaic();
        return im.set("system:time_start", d.millis(), "system:id", d.format("YYYY-MM-dd"));});
      return ee.ImageCollection(mosaic_imlist);
    }
	
    function displayselectedimage(value) {
      Map.clear()
      panelo.clear()
      panelo.remove(selectMenuPanel)
      panelo.add(selectMenuPanel)
      var image = ee.Image(clip.filter(ee.Filter.eq('system:id',value)).first());
      var orderedindeximagecollection = mosaicByDate(indeximagecollection);
      var indeximage = ee.Image(orderedindeximagecollection.filter(ee.Filter.eq('system:id',selectMenu.getValue())).first())
      print(indeximage)
      var percentiles = indeximage.reduceRegion({reducer: ee.Reducer.percentile([5, 90]),geometry: Map.getBounds(true), scale: Map.getScale(),});
      var indexminvalue = ee.Number.parse(percentiles.getNumber(indexpanellabel+'_p5'))
      var indexmaxvalue = ee.Number.parse(percentiles.getNumber(indexpanellabel+'_p90'))
      print(indexminvalue,'indexminvalue')
      print(indexmaxvalue,'indexmaxvalue')
      var collectionmin = orderedindeximagecollection.min();
      print(collectionmin, 'collection_min_image')
      var percentilesmin = collectionmin.reduceRegion({reducer: ee.Reducer.percentile([5, 90]),geometry: Map.getBounds(true), scale: Map.getScale(),});
      var collectionminvalue = (ee.Number.parse(ee.String((collectionmin.reduceRegion(ee.Reducer.min(),boundary,20)).values().get(0))).round()); //ee.Number.parse(percentilesmin.getNumber(indexpanellabel+'_p5'))//(ee.Number.parse(ee.String((collectionmin.reduceRegion(ee.Reducer.min(),boundary,20)).values().get(0))).round()); 
      print(collectionminvalue, 'collectionminvalue')
      var collectionmax = orderedindeximagecollection.max();
      print(collectionmax, 'collection_max_image')
      var percentilesmax = collectionmax.reduceRegion({reducer: ee.Reducer.percentile([5, 90]),geometry: Map.getBounds(true), scale: Map.getScale(),});
      var collectionmaxvalue = (ee.Number.parse(ee.String((collectionmax.reduceRegion(ee.Reducer.max(),boundary,20)).values().get(0))).round()); //ee.Number.parse(percentilesmax.getNumber(indexpanellabel+'_p90'))//(ee.Number.parse(ee.String((collectionmax.reduceRegion(ee.Reducer.min(),boundary,20)).values().get(0))).round()); 
      print(collectionmaxvalue, 'collectionmaxvalue')      
      var indexvis = {min: indexminvalue, max: indexmaxvalue, palette: ['#ce7e45','#fcd163','#99b718','#66a000', '#004c00']}
      var rgblayer = ui.Map.Layer(image, rgbVis, 'RGB');
      var fcclayer = ui.Map.Layer(image, fccvis, 'FCC');
      var classifiedindeximage = ui.Map.Layer(indeximage, indexvis,'Indeximage')
      Map.add(rgblayer);
      Map.add(fcclayer);
      Map.addLayer(indeximage, {min: indexminvalue.getInfo(), max: indexmaxvalue.getInfo(), palette: ['ce7e45','fcd163','99b718','66a000', '004c00']}, indexpanellabel)
      var empty = ee.Image().byte();
       if (iari.getValue() == true){
          var iariboundary = ee.FeatureCollection('users/NePPA/IARI_Boundary/IARI_total')
          boundary = ee.FeatureCollection('users/tarunkondraju/IARI_NePPA/IARI_shapefiles/rabi2021-22_crops_24722')
          var boundary1 = empty.paint({featureCollection: iariboundary, 
          color: '1',
          width: '3'
          });
          Map.addLayer(boundary1,{palette: ['000000'].concat(palette),min: 0,max: palette.length},'IARI Boundary');   
       }
       else if (iari.getValue() == false){
         var boundary1 = empty.paint({
         featureCollection: boundary,
         color: '1',
         width: '3'
         });
         Map.addLayer(boundary1, {palette: 'Black', max: 14}, 'boundary');
       }
      var inspectorPanel = ui.Panel({style:{position: 'bottom-right',stretch:  'horizontal'}});
      panelo.add(inspectorPanel)
      var indexminvalue1 = 'Bad'
      var indexmaxvalue1 = 'Good'
      var indexvis1 = {min: indexminvalue1, max: indexmaxvalue1, palette: ['#ce7e45','#fcd163','#99b718','#66a000', '#004c00']}  
	  
////////////////////////////////////////////////////////////////////////////// Quantitative Analysis ///////////////////////////////////////////////////////////////////////////////////////	  
	  
      var Qanalysislist = ui.Select({
        items: [
          {	label	:	"	1	.	Min	"	,	value	:	0	}	,
          {	label	:	"	2	.	Max	"	,	value	:	1	}	,
          {	label	:	"	3	.	Mean	"	,	value	:	2	}	,
          {	label	:	"	4	.	Median	"	,	value	:	3	}	,
          {	label	:	"	5	.	Mode	"	,	value	:	4	}	,
          {	label	:	"	6	.	Sum	"	,	value	:	5	}	,
          {	label	:	"	7	.	A+B	"	,	value	:	6	}	,
          {	label	:	"	8	.	A-B	"	,	value	:	7	}	,
          {	label	:	"	9	.	A*B	"	,	value	:	8	},
          {	label	:	"	10	.	A/B	"	,	value	:	9	}	,
          {	label	:	"	11	.	Add C	"	,	value	:	10	}	,
          {	label	:	"	12	.	Subtract	C"	,	value	:	11	}	,
          {	label	:	"	13	.	Multiply C	"	,	value	:	12	}	,
          {	label	:	"	14	.	Divide C	"	,	value	:	13	}	,
          {	label	:	"	15	.	Thresholding	"	,	value	:	14	}
        ],
        placeholder : 'Choose an operation',
        style: {padding: '0px 0px 0px 0px'},
        onChange: function(value) {
          if ((value === 0)) {
            var Qimage = orderedindeximagecollection.min()
            print(Qimage,'Min image')
            var Qpercentiles = Qimage.reduceRegion({reducer: ee.Reducer.percentile([5, 90]),geometry: Map.getBounds(true), scale: Map.getScale(),});
            var Qminvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p5'))
            var Qmaxvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p90'))            
            print(Qminvalue, 'Qminvalue')
            print(Qmaxvalue, 'Qmaxvalue')      
            var Qvis = {min: Qminvalue, max: Qmaxvalue, palette: ['#ce7e45','#fcd163','#99b718','#66a000', '#004c00']}
            print(Qvis)
            Map.addLayer(Qimage, {min: Qminvalue.getInfo(), max: Qmaxvalue.getInfo(), palette: ['ce7e45','fcd163','99b718','66a000', '004c00']}, 'Minimum')
            var urlminLabel = ui.Label('Click to download the Collection_Min data', {shown: false});
            var downloadminButton = ui.Button('Get the URL for Collection_Min data', downloadminImg);
            var mindatapanel = ui.Panel({style:{position: 'top-center',stretch:  'horizontal'}});
            panelo.add(mindatapanel)
            mindatapanel.add(downloadminButton).add(urlminLabel)
            function downloadminImg() {
                if (draw.getValue() == true){
                  var boundingregion = boundary
                }
                else {
                  var boundingregion = boundary.geometry()
                }        
               var downloadminArgs = {
                name: 'Collection_minimum',
                scale: 10,
                region:boundingregion,
                filePerBand:false
              };
            var url = Qimage.getDownloadURL(downloadminArgs);
            urlminLabel.setUrl(url);
            urlminLabel.style().set({shown: true});
            }
          }
          else if ((value === 1)) {
            var Qimage = orderedindeximagecollection.max()
            print(Qimage,'Max image')
            var Qpercentiles = Qimage.reduceRegion({reducer: ee.Reducer.percentile([5, 90]),geometry: Map.getBounds(true), scale: Map.getScale(),});
            var Qminvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p5'))
            var Qmaxvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p90'))            
            print(Qminvalue, 'Qminvalue')
            print(Qmaxvalue, 'Qmaxvalue')      
            var Qvis = {min: Qminvalue, max: Qmaxvalue, palette: ['#ce7e45','#fcd163','#99b718','#66a000', '#004c00']}
            print(Qvis)
            Map.addLayer(Qimage, {min: Qminvalue.getInfo(), max: Qmaxvalue.getInfo(), palette: ['ce7e45','fcd163','99b718','66a000', '004c00']}, 'Maximum')
            var urlmaxLabel = ui.Label('Click to download the Collection_maximum data', {shown: false});
            var downloadmaxButton = ui.Button('Get the URL for Collection_maximum data', downloadmaxImg);
            var maxdatapanel = ui.Panel({style:{position: 'top-center',stretch:  'horizontal'}});
            panelo.add(maxdatapanel)
            maxdatapanel.add(downloadmaxButton).add(urlmaxLabel)
            function downloadmaxImg() {
                if (draw.getValue() == true){
                  var boundingregion = boundary
                }
                else {
                  var boundingregion = boundary.geometry()
                }        
               var downloadmaxArgs = {
                name: 'Collection_maximum',
                scale: 10,
                region:boundingregion,
                filePerBand:false
              };
            var url = Qimage.getDownloadURL(downloadmaxArgs);
            urlmaxLabel.setUrl(url);
            urlmaxLabel.style().set({shown: true});
            }
          }
          else if ((value === 2)) {
            var Qimage = orderedindeximagecollection.mean()
            print(Qimage,'Mean image')
            var Qpercentiles = Qimage.reduceRegion({reducer: ee.Reducer.percentile([5, 90]),geometry: Map.getBounds(true), scale: Map.getScale(),});
            var Qminvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p5'))
            var Qmaxvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p90'))            
            print(Qminvalue, 'Qminvalue')
            print(Qmaxvalue, 'Qmaxvalue')      
            var Qvis = {min: Qminvalue, max: Qmaxvalue, palette: ['#ce7e45','#fcd163','#99b718','#66a000', '#004c00']}
            print(Qvis)
            Map.addLayer(Qimage, {min: Qminvalue.getInfo(), max: Qmaxvalue.getInfo(), palette: ['ce7e45','fcd163','99b718','66a000', '004c00']}, 'Mean')
            var urlmeanLabel = ui.Label('Click to download the Collection_mean data', {shown: false});
            var downloadmeanButton = ui.Button('Get the URL for Collection_mean data', downloadmeanImg);
            var meandatapanel = ui.Panel({style:{position: 'top-center',stretch:  'horizontal'}});
            panelo.add(meandatapanel)
            meandatapanel.add(downloadmeanButton).add(urlmeanLabel)
            function downloadmeanImg() {
                if (draw.getValue() == true){
                  var boundingregion = boundary
                }
                else {
                  var boundingregion = boundary.geometry()
                }        
               var downloadmeanArgs = {
                name: 'Collection_mean',
                scale: 10,
                region:boundingregion,
                filePerBand:false
              };
            var url = Qimage.getDownloadURL(downloadmeanArgs);
            urlmeanLabel.setUrl(url);
            urlmeanLabel.style().set({shown: true});
            }
          }
          else if ((value === 3)) {
            var Qimage = orderedindeximagecollection.median()
            print(Qimage,'Median image')
            var Qpercentiles = Qimage.reduceRegion({reducer: ee.Reducer.percentile([5, 90]),geometry: Map.getBounds(true), scale: Map.getScale(),});
            var Qminvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p5'))
            var Qmaxvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p90'))            
            print(Qminvalue, 'Qminvalue')
            print(Qmaxvalue, 'Qmaxvalue')      
            var Qvis = {min: Qminvalue, max: Qmaxvalue, palette: ['#ce7e45','#fcd163','#99b718','#66a000', '#004c00']}
            print(Qvis)
            Map.addLayer(Qimage, {min: Qminvalue.getInfo(), max: Qmaxvalue.getInfo(), palette: ['ce7e45','fcd163','99b718','66a000', '004c00']}, 'Median')
            var urlmedianLabel = ui.Label('Click to download the Collection_median', {shown: false});
            var downloadmedianButton = ui.Button('Get the URL for Collection_median', downloadmedianImg);
            var mediandatapanel = ui.Panel({style:{position: 'top-center',stretch:  'horizontal'}});
            panelo.add(mediandatapanel)
            mediandatapanel.add(downloadmedianButton).add(urlmedianLabel)
            function downloadmedianImg() {
                if (draw.getValue() == true){
                  var boundingregion = boundary
                }
                else {
                  var boundingregion = boundary.geometry()
                }        
               var downloadmedianArgs = {
                name: 'Collection_median',
                scale: 10,
                region:boundingregion,
                filePerBand:false
              };
            var url = Qimage.getDownloadURL(downloadmedianArgs);
            urlmedianLabel.setUrl(url);
            urlmedianLabel.style().set({shown: true});
            }
          }
          else if ((value === 4)) {
            var Qimage = orderedindeximagecollection.mode()
            print(Qimage,'Mode image')
            var Qpercentiles = Qimage.reduceRegion({reducer: ee.Reducer.percentile([5, 90]),geometry: Map.getBounds(true), scale: Map.getScale(),});
            var Qminvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p5'))
            var Qmaxvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p90'))            
            print(Qminvalue, 'Qminvalue')
            print(Qmaxvalue, 'Qmaxvalue')      
            var Qvis = {min: Qminvalue, max: Qmaxvalue, palette: ['#ce7e45','#fcd163','#99b718','#66a000', '#004c00']}
            print(Qvis)
            Map.addLayer(Qimage, {min: Qminvalue.getInfo(), max: Qmaxvalue.getInfo(), palette: ['ce7e45','fcd163','99b718','66a000', '004c00']}, 'Mode')
            var urlmodeLabel = ui.Label('Click to download the Collection_Mode data', {shown: false});
            var downloadmodeButton = ui.Button('Get the URL for Collection_Mode', downloadmodeImg);
            var modedatapanel = ui.Panel({style:{position: 'top-center',stretch:  'horizontal'}});
            panelo.add(modedatapanel)
            modedatapanel.add(downloadmodeButton).add(urlmodeLabel)
            function downloadmodeImg() {
                if (draw.getValue() == true){
                  var boundingregion = boundary
                }
                else {
                  var boundingregion = boundary.geometry()
                }        
               var downloadmodeArgs = {
                name: 'Collection_mode',
                scale: 10,
                region:boundingregion,
                filePerBand:false
              };
            var url = Qimage.getDownloadURL(downloadmodeArgs);
            urlmodeLabel.setUrl(url);
            urlmodeLabel.style().set({shown: true});
            }
          }
          else if ((value === 5)) {
            Qthreshold.style().set('shown',false);
            var Qimage = orderedindeximagecollection.sum()
            print(Qimage,'sum image')
            var Qpercentiles = Qimage.reduceRegion({reducer: ee.Reducer.percentile([5, 90]),geometry: Map.getBounds(true), scale: Map.getScale(),});
            var Qminvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p5'))
            var Qmaxvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p90'))            
            print(Qminvalue, 'Qminvalue')
            print(Qmaxvalue, 'Qmaxvalue')      
            var Qvis = {min: Qminvalue, max: Qmaxvalue, palette: ['#ce7e45','#fcd163','#99b718','#66a000', '#004c00']}
            print(Qvis)
            Map.addLayer(Qimage, {min: Qminvalue.getInfo(), max: Qmaxvalue.getInfo(), palette: ['ce7e45','fcd163','99b718','66a000', '004c00']}, 'Sum')
            var urlsumLabel = ui.Label('Click to download the Collection_Sum data', {shown: false});
            var downloadsumButton = ui.Button('Get the URL for Collection_Sum data', downloadsumImg);
            var sumdatapanel = ui.Panel({style:{position: 'top-center',stretch:  'horizontal'}});
            panelo.add(sumdatapanel)
            sumdatapanel.add(downloadsumButton).add(urlsumLabel)
            function downloadsumImg() {
                if (draw.getValue() == true){
                  var boundingregion = boundary
                }
                else {
                  var boundingregion = boundary.geometry()
                }        
               var downloadsumArgs = {
                name: 'Collection_Sum',
                scale: 10,
                region:boundingregion,
                filePerBand:false
              };
            var url = Qimage.getDownloadURL(downloadsumArgs);
            urlsumLabel.setUrl(url);
            urlsumLabel.style().set({shown: true});
            }
          }
          else if ((value === 6)) {
            var Qdateimage1 = ee.Image(orderedindeximagecollection.filter(ee.Filter.eq('system:id',selectMenu1.getValue())).first())
            var Qdateimage = ee.Image(orderedindeximagecollection.filter(ee.Filter.eq('system:id',selectMenu.getValue())).first())
            var Qimage = Qdateimage.add(Qdateimage1)
            print(Qimage,'Add image')
            var Qpercentiles = Qimage.reduceRegion({reducer: ee.Reducer.percentile([5, 90]),geometry: Map.getBounds(true), scale: Map.getScale(),});
            var Qminvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p5'))
            var Qmaxvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p90'))            
            print(Qminvalue, 'Qminvalue')
            print(Qmaxvalue, 'Qmaxvalue')      
            var Qvis = {min: Qminvalue, max: Qmaxvalue, palette: ['#ce7e45','#fcd163','#99b718','#66a000', '#004c00']}
            print(Qvis)
            Map.addLayer(Qimage, {min: Qminvalue.getInfo(), max: Qmaxvalue.getInfo(), palette: ['ce7e45','fcd163','99b718','66a000', '004c00']}, 'Add_Image')
            var urladdLabel = ui.Label('Click to download the A+B data', {shown: false});
            var downloadaddButton = ui.Button('Get the URL for A+B data', downloadaddImg);
            var adddatapanel = ui.Panel({style:{position: 'top-center',stretch:  'horizontal'}});
            panelo.add(adddatapanel)
            adddatapanel.add(downloadaddButton).add(urladdLabel)
            function downloadaddImg() {
                if (draw.getValue() == true){
                  var boundingregion = boundary
                }
                else {
                  var boundingregion = boundary.geometry()
                }        
               var downloadaddArgs = {
                name: 'Twoimages_Addition',
                scale: 10,
                region:boundingregion,
                filePerBand:false
              };
            var url = Qimage.getDownloadURL(downloadaddArgs);
            urladdLabel.setUrl(url);
            urladdLabel.style().set({shown: true});
            }
          }
          else if ((value === 7)) {
            var Qdateimage1 = ee.Image(orderedindeximagecollection.filter(ee.Filter.eq('system:id',selectMenu1.getValue())).first())
            var Qdateimage = ee.Image(orderedindeximagecollection.filter(ee.Filter.eq('system:id',selectMenu.getValue())).first())
            var Qimage = Qdateimage.subtract(Qdateimage1)
            print(Qimage,'sub image')
            var Qpercentiles = Qimage.reduceRegion({reducer: ee.Reducer.percentile([5, 90]),geometry: Map.getBounds(true), scale: Map.getScale(),});
            var Qminvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p5'))
            var Qmaxvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p90'))            
            print(Qminvalue, 'Qminvalue')
            print(Qmaxvalue, 'Qmaxvalue')      
            var Qvis = {min: Qminvalue, max: Qmaxvalue, palette: ['#ce7e45','#fcd163','#99b718','#66a000', '#004c00']}
            print(Qvis)
            Map.addLayer(Qimage, {min: Qminvalue.getInfo(), max: Qmaxvalue.getInfo(), palette: ['ce7e45','fcd163','99b718','66a000', '004c00']}, 'Subtract_Image')
            var urlsubLabel = ui.Label('Click to download the A-B data', {shown: false});
            var downloadsubButton = ui.Button('Get the URL for A-B data', downloadsubImg);
            var subdatapanel = ui.Panel({style:{position: 'top-center',stretch:  'horizontal'}});
            panelo.add(subdatapanel)
            subdatapanel.add(downloadsubButton).add(urlsubLabel)
            function downloadsubImg() {
                if (draw.getValue() == true){
                  var boundingregion = boundary
                }
                else {
                  var boundingregion = boundary.geometry()
                }        
               var downloadsubArgs = {
                name: 'Twoimages_Subtraction',
                scale: 10,
                region:boundingregion,
                filePerBand:false
              };
            var url = Qimage.getDownloadURL(downloadsubArgs);
            urlsubLabel.setUrl(url);
            urlsubLabel.style().set({shown: true});
            }
          }
          else if ((value === 8)) {
            var Qdateimage1 = ee.Image(orderedindeximagecollection.filter(ee.Filter.eq('system:id',selectMenu1.getValue())).first())
            var Qdateimage = ee.Image(orderedindeximagecollection.filter(ee.Filter.eq('system:id',selectMenu.getValue())).first())
            var Qimage = Qdateimage.multiply(Qdateimage1)
            print(Qimage,'multiply image')
            var Qpercentiles = Qimage.reduceRegion({reducer: ee.Reducer.percentile([5, 90]),geometry: Map.getBounds(true), scale: Map.getScale(),});
            var Qminvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p5'))
            var Qmaxvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p90'))            
            print(Qminvalue, 'Qminvalue')
            print(Qmaxvalue, 'Qmaxvalue')      
            var Qvis = {min: Qminvalue, max: Qmaxvalue, palette: ['#ce7e45','#fcd163','#99b718','#66a000', '#004c00']}
            print(Qvis)
            Map.addLayer(Qimage, {min: Qminvalue.getInfo(), max: Qmaxvalue.getInfo(), palette: ['ce7e45','fcd163','99b718','66a000', '004c00']}, 'Multiply_Image')
            var urlmulLabel = ui.Label('Click to download the A*B data', {shown: false});
            var downloadmulButton = ui.Button('Get the URL for A*B data', downloadmulImg);
            var muldatapanel = ui.Panel({style:{position: 'top-center',stretch:  'horizontal'}});
            panelo.add(muldatapanel)
            muldatapanel.add(downloadmulButton).add(urlmulLabel)
            function downloadmulImg() {
                if (draw.getValue() == true){
                  var boundingregion = boundary
                }
                else {
                  var boundingregion = boundary.geometry()
                }        
               var downloadmulArgs = {
                name: 'Twoimages_Multiplication',
                scale: 10,
                region:boundingregion,
                filePerBand:false
              };
            var url = Qimage.getDownloadURL(downloadmulArgs);
            urlmulLabel.setUrl(url);
            urlmulLabel.style().set({shown: true});
            }
          }    
          else if ((value === 9)) {
            var Qdateimage1 = ee.Image(orderedindeximagecollection.filter(ee.Filter.eq('system:id',selectMenu1.getValue())).first())
            var Qdateimage = ee.Image(orderedindeximagecollection.filter(ee.Filter.eq('system:id',selectMenu.getValue())).first())
            var Qimage = Qdateimage.divide(Qdateimage1)
            print(Qimage,'divide image')
            var Qpercentiles = Qimage.reduceRegion({reducer: ee.Reducer.percentile([5, 90]),geometry: Map.getBounds(true), scale: Map.getScale(),});
            var Qminvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p5'))
            var Qmaxvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p90'))            
            print(Qminvalue, 'Qminvalue')
            print(Qmaxvalue, 'Qmaxvalue')      
            var Qvis = {min: Qminvalue, max: Qmaxvalue, palette: ['#ce7e45','#fcd163','#99b718','#66a000', '#004c00']}
            print(Qvis)
            Map.addLayer(Qimage, {min: Qminvalue.getInfo(), max: Qmaxvalue.getInfo(), palette: ['ce7e45','fcd163','99b718','66a000', '004c00']}, 'Divide_Image')
            var urldivLabel = ui.Label('Click to download the A/B data', {shown: false});
            var downloaddivButton = ui.Button('Get the URL for A/B data', downloaddivImg);
            var divdatapanel = ui.Panel({style:{position: 'top-center',stretch:  'horizontal'}});
            panelo.add(divdatapanel)
            divdatapanel.add(downloaddivButton).add(urldivLabel)
            function downloaddivImg() {
                if (draw.getValue() == true){
                  var boundingregion = boundary
                }
                else {
                  var boundingregion = boundary.geometry()
                }        
               var downloaddivArgs = {
                name: 'Twoimages_Division',
                scale: 10,
                region:boundingregion,
                filePerBand:false
              };
            var url = Qimage.getDownloadURL(downloaddivArgs);
            urldivLabel.setUrl(url);
            urldivLabel.style().set({shown: true});
            }
          }  
          else if ((value === 10)) {
            var CVvalue = ee.Number.parse(CV.getValue())
            var Qdateimage = ee.Image(orderedindeximagecollection.filter(ee.Filter.eq('system:id',selectMenu.getValue())).first())
            var Qimage = Qdateimage.add(CVvalue)
            print(Qimage,'AddCV image')
            var Qpercentiles = Qimage.reduceRegion({reducer: ee.Reducer.percentile([5, 90]),geometry: Map.getBounds(true), scale: Map.getScale(),});
            var Qminvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p5'))
            var Qmaxvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p90'))            
            print(Qminvalue, 'Qminvalue')
            print(Qmaxvalue, 'Qmaxvalue')      
            var Qvis = {min: Qminvalue, max: Qmaxvalue, palette: ['#ce7e45','#fcd163','#99b718','#66a000', '#004c00']}
            print(Qvis)
            Map.addLayer(Qimage, {min: Qminvalue.getInfo(), max: Qmaxvalue.getInfo(), palette: ['ce7e45','fcd163','99b718','66a000', '004c00']}, 'Add_CV')
            var urladdcvLabel = ui.Label('Click to download the A+CV data', {shown: false});
            var downloadaddcvButton = ui.Button('Get the URL for A+CV data', downloadaddcvImg);
            var addcvdatapanel = ui.Panel({style:{position: 'top-center',stretch:  'horizontal'}});
            panelo.add(addcvdatapanel)
            addcvdatapanel.add(downloadaddcvButton).add(urladdcvLabel)            
            function downloadaddcvImg() {
                if (draw.getValue() == true){
                  var boundingregion = boundary
                }
                else {
                  var boundingregion = boundary.geometry()
                }        
               var downloadaddcvArgs = {
                name: 'Image_plus_Constant_Value',
                scale: 10,
                region:boundingregion,
                filePerBand:false
              };
            var url = Qimage.getDownloadURL(downloadaddcvArgs);
            urladdcvLabel.setUrl(url);
            urladdcvLabel.style().set({shown: true});
            }
          }
          else if ((value === 11)) {
            var CVvalue = ee.Number.parse(CV.getValue())
            var Qdateimage = ee.Image(orderedindeximagecollection.filter(ee.Filter.eq('system:id',selectMenu.getValue())).first())
            var Qimage = Qdateimage.subtract(CVvalue)
            print(Qimage,'SubCV image')
            var Qpercentiles = Qimage.reduceRegion({reducer: ee.Reducer.percentile([5, 90]),geometry: Map.getBounds(true), scale: Map.getScale(),});
            var Qminvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p5'))
            var Qmaxvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p90'))            
            print(Qminvalue, 'Qminvalue')
            print(Qmaxvalue, 'Qmaxvalue')      
            var Qvis = {min: Qminvalue, max: Qmaxvalue, palette: ['#ce7e45','#fcd163','#99b718','#66a000', '#004c00']}
            print(Qvis)
            Map.addLayer(Qimage, {min: Qminvalue.getInfo(), max: Qmaxvalue.getInfo(), palette: ['ce7e45','fcd163','99b718','66a000', '004c00']}, 'Substract_CV')
            var urlsubcvLabel = ui.Label('Click to download the A-CV data', {shown: false});
            var downloadsubcvButton = ui.Button('Get the URL for A-CV data', downloadsubcvImg);
            var subcvdatapanel = ui.Panel({style:{position: 'top-center',stretch:  'horizontal'}});
            panelo.add(subcvdatapanel)
            subcvdatapanel.add(downloadsubcvButton).add(urlsubcvLabel)
            function downloadsubcvImg() {
                if (draw.getValue() == true){
                  var boundingregion = boundary
                }
                else {
                  var boundingregion = boundary.geometry()
                }        
               var downloadsubcvArgs = {
                name: 'Image_minus_Constant_Value',
                scale: 10,
                region:boundingregion,
                filePerBand:false
              };
            var url = Qimage.getDownloadURL(downloadsubcvArgs);
            urlsubcvLabel.setUrl(url);
            urlsubcvLabel.style().set({shown: true});
            }
          } 
          else if ((value === 12)) {
            var CVvalue = ee.Number.parse(CV.getValue())
            var Qdateimage = ee.Image(orderedindeximagecollection.filter(ee.Filter.eq('system:id',selectMenu.getValue())).first())
            var Qimage = Qdateimage.multiply(CVvalue)
            print(Qimage,'multiplyCV image')
            var Qpercentiles = Qimage.reduceRegion({reducer: ee.Reducer.percentile([5, 90]),geometry: Map.getBounds(true), scale: Map.getScale(),});
            var Qminvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p5'))
            var Qmaxvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p90'))            
            print(Qminvalue, 'Qminvalue')
            print(Qmaxvalue, 'Qmaxvalue')      
            var Qvis = {min: Qminvalue, max: Qmaxvalue, palette: ['#ce7e45','#fcd163','#99b718','#66a000', '#004c00']}
            print(Qvis)
            Map.addLayer(Qimage, {min: Qminvalue.getInfo(), max: Qmaxvalue.getInfo(), palette: ['ce7e45','fcd163','99b718','66a000', '004c00']}, 'Multiply_CV')
            var urlmulcvLabel = ui.Label('Click to download the A*CV data', {shown: false});
            var downloadmulcvButton = ui.Button('Get the URL for A*CV data', downloadmulcvImg);
            var mulcvdatapanel = ui.Panel({style:{position: 'top-center',stretch:  'horizontal'}});
            panelo.add(mulcvdatapanel)
            mulcvdatapanel.add(downloadmulcvButton).add(urlmulcvLabel)
            function downloadmulcvImg() {
                if (draw.getValue() == true){
                  var boundingregion = boundary
                }
                else {
                  var boundingregion = boundary.geometry()
                }        
               var downloadmulcvArgs = {
                name: 'Image_multiply_Constant_Value',
                scale: 10,
                region:boundingregion,
                filePerBand:false
              };
            var url = Qimage.getDownloadURL(downloadmulcvArgs);
            urlmulcvLabel.setUrl(url);
            urlmulcvLabel.style().set({shown: true});
            }
          } 
          else if ((value === 13)) {
            var CVvalue = ee.Number.parse(CV.getValue())
            var Qdateimage = ee.Image(orderedindeximagecollection.filter(ee.Filter.eq('system:id',selectMenu.getValue())).first())
            var Qimage = Qdateimage.divide(CVvalue)
            print(Qimage,'divideCV image')
            var Qpercentiles = Qimage.reduceRegion({reducer: ee.Reducer.percentile([5, 90]),geometry: Map.getBounds(true), scale: Map.getScale(),});
            var Qminvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p5'))
            var Qmaxvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p90'))            
            print(Qminvalue, 'Qminvalue')
            print(Qmaxvalue, 'Qmaxvalue')      
            var Qvis = {min: Qminvalue, max: Qmaxvalue, palette: ['#ce7e45','#fcd163','#99b718','#66a000', '#004c00']}
            print(Qvis)
            Map.addLayer(Qimage, {min: Qminvalue.getInfo(), max: Qmaxvalue.getInfo(), palette: ['ce7e45','fcd163','99b718','66a000', '004c00']}, 'Divide_CV')
            var urldivcvLabel = ui.Label('Click to download the A/CV data', {shown: false});
            var downloaddivcvButton = ui.Button('Get the URL for A/CV data', downloaddivcvImg);
            var divcvdatapanel = ui.Panel({style:{position: 'top-center',stretch:  'horizontal'}});
            panelo.add(divcvdatapanel)
            divcvdatapanel.add(downloaddivcvButton).add(urldivcvLabel)
            function downloaddivcvImg() {
                if (draw.getValue() == true){
                  var boundingregion = boundary
                }
                else {
                  var boundingregion = boundary.geometry()
                }        
               var downloaddivcvArgs = {
                name: 'Image_divide_Constant_Value',
                scale: 10,
                region:boundingregion,
                filePerBand:false
              };
            var url = Qimage.getDownloadURL(downloaddivcvArgs);
            urldivcvLabel.setUrl(url);
            urldivcvLabel.style().set({shown: true});
            }
          } 
          else if ((value === 14)) {
            Qthreshold.style().set('shown',true);
          }
        }, 
      });
      var Qthreshold = ui.Select({
        items: [
          {	label	:	"	1	.	>	"	,	value	:	0	}	,
          {	label	:	"	2	.	>=	"	,	value	:	1	}	,
          {	label	:	"	3	.	<	"	,	value	:	2	}	,
          {	label	:	"	4	.	<=	"	,	value	:	3	}	,
          {	label	:	"	5	.	=	"	,	value	:	4	}	,
          {	label	:	"	6	.	Between	"	,	value	:	5	}	,
          {	label	:	"	7	.	Not Between	"	,	value	:	6	}
        ],
        placeholder : 'Choose an operation',
        style: {padding: '0px 0px 0px 0px'},
        onChange: function(value) {
          if ((value === 0)) {
            var LBvalue = ee.Number.parse(LB.getValue())
            var Qdateimage = ee.Image(orderedindeximagecollection.filter(ee.Filter.eq('system:id',selectMenu.getValue())).first())
            var Qimage = Qdateimage.gt(LBvalue)
            print(Qimage,'Gt image')
            var Qpercentiles = Qimage.reduceRegion({reducer: ee.Reducer.percentile([5, 90]),geometry: Map.getBounds(true), scale: Map.getScale(),});
            var Qminvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p5'))
            var Qmaxvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p90'))            
            print(Qminvalue, 'Qminvalue')
            print(Qmaxvalue, 'Qmaxvalue')      
            var Qvis = {min: Qminvalue, max: Qmaxvalue, palette: ['#ce7e45','#fcd163','#99b718','#66a000', '#004c00']}
            print(Qvis)
            Map.addLayer(Qimage, {min: Qminvalue.getInfo(), max: Qmaxvalue.getInfo(), palette: ['ce7e45','fcd163','99b718','66a000', '004c00']}, 'Gt_Image')
            var urlgtLabel = ui.Label('Click to download the >_mask data', {shown: false});
            var downloadgtButton = ui.Button('Get the URL for >_mask data', downloadgtImg);
            var gtdatapanel = ui.Panel({style:{position: 'top-center',stretch:  'horizontal'}});
            panelo.add(gtdatapanel)
            gtdatapanel.add(downloadgtButton).add(urlgtLabel)
            function downloadgtImg() {
                if (draw.getValue() == true){
                  var boundingregion = boundary
                }
                else {
                  var boundingregion = boundary.geometry()
                }        
               var downloadgtArgs = {
                name: 'greater_than_mask',
                scale: 10,
                region:boundingregion,
                filePerBand:false
              };
            var url = Qimage.getDownloadURL(downloadgtArgs);
            urlgtLabel.setUrl(url);
            urlgtLabel.style().set({shown: true});
            }
          }
          else if ((value === 1)) {
            var LBvalue = ee.Number.parse(LB.getValue())
            var Qdateimage = ee.Image(orderedindeximagecollection.filter(ee.Filter.eq('system:id',selectMenu.getValue())).first())
            var Qimage = Qdateimage.gte(LBvalue)
            print(Qimage,'Gte image')
            var Qpercentiles = Qimage.reduceRegion({reducer: ee.Reducer.percentile([5, 90]),geometry: Map.getBounds(true), scale: Map.getScale(),});
            var Qminvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p5'))
            var Qmaxvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p90'))            
            print(Qminvalue, 'Qminvalue')
            print(Qmaxvalue, 'Qmaxvalue')      
            var Qvis = {min: Qminvalue, max: Qmaxvalue, palette: ['#ce7e45','#fcd163','#99b718','#66a000', '#004c00']}
            print(Qvis)
            Map.addLayer(Qimage, {min: Qminvalue.getInfo(), max: Qmaxvalue.getInfo(), palette: ['ce7e45','fcd163','99b718','66a000', '004c00']}, 'GTE_Image')
            var urlgteLabel = ui.Label('Click to download the >=_mask data', {shown: false});
            var downloadgteButton = ui.Button('Get the URL for >=_mask data', downloadgteImg);
            var gtdatapanel = ui.Panel({style:{position: 'top-center',stretch:  'horizontal'}});
            panelo.add(gtedatapanel)
            gtedatapanel.add(downloadgteButton).add(urlgteLabel)
            function downloadgteImg() {
                if (draw.getValue() == true){
                  var boundingregion = boundary
                }
                else {
                  var boundingregion = boundary.geometry()
                }        
               var downloadgteArgs = {
                name: 'greater_than_equalto_mask',
                scale: 10,
                region:boundingregion,
                filePerBand:false
              };
            var url = Qimage.getDownloadURL(downloadgteArgs);
            urlgteLabel.setUrl(url);
            urlgteLabel.style().set({shown: true});
            }
          }
          else if ((value === 2)) {
            var UBvalue = ee.Number.parse(UB.getValue())
            var Qdateimage = ee.Image(orderedindeximagecollection.filter(ee.Filter.eq('system:id',selectMenu.getValue())).first())
            var Qimage = Qdateimage.lt(UBvalue)
            print(Qimage,'LT image')
            var Qpercentiles = Qimage.reduceRegion({reducer: ee.Reducer.percentile([5, 90]),geometry: Map.getBounds(true), scale: Map.getScale(),});
            var Qminvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p5'))
            var Qmaxvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p90'))            
            print(Qminvalue, 'Qminvalue')
            print(Qmaxvalue, 'Qmaxvalue')      
            var Qvis = {min: Qminvalue, max: Qmaxvalue, palette: ['#ce7e45','#fcd163','#99b718','#66a000', '#004c00']}
            print(Qvis)
            Map.addLayer(Qimage, {min: Qminvalue.getInfo(), max: Qmaxvalue.getInfo(), palette: ['ce7e45','fcd163','99b718','66a000', '004c00']}, 'LT_Image')
            var urlltLabel = ui.Label('Click to download the <_mask data', {shown: false});
            var downloadltButton = ui.Button('Get the URL for <_mask data', downloadltImg);
            var ltdatapanel = ui.Panel({style:{position: 'top-center',stretch:  'horizontal'}});
            panelo.add(ltdatapanel)
            ltdatapanel.add(downloadltButton).add(urlltLabel)
            function downloadltImg() {
                if (draw.getValue() == true){
                  var boundingregion = boundary
                }
                else {
                  var boundingregion = boundary.geometry()
                }        
               var downloadltArgs = {
                name: 'less_than_mask',
                scale: 10,
                region:boundingregion,
                filePerBand:false
              };
            var url = Qimage.getDownloadURL(downloadltArgs);
            urlltLabel.setUrl(url);
            urlltLabel.style().set({shown: true});
            }
          }
          else if ((value === 3)) {
            var UBvalue = ee.Number.parse(UB.getValue())
            var Qdateimage = ee.Image(orderedindeximagecollection.filter(ee.Filter.eq('system:id',selectMenu.getValue())).first())
            var Qimage = Qdateimage.lte(UBvalue)
            print(Qimage,'LTE image')
            var Qpercentiles = Qimage.reduceRegion({reducer: ee.Reducer.percentile([5, 90]),geometry: Map.getBounds(true), scale: Map.getScale(),});
            var Qminvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p5'))
            var Qmaxvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p90'))            
            print(Qminvalue, 'Qminvalue')
            print(Qmaxvalue, 'Qmaxvalue')      
            var Qvis = {min: Qminvalue, max: Qmaxvalue, palette: ['#ce7e45','#fcd163','#99b718','#66a000', '#004c00']}
            print(Qvis)
            Map.addLayer(Qimage, {min: Qminvalue.getInfo(), max: Qmaxvalue.getInfo(), palette: ['ce7e45','fcd163','99b718','66a000', '004c00']}, 'LTE_Image')
            var urllteLabel = ui.Label('Click to download the <=_mask data', {shown: false});
            var downloadlteButton = ui.Button('Get the URL for <=_mask data', downloadlteImg);
            var ltedatapanel = ui.Panel({style:{position: 'top-center',stretch:  'horizontal'}});
            panelo.add(ltedatapanel)
            ltedatapanel.add(downloadlteButton).add(urllteLabel)
            function downloadlteImg() {
                if (draw.getValue() == true){
                  var boundingregion = boundary
                }
                else {
                  var boundingregion = boundary.geometry()
                }        
               var downloadlteArgs = {
                name: 'less_than_equalto_mask',
                scale: 10,
                region:boundingregion,
                filePerBand:false
              };
            var url = Qimage.getDownloadURL(downloadlteArgs);
            urllteLabel.setUrl(url);
            urllteLabel.style().set({shown: true});
            }
          }
          else if ((value === 4)) {
            var CVvalue = ee.Number.parse(CV.getValue())
            var Qdateimage = ee.Image(orderedindeximagecollection.filter(ee.Filter.eq('system:id',selectMenu.getValue())).first())
            var Qimage = Qdateimage.eq(CVvalue)
            print(Qimage,'ECV image')
            var Qpercentiles = Qimage.reduceRegion({reducer: ee.Reducer.percentile([5, 90]),geometry: Map.getBounds(true), scale: Map.getScale(),});
            var Qminvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p5'))
            var Qmaxvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p90'))            
            print(Qminvalue, 'Qminvalue')
            print(Qmaxvalue, 'Qmaxvalue')      
            var Qvis = {min: Qminvalue, max: Qmaxvalue, palette: ['#ce7e45','#fcd163','#99b718','#66a000', '#004c00']}
            print(Qvis)
            Map.addLayer(Qimage, {min: Qminvalue.getInfo(), max: Qmaxvalue.getInfo(), palette: ['ce7e45','fcd163','99b718','66a000', '004c00']}, 'Equal_Image')
            var urlecvLabel = ui.Label('Click to download the equalto_mask data', {shown: false});
            var downloadecvButton = ui.Button('Get the URL for equalto_mask data', downloadecvImg);
            var ecvdatapanel = ui.Panel({style:{position: 'top-center',stretch:  'horizontal'}});
            panelo.add(ecvdatapanel)
            ecvdatapanel.add(downloadecvButton).add(urlecvLabel)
            function downloadecvImg() {
                if (draw.getValue() == true){
                  var boundingregion = boundary
                }
                else {
                  var boundingregion = boundary.geometry()
                }        
               var downloadecvArgs = {
                name: 'equalto_mask',
                scale: 10,
                region:boundingregion,
                filePerBand:false
              };
            var url = Qimage.getDownloadURL(downloadecvArgs);
            urlecvLabel.setUrl(url);
            urlecvLabel.style().set({shown: true});
            }
          }
          else if ((value === 5)) {
            var LBvalue = ee.Number.parse(LB.getValue())
            var UBvalue = ee.Number.parse(UB.getValue())
            var Qdateimage = ee.Image(orderedindeximagecollection.filter(ee.Filter.eq('system:id',selectMenu.getValue())).first())            
            var Qimage = Qdateimage.gt(LBvalue).and(Qdateimage.lt(UBvalue))  
            print(Qimage,'LTE image')
            var Qpercentiles = Qimage.reduceRegion({reducer: ee.Reducer.percentile([5, 90]),geometry: Map.getBounds(true), scale: Map.getScale(),});
            var Qminvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p5'))
            var Qmaxvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p90'))            
            print(Qminvalue, 'Qminvalue')
            print(Qmaxvalue, 'Qmaxvalue')      
            var Qvis = {min: Qminvalue, max: Qmaxvalue, palette: ['#ce7e45','#fcd163','#99b718','#66a000', '#004c00']}
            print(Qvis)
            Map.addLayer(Qimage, {min: Qminvalue.getInfo(), max: Qmaxvalue.getInfo(), palette: ['ce7e45','fcd163','99b718','66a000', '004c00']}, 'Between_Image')
            var urlbtLabel = ui.Label('Click to download the Between_mask data', {shown: false});
            var downloadbtButton = ui.Button('Get the URL for Between_mask data', downloadbtImg);
            var btdatapanel = ui.Panel({style:{position: 'top-center',stretch:  'horizontal'}});
            panelo.add(btdatapanel)
            btdatapanel.add(downloadbtButton).add(urlbtLabel)
            function downloadbtImg() {
                if (draw.getValue() == true){
                  var boundingregion = boundary
                }
                else {
                  var boundingregion = boundary.geometry()
                }        
               var downloadbtArgs = {
                name: 'Between_mask',
                scale: 10,
                region:boundingregion,
                filePerBand:false
              };
            var url = Qimage.getDownloadURL(downloadbtArgs);
            urlbtLabel.setUrl(url);
            urlbtLabel.style().set({shown: true});
            }
          }
          else if ((value === 6)) {
            var LBvalue = ee.Number.parse(LB.getValue())
            var UBvalue = ee.Number.parse(UB.getValue())
            var Qdateimage = ee.Image(orderedindeximagecollection.filter(ee.Filter.eq('system:id',selectMenu.getValue())).first())
            var Qimage = Qdateimage.lt(LBvalue).and(Qdateimage.gt(UBvalue))                
            print(Qimage,'LTE image')
            var Qpercentiles = Qimage.reduceRegion({reducer: ee.Reducer.percentile([5, 90]),geometry: Map.getBounds(true), scale: Map.getScale(),});
            var Qminvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p5'))
            var Qmaxvalue = ee.Number.parse(Qpercentiles.getNumber(indexpanellabel+'_p90'))            
            print(Qminvalue, 'Qminvalue')
            print(Qmaxvalue, 'Qmaxvalue')      
            var Qvis = {min: Qminvalue, max: Qmaxvalue, palette: ['#ce7e45','#fcd163','#99b718','#66a000', '#004c00']}
            print(Qvis)
            Map.addLayer(Qimage, {min: Qminvalue.getInfo(), max: Qmaxvalue.getInfo(), palette: ['ce7e45','fcd163','99b718','66a000', '004c00']}, 'Not_Between_Image')
            var urlnbtLabel = ui.Label('Click to download the notbetween_mask data', {shown: false});
            var downloadnbtButton = ui.Button('Get the URL for notbetween_mask data', downloadnbtImg);
            var nbtdatapanel = ui.Panel({style:{position: 'top-center',stretch:  'horizontal'}});
            panelo.add(nbtdatapanel)
            nbtdatapanel.add(downloadnbtButton).add(urlnbtLabel)
            function downloadnbtImg() {
                if (draw.getValue() == true){
                  var boundingregion = boundary
                }
                else {
                  var boundingregion = boundary.geometry()
                }        
               var downloadnbtArgs = {
                name: 'notbetween_mask',
                scale: 10,
                region:boundingregion,
                filePerBand:false
              };
            var url = Qimage.getDownloadURL(downloadnbtArgs);
            urlnbtLabel.setUrl(url);
            urlnbtLabel.style().set({shown: true});
            }
          }
        }  
      });
      var selectMenu1 = ui.Select({
        items: imgDateList.getInfo(),
        placeholder:'Select Date1',
        style: {padding: '0px 0px 0px 0px', stretch: 'horizontal', color: 'black'}
      });
      var selectMenuPanel1 = ui.Panel({style:{position: 'top-right',stretch:  'horizontal'}});
      selectMenuPanel1.add(selectMenu1);        
      var Qanalysis = ui.Checkbox({label: 'Quantitative Analysis',value: false,style: {color: '#dc7a55', width: '200px'},
        onChange: function(value) {
          if (value === true) {Qanalysislist.style().set('shown',true)}
          else if  (value === false){Qanalysislist.style().set('shown',false)}//{Map.clear()  }//{Map.remove(n), Map.remove(soilinspectorPanel), Map.remove(legendPanel)}
        }
      })
      var Qdate = ui.Checkbox({label: 'Select Second Image Data (A+B,A-B,A*B,A/C)',value: false,style: {color: '#dc7a55', width: '200px'},
        onChange: function(value) {
          if (value === true) {selectMenuPanel1.style().set('shown', true)}
          else if  (value === false){selectMenuPanel1.style().set('shown', false)}//{Map.clear()  }//{Map.remove(n), Map.remove(soilinspectorPanel), Map.remove(legendPanel)}
        }
      })
      var CVcheck = ui.Checkbox({label: 'Provide Constant Value (=,addC,subC,mulC,divC)',value: false,style: {color: '#dc7a55', width: '200px'},
        onChange: function(value) {
          if (value === true) {CV.style().set('shown', true)}
          else if  (value === false){CV.style().set('shown', false)}//{Map.clear()  }//{Map.remove(n), Map.remove(soilinspectorPanel), Map.remove(legendPanel)}
        }
      })
      var LBcheck = ui.Checkbox({label: 'Provide Lower Bound (>,>=,<>,!<>)',value: false,style: {color: '#dc7a55', width: '200px'},
        onChange: function(value) {
          if (value === true) {LB.style().set('shown', true)}
          else if  (value === false){LB.style().set('shown', false)}//{Map.clear()  }//{Map.remove(n), Map.remove(soilinspectorPanel), Map.remove(legendPanel)}
        }
      })
      var UBcheck = ui.Checkbox({label: 'provide Upper Bound (<,<=,<>,!<>)',value: false,style: {color: '#dc7a55', width: '200px'},
        onChange: function(value) {
          if (value === true) {UB.style().set('shown', true)}
          else if  (value === false){UB.style().set('shown', false)}//{Map.clear()  }//{Map.remove(n), Map.remove(soilinspectorPanel), Map.remove(legendPanel)}
        }
      })
	  
      panelo.remove(Qanalysis)
      panelo.remove(Qanalysislist)
      panelo.remove(Qthreshold)
      panelo.remove(Qdate)
      panelo.remove(selectMenuPanel1)
      panelo.remove(CVcheck)
      panelo.remove(CV)
      panelo.remove(LBcheck)      
      panelo.remove(LB)
      panelo.remove(UBcheck)
      panelo.remove(UB)
      panelo.add(Qanalysis)
      panelo.add(Qanalysislist)
      panelo.add(Qthreshold)
      panelo.add(Qdate)
      panelo.add(selectMenuPanel1)
      panelo.add(CVcheck)
      panelo.add(CV)
      panelo.add(LBcheck)      
      panelo.add(LB)
      panelo.add(UBcheck)
      panelo.add(UB)
      Qanalysislist.style().set('shown', false);
      Qthreshold.style().set('shown', false);
      LB.style().set('shown', false);
      UB.style().set('shown', false);
      CV.style().set('shown', false);
      Qanalysis.style().set('shown', true);
      Qdate.style().set('shown', true);
      selectMenuPanel1.style().set('shown', false);
      CVcheck.style().set('shown', true);
      LBcheck.style().set('shown', true);
      UBcheck.style().set('shown', true);

////////////////////////////////////////////////////////////////////////////// Quantitative Analysis Image Download ///////////////////////////////////////////////////////////////////////////////////////	 

      function downloadImg() {
          if (draw.getValue() == true){
            var boundingregion = boundary
          }
          else {
            var boundingregion = boundary.geometry()
          }        
         var downloadArgs = {
          name: indexpanellabel,
          scale: 10,
          region:boundingregion,
          filePerBand:false
        };
      var url = indeximage.getDownloadURL(downloadArgs);
      urlLabel.setUrl(url);
      urlLabel.style().set({shown: true});
      }
	  
      var urlLabel = ui.Label('Click to download the Data', {shown: false});
      var downloadButton = ui.Button('Get the URL for'+indexpanellabel, downloadImg);
 
////////////////////////////////////////////////////////////////////////////// Quantitative Analysis Image Legend ///////////////////////////////////////////////////////////////////////////////////////	
 
      function makeColorBarParams(palette) {
        return {
          bbox: [0, 0, 1, 0.1],
          dimensions: '100x10',
          format: 'png',
          min: 0,
          max: 1,
          palette: palette,
        };
      }
      var colorBar = ui.Thumbnail({
        image: ee.Image.pixelLonLat().select(0),
        params: makeColorBarParams(indexvis1.palette),
        style: {stretch: 'horizontal', margin: '0px 8px', maxHeight: '24px'},
      });
      var legendLabels = ui.Panel({
        widgets: [
          ui.Label(indexvis1.min, {margin: '4px 8px'}),
          ui.Label('Average'
              ),
          ui.Label(indexvis1.max, {margin: '4px 8px'})
        ],
        layout: ui.Panel.Layout.flow('horizontal')
      });
      var legendTitle = ui.Label({
        value: indexpanellabel,
        style: {fontWeight: 'bold'}
      });
      var legendPanel = ui.Panel({widgets: [legendTitle, colorBar, legendLabels], style: {position: 'bottom-left'}});
      Map.add(legendPanel);
      Map.style().set('cursor', 'crosshair');
      var soilinspectorPanel = ui.Panel({style:{position: 'bottom-left',stretch:  'horizontal'}});
      Map.add(soilinspectorPanel);
      soilinspectorPanel.add(downloadButton).add(urlLabel); 
      var i=0;
      var print_point = function(coords, map) {
        i++;
        var coord_array = Object.keys(coords).map(function (key) { return coords[key]; });
        var point = ee.Geometry.Point(coord_array);
        Map.addLayer(point,{},'Inspection Point'+i);
      };
      Map.onClick(print_point);      
      Map.onClick(function(coords) {inspectorPanel.clear();
        inspectorPanel.clear();
        var point = ee.FeatureCollection(ee.Geometry.Point(coords.lon, coords.lat))
        var inspectorChart = ui.Chart.image.seriesByRegion(orderedindeximagecollection, point, ee.Reducer.mean(),indexpanellabel, 10,'system:id', indexpanellabel)
        .setOptions({
          title: 'Temporal shift of Index values',
          vAxis: {title: indexpanellabel,viewWindow: {min: collectionminvalue.getInfo(), max: collectionmaxvalue.getInfo()}},
          hAxis: {title: 'Date'},
          lineWidth: 1,
          pointSize: 4,              
        });
        inspectorPanel.add(inspectorChart);
      });
    }
  }
}; 